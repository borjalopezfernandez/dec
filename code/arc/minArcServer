#!/usr/bin/env ruby

# == Synopsis
#
# This is a MINARC server
# 
# == Usage
# minArcServer --start | --kill | --check  [--devel]
#     --start                    it starts the server
#     --kill                     it kills the server
#     --check                    it checks the server execution status
#     --devel                    it loads the development preconfiguration
#     --help                     shows this help
#     --usage                    shows the usage
#     --Debug                    shows Debug info during the execution
#     --version                  shows version number
#
#
# == Author
# DEIMOS-Space S.L.
#
# == Copyright
# Copyright (c) 2018 ESA - DEIMOS Space S.L.
#

#########################################################################
#
# === Mini Archive Component (MinArc)
#
#  minArcServer
#
#########################################################################

require 'getoptlong'
require 'rdoc'

require 'cuc/Listener'
require 'arc/MINARC_Environment'

# require 'arc/MINARC_Server' (cf. require below)


# MAIN script function
def main

   include ARC

   @isDebugMode            = false
   showVersion             = false
   @bCheckStatus           = false
   @bStartServer           = false
   @bStopServer            = false
   @bShowVersion           = false
   @bDevelopment           = false
   @bShowUsage             = false
   
   opts = GetoptLong.new(
     ["--file", "-f",            GetoptLong::REQUIRED_ARGUMENT],
     ["--type", "-t",            GetoptLong::REQUIRED_ARGUMENT],
     ["--start", "-s",           GetoptLong::NO_ARGUMENT],
     ["--kill",   "-k",          GetoptLong::NO_ARGUMENT],
     ["--check", "-c",           GetoptLong::NO_ARGUMENT],
     ["--list", "-l",            GetoptLong::NO_ARGUMENT],
     ["--devel", "-d",           GetoptLong::NO_ARGUMENT],
     ["--Debug", "-D",           GetoptLong::NO_ARGUMENT],
     ["--usage", "-u",           GetoptLong::NO_ARGUMENT],
     ["--version", "-v",         GetoptLong::NO_ARGUMENT],
     ["--help", "-h",            GetoptLong::NO_ARGUMENT]
     )
      
   begin
      opts.each do |opt, arg|
         case opt      
            when "--Debug"             then @isDebugMode          = true
            when "--devel"             then @bDevelopment         = true
            when "--version"           then @bShowVersion         = true
            when "--start"             then @bStartServer         = true
            when "--kill"              then @bStopServer          = true
	         when "--check"             then @bCheckStatus         = true
			   when "--help"              then @bShowUsage           = true
	         when "--usage"             then @bShowUsage           = true
         end
      end
   rescue Exception
      exit(99)
   end

   if @bShowVersion == true then
      print("\nESA - DEIMOS-Space S.L. ", File.basename($0), " Version: [#{ARC.class_variable_get(:@@version)}]", "\n")
      hRecord = ARC.class_variable_get(:@@change_record)
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }
      exit(0)
   end

   # -------------------------------------------------------

   if @bShowUsage == true then
      usage
      exit(0)
   end

   # -------------------------------------------------------


   if !@bCheckStatus and !@bStartServer and !@bStopServer
      usage
      exit(99)
   end

   if @bDevelopment == true then
      load_config_development
   else
      load_config_production
   end

   if @bCheckStatus == true then
      checkStatus
   end

   if @bStopServer == true then
      stopServer
   end

   if @bStartServer == true then
      startServer
   end
   
   exit(0)

end

#-------------------------------------------------------------

# It checks whether the server is running or not
# It returns:
# * 0 -> server is running
# * 1 -> server is not running
#
def checkStatus
   checker = CUC::CheckerProcessUniqueness.new(File.basename($0), "", true, ENV['MINARC_TMP'])
   if @isDebugMode == true then
      checker.setDebugMode
   end
   ret     = checker.isRunning
   if ret == false then
      puts "minArcServer is not running !"
      exit(1)
   else
      puts "minArcServer is running :-)"
      exit(0)
   end
end
#-------------------------------------------------------------

def startServer
   @locker = CUC::CheckerProcessUniqueness.new(File.basename($0), "", true, ENV['MINARC_TMP']) 
   if @locker.isRunning == true then
      puts "\n#{File.basename($0)} is already running !\n\n"
      exit(99)
   end  
   # Register in lock file the daemon
   @locker.setRunning
   
   require 'arc/MINARC_Server'

   MINARC_Server.run!

   exit(0)
   
end
#-------------------------------------------------------------

#-------------------------------------------------------------

# It stops the listener for the given I/F
def stopServer
   checker = CUC::CheckerProcessUniqueness.new(File.basename($0), "", true, ENV['MINARC_TMP'])
   pid     = checker.getRunningPID
   if pid == false then
      msg = "minArcServer was not running :-|"
      puts msg
      # @logger.info(msg)
   else
      puts "Sending signal SIGKILL to Process #{pid} for killing minArcServer"
      Process.kill(9, pid.to_i)
	   checker.release
      # @logger.info("minArcServer has been shut-down")
   end
end
#-------------------------------------------------------------


#-------------------------------------------------------------

def usage
   fullpathFile = File.expand_path(__FILE__)
      
   value = `#{"head -24 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }  
end

#-------------------------------------------------------------


#-------------------------------------------------------------

#===============================================================================
# Start of the main body
main
# End of the main body
#===============================================================================
