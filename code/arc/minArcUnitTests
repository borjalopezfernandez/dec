#!/usr/bin/env ruby

#########################################################################
#
# === Ruby source for #MINARC_TestCases class
#
# === Written by DEIMOS Space S.L. (bolf)
#
# === Mini Archive Component (MinArc)
# 
# module MINARC
#
#########################################################################

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'

require 'arc/MINARC_Environment'
require 'arc/MINARC_Client'
require 'arc/MINARC_Status'

# Preconditions:
# 1 - setup 
# 1.1 - load_config_development
# 1.2 - inventory database is created

# 2 - teardown
# 2.1 - purge archive
# 2.2 - inventory database is destroyed

#  0  - test_commmandline_helpers
#  1  - test_local_minArcStore
#  2  - test_local_minArcRetrieve
#  3  - test_local_purge
#  4  - test_local_status_filename
#  5  - test_remote_status_filename
#  6  - test_remote_delete
#  7  - test_remote_retrieve
#  8  - test_remote_api_version
#  9  - test_remote_api_retrieve_file
# 10  - test_remote_api_retrieve_type
# 11  - test_remote_api_delete
# 12  - test_local_and_remote_status_global
# 13  - test_handler_m2ts_local
# 14  - test_handler_m2ts_local_mp4
# 15  - test_local_minArcFile

class TestCaseStore < Test::Unit::TestCase

   include CUC::DirUtils
   include ARC
   
   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   # --------------------------------------------------------
   
   Test::Unit.at_start do      
      puts
      puts "======================================"
      puts "MINARC Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      
      if c != 'Y' then
         exit(99)
      end
      
      @@conf = MINARC_Environment.new
      
      @@conf.wrapper_load_config_development


      puts      
      @@conf.wrapper_print_environment
      puts
 
      if @@conf.wrapper_check_environment == false then
         puts "minArc environment not suited for unit tests"
         puts
         exit(99)
      end
 
#      puts "call start teardown"
#      self.teardown
#      puts "call end teardown"


      begin
         cmd = "minArcDB -d"
         puts cmd
         ret = system(cmd)

         cmd = "minArcDB -c"
         puts cmd
         ret = system(cmd)
      rescue
      end

      begin
         cmd = "minArcPurge -Y"
         puts cmd
         # ret = system(cmd)
      rescue
      end



=begin
      puts
      puts "GEM DATADIR = #{Gem.datadir("minarc")}"
      puts
      
      rootpath = nil
      
      if Gem.datadir("minarc") == nil then
         rootpath = ENV['DEC_BASE']
         @testDir = File.join(rootpath, "code/arc/plugins/test/")
      else
         rootpath = Gem.datadir("minarc")
         @testDir = File.join(rootpath, "../../code/arc/plugins/test/")
      end
      
=end
      
      @@testDataDir        = File.join( File.dirname(File.expand_path(__FILE__)), "plugins/test" )
      @@testFile1          = "S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF"
      @@filename1_noext    = "S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001"

      system("rm -f #{@@testDataDir}/S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.7z")
      system("rm -f #{@@testDataDir}/20110204T193316_000001.m2ts")

      @@prevDir = Dir.pwd     
      Dir.chdir(@@testDataDir)
      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      Dir.chdir(@@prevDir)

      system("minArcServer -k")
      prevDir = Dir.pwd
      Dir.chdir(ENV['MINARC_TMP'])
      
            
      puts "init server"
      FileUtils.rm_f("#{ENV['MINARC_TMP']}/minarc_server.out")
      @serverPID = spawn("minArcServer -s > #{ENV['MINARC_TMP']}/minarc_server.out 2>&1")
      Dir.chdir (prevDir)
      puts @serverPID
            
   end
   
   # --------------------------------------------------------
   
   Test::Unit.at_exit do
      puts "End of tests"
            
      puts "Killing MINARC_Server"
      cmd = "minArcServer -k"
      system(cmd)
      
      Process.kill(9, @serverPID)
      
      cmd = "\\rm -f S2A_OPER_REP_OPDPC__SGS__20170214T113527_V20170214T080018_20170214T080336*"
      system(cmd)
      
   end
   
   # --------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development
      
      @path = "#{ENV['MINARC_BASE']}/code/arc"
      
      Dir.chdir(@@testDataDir)
      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      system("\\rm -f #{@@testDataDir}/#{@@filename1_noext}.7z")
      
      Dir.chdir(@@prevDir)
      
      Dir.chdir(ENV['MINARC_TMP'])       

      puts
      puts Dir.pwd
      puts
      puts "END OF MINARC_UnitTests::#{__method__.to_s}"
      puts
   end
   # --------------------------------------------------------
   # After every test case

   def teardown
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      @@conf.wrapper_load_config_development

      # ENV.delete("MINARC_SERVER")

      cmd = "minArcPurge -Y"
      ret = system(cmd)

      if ret == false then
         puts "Error when cleaning the minarc root directory ! :-("
         puts
         exit(99)
      end
      puts
      puts "END OF MINARC_UnitTests::#{__method__.to_s}"
      puts

   end
   # --------------------------------------------------------

   def test_commandline_helpers
   
      @@conf.wrapper_unset_config

      cmd = "minArcFile -v"
      assert(system(cmd), cmd)
   
      cmd = "minArcDelete -v"
      assert(system(cmd), cmd)
      
      cmd = "minArcStore -v"
      assert(system(cmd), cmd)

      cmd = "minArcRetrieve -v"
      assert(system(cmd), cmd)

      cmd = "minArcStatus -v"
      assert(system(cmd), cmd)

      cmd = "minArcDB -v"
      assert(system(cmd), cmd)

      cmd = "minArcPurge -v"
      assert(system(cmd), cmd)

      cmd = "minArcServer -v"
      assert(system(cmd), cmd)

      cmd = "minArcServer -h"
      assert(system(cmd), cmd)

      cmd = "minArcStore -h"
      assert(system(cmd), cmd)

      cmd = "minArcStore -g"
      assert(system(cmd), cmd)

      cmd = "minArcRetrieve -h"
      assert(system(cmd), cmd)

      cmd = "minArcFile -h"
      assert(system(cmd), cmd)

      cmd = "minArcRetrieve -u"
      assert(system(cmd), cmd)

      cmd = "minArcStatus -h"
      assert(system(cmd), cmd)

      cmd = "minArcStatus -u"
      assert(system(cmd), cmd)

      cmd = "minArcDelete -h"
      assert(system(cmd), cmd)

      cmd = "minArcDelete -u"
      assert(system(cmd), cmd)

      cmd = "minArcPurge -h"
      assert(system(cmd), cmd)

      cmd = "minArcPurge -u"
      assert(system(cmd), cmd)

      cmd = "minArcDB -h"
      assert(system(cmd), cmd)

      cmd = "minArcDB -u"
      assert(system(cmd), cmd)

      # invoke command line parameters without parameters to do nothing
      # and return error in parameters

      cmd = "minArcDelete"
      assert(!system(cmd), cmd)

      cmd = "minArcRetrieve"
      assert(!system(cmd), cmd)

      cmd = "minArcDB"
      assert(!system(cmd), cmd)

      cmd = "minArcPurge"
      assert(!system(cmd), cmd)

      cmd = "minArcServer"
      assert(!system(cmd), cmd)

      cmd = "minArcStatus"
      assert(!system(cmd), cmd)

      cmd = "minArcStore"
      assert(!system(cmd), cmd)

      cmd = "minArcFile"
      assert(!system(cmd), cmd)

      @@conf.wrapper_load_config_development
      
   end
   
   # -------------------------------------------------------------
   
   def test_local_minArcStore
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development
      
      cmd = "minArcStore -t S2PDGS -f #{@@testDataDir}/#{@@testFile1} --noserver"
      puts cmd
      assert(system(cmd), "minArcStore")
      
      system("\\rm -f #{@@testDataDir}/#{@@filename1_noext}.7z")
   end
   # --------------------------------------------------------

   def test_local_minArcRetrieve
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      test_local_minArcStore
      
      cmd = "minArcRetrieve -T --noserver"
      puts cmd
      assert(system(cmd), "minArcRetrieve -T --noserver")
      
      cmd = "minArcRetrieve -T"
      puts cmd
      assert(system(cmd), "minArcRetrieve -T")   

   end
   # --------------------------------------------------------

   def test_DBModel
      require 'arc/MINARC_DatabaseModel'
      
      test_local_minArcStore
            
      aFile = ArchivedFile.where(name: @@filename1_noext)
      
      
      puts
      aFile.to_a[0].print_introspection
      puts
            
   end
   # --------------------------------------------------------

   def test_local_purge
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
   
      test_local_minArcStore
   
      cmd = "minArcPurge -Y"
      puts cmd
      assert(system(cmd), cmd)
   end

   # -------------------------------------------------------------

   def test_local_status_filename
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      test_local_minArcStore

      puts
      puts

      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} --noserver"
      puts
      puts cmd
      puts
      assert(system(cmd), cmd)      
   end

   # -------------------------------------------------------------
   # -------------------------------------------------------------
   def test_remote_status_filename
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
            
      test_local_minArcStore
            
      Dir.chdir(@@prevDir)
      
      cmd = "minArcStatus -f #{File.basename(@@testFile1, ".*")} -D"
      puts
      puts cmd
      puts
      assert(system(cmd), cmd)  
   end
   # -------------------------------------------------------------
   
   def test_remote_delete
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
   
      test_local_minArcStore
   
      puts "Set environment variables to remote only"
      @@conf.wrapper_setRemoteModeOnly
      puts
   
      cmd = "minArcDelete -f #{File.basename(@@testFile1, ".*")} -D"
      puts cmd
      assert(system(cmd), "minArcDelete")
      @@conf.wrapper_load_config_development
   end

   # -------------------------------------------------------------
      
   def test_remote_retrieve
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
  
      test_local_minArcStore
      
      Dir.chdir(@@prevDir)
      system("\\rm -f #{@@filename1_noext}*") 
 
   
      puts "Set environment variables to remote only"
      @@conf.wrapper_setRemoteModeOnly
      puts
   
      cmd = "minArcRetrieve -f #{File.basename(@@testFile1, ".*")} -D"
      puts cmd
      assert(system(cmd), cmd)
            
      puts Dir.pwd
      puts      
      cmd = "\\rm -f #{Dir.pwd}/#{@@filename1_noext}.EOF"
      puts cmd
      system(cmd)
      
      cmd = "\\rm -f #{Dir.pwd}/#{@@filename1_noext}.7z"
      puts cmd
      system(cmd)
      
   end

   # -------------------------------------------------------------   
   def test_remote_api_version
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      arc = ARC::MINARC_Client.new
      # arc.setDebugMode

      version = arc.getVersion
      
      puts "MINARC Version #{version}"
      assert( (version != "") , "Verification remote API_URL_VERSION: #{API_URL_VERSION}")   
   end
   # -------------------------------------------------------------

=begin
   def test_remote_api_store
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      
      arc = ARC::MINARC_Client.new(true)
      # arc.setDebugMode

      type     = "S2PDGS"
      bDelete  = false
      assert( arc.storeFile("#{@@testDataDir}/#{@@testFile1}", type, bDelete) , "Verification remote API_URL_STORE: #{API_URL_STORE}")
   end

=end   

   # -------------------------------------------------------------

   def test_remote_api_retrieve_file
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      test_local_minArcStore
               
      arc = ARC::MINARC_Client.new(true)
      arc.setDebugMode
      
      Dir.chdir(@@prevDir)
      system("rm -f #{@@testDataDir}/#{@@filename1_noext}.7z")

      dir1 = "1.#{__method__.to_s}"
      
      begin      
         FileUtils.mkdir(dir1)
      rescue Errno::EEXIST => e
         puts e.to_s
         puts "Could not create directory in #{Dir.pwd}"
         puts "Could not create directory #{dir1}"
      end

      pwd = Dir.pwd
      
      Dir.chdir(dir1)


      cmd = "\\rm -f #{File.basename(@@testFile1, ".*")}*"
      puts cmd
      system(cmd)
      puts Dir.pwd

      assert( \
               arc.retrieveFile(File.basename(@@testFile1, ".*")), \
               "Verification remote API_URL_RETRIEVE: #{API_URL_RETRIEVE}" \
               )
                     
      arr = Dir["#{File.basename(@@testFile1, ".*")}*"]
      
      assert(!arr.empty?, "File retrieved #{arr[0]}")
            
      system("\\rm -f #{arr[0]}")
      
      Dir.chdir(pwd)
      
      puts Dir.pwd
      
      cmd = "\\rm -rf #{dir1}/"
      puts cmd
      system(cmd)
      
      cmd = "\\rm -f #{@@filename1_noext}.7z"
      puts cmd
      system(cmd)
      puts
      puts Dir.pwd
      puts
      puts
   end
   # -------------------------------------------------------------

   def test_remote_api_retrieve_filetype
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      test_local_minArcStore

      Dir.chdir(@@prevDir)

      pwd = Dir.pwd               
      arc = ARC::MINARC_Client.new(true)
      arc.setDebugMode
#
#      type     = "S2PDGS"
#      bDelete  = false
#      
#      arc.storeFile(@file, type, bDelete)

      dir1 = "1.#{__method__.to_s}"
      
      begin      
         FileUtils.mkdir(dir1)
      rescue Errno::EEXIST => e
         puts e.to_s
         puts "Could not create directory in #{Dir.pwd}"
         puts "Could not create directory #{dir1}"
      end

      Dir.chdir(dir1)

      cmd = "minArcRetrieve -t REP_OPDPC_ -L #{Dir.pwd}"
      
      puts
      puts cmd
      puts
      
      assert(system(cmd), cmd)
           
      arr = Dir["#{File.basename(@@testFile1, ".*")}*"]
      
      assert(!arr.empty?, "File retrieved #{arr[0]}")
            
      system("\\rm -f #{arr[0]}")
      
      Dir.chdir(pwd)
      
      system("\\rm -rf #{dir1}/")           
   
   end
   # -------------------------------------------------------------

   def test_remote_api_delete
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      test_local_minArcStore
      
      puts
      puts
      
      arc = ARC::MINARC_Client.new(true)
      assert( \
               arc.deleteFile(File.basename(@@testFile1, ".*") ), \
               "Verification remote API_URL_DELETE: #{API_URL_DELETE}" \
             )
   end

   # -------------------------------------------------------------

   def test_local_and_remote_status_global
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
      
      Dir.chdir(@@prevDir)
      
      test_local_minArcStore

      puts
      puts

      cmd = "minArcStatus -g --noserver"
      puts cmd
      assert(system(cmd), cmd)
      
      puts
      puts

      cmd = "minArcStatus -g"
      puts cmd
      assert(system(cmd), cmd)
            
   end

   # -------------------------------------------------------------

   def test_handler_m2ts_local
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
   
      @@conf.wrapper_load_config_development
      
      cmd = "minArcStore -t m2ts -f #{@@testDataDir}/example_1.m2ts -D --noserver"
      puts cmd
      assert(system(cmd), cmd)
   
      cmd = "minArcRetrieve -t m2ts -l --noserver"
      puts cmd
      assert(system(cmd), cmd)
   
      dir1 = "1.#{__method__.to_s}"
      
      begin      
         FileUtils.mkdir(dir1)
      rescue Errno::EEXIST => e
      
      end

      pwd = Dir.pwd
      
      Dir.chdir(dir1)
      
      cmd = "minArcRetrieve -f 20110204T193316_000001 --noserver -L #{Dir.pwd}"
      puts cmd
      assert(system(cmd), cmd)
   
      Dir.chdir(pwd)   
   
      cmd = "\\rm -rf #{dir1}*"
      system(cmd)

   end
   # -------------------------------------------------------------

   def test_handler_m2ts_local_mp4
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts
   
      @@conf.wrapper_load_config_development
      
      cmd = "minArcStore -t m2ts -f #{@@testDataDir}/example_1.mp4 -D --noserver"
      puts cmd
      assert(system(cmd), cmd)
   
      cmd = "minArcRetrieve -t mp4 -l --noserver"
      puts cmd
      assert(system(cmd), cmd)
   
      dir1 = "1.#{__method__.to_s}"
      
      begin      
         FileUtils.mkdir(dir1)
      rescue Errno::EEXIST => e
      
      end

      pwd = Dir.pwd
      
      Dir.chdir(dir1)
      
      cmd = "minArcRetrieve -f 20181029T114813_000002 --noserver -L #{Dir.pwd}"
      puts cmd
      assert(system(cmd), cmd)
   
      Dir.chdir(pwd)   
   
      cmd = "\\rm -rf #{dir1}*"
      system(cmd)

   end
   # -------------------------------------------------------------

   def test_local_minArcFile
      puts __method__.to_s
      puts
      puts "================================================"
      puts "MINARC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "minArcFile -t S2PDGS"
      puts cmd
      assert(!system(cmd), cmd)

      cmd = "minArcFile -f S2A_OPER_REP_OPDPC__SGS__20170214T113527_V20170214T080018_20170214T080336.EOF"
      puts cmd
      assert(!system(cmd), cmd)

      cmd = "minArcFile -T S2PDGS -f S2A_OPER_REP_OPDPC__SGS__20170214T113527_V20170214T080018_20170214T080336.EOF -t"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "minArcFile -T S2PDGS -f S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF -s"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "minArcFile -T S2PDGS -f S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF -e"
      puts cmd
      assert(system(cmd), cmd)


   end
   # -------------------------------------------------------------

end


#=====================================================================


#-----------------------------------------------------------


