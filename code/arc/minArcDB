#!/usr/bin/env ruby

#
# == Usage
# minArcDB --create-tables | --drop-tables
#     --create-tables   create all minarc required tables
#     --drop-tables     drops all minarc tables
#     --export-rows     it exports all rows
#     --help   shows this help
# 
# == Author
# DEIMOS-Space S.L.
#
# == Copyright
# Copyright (c) 2008 ESA - DEIMOS Space S.L.
#
require 'rubygems'
require 'active_record'

require 'getoptlong'
require 'rdoc'

require 'arc/MINARC_Migrations'

dbAdapter   = ENV['MINARC_DB_ADAPTER']
dbName      = ENV['MINARC_DATABASE_NAME']
dbUser      = ENV['MINARC_DATABASE_USER']
dbPass      = ENV['MINARC_DATABASE_PASSWORD']

ActiveRecord::Base.establish_connection(:adapter => dbAdapter,
         :host => "localhost", :database => dbName,
         :username => dbUser, :password => dbPass)


# MAIN script function
def main

   @bUp           = false
   @bDown         = false
   @bUpdate       = false
   @bExport       = false
   
   opts = GetoptLong.new(
     ["--drop-tables",     "-d",    GetoptLong::NO_ARGUMENT],
     ["--create-tables",   "-c",    GetoptLong::NO_ARGUMENT],
     ["--update-tables",   "-u",    GetoptLong::NO_ARGUMENT],
     ["--export-rows",     "-e",    GetoptLong::NO_ARGUMENT],
     ["--help",            "-h",    GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt      
            when "--create-tables"     then @bUp       = true
            when "--drop-tables"       then @bDown     = true
            when "--update-tables"     then @bUpdate   = true
            when "--export-rows"       then @bExport   = true
			   when "--help"              then usage
         end
      end
   rescue Exception => e
      # puts e.to_s
      exit(99)
   end

   if ENV["MINARC_ARCHIVE_ROOT"] == nil or ENV["MINARC_ARCHIVE_ROOT"] == "" then
      puts "#{__FILE__} requires local mode configuration"
      exit(99)
   end

   if @bDown and @bUp then
      usage
   end

   if !@bDown and !@bUp and !@bUpdate and !@bExport then 
      usage
   end

   if @bDown then
      begin
         CreateArchivedFiles.down
         if File.exist?(@dbName) == true then
            File.delete(@dbName)
         end
         exit(0)
      rescue
         exit(99)
      end
   end

   if @bUp then
      begin
         CreateArchivedFiles.up
         exit(0)
      rescue
         exit(99)
      end
   end
 
   if @bUpdate then
      migration = AddNewColumns.new
      migration.change
      exit(0)
   end 
 
 
   if @bExport then
      Export2CSV.new
   end
 
   exit(0)

end

#-------------------------------------------------------------

def usage
   fullpathFile = File.expand_path(__FILE__)
      
   value = `#{"head -15 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
   exit
end

#-------------------------------------------------------------


#=====================================================================
# Start of the main body
main
# End of the main body
#=====================================================================
