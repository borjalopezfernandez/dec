#!/usr/bin/env ruby

# == Synopsis
#
# This is a eocfi tool to perform some orbit computations
# 
#
# Parameters:
# 
# -s / --orbit-abs-start flag:
#
# Parameter for the absolute start orbit
#
#
# -e / --orbit-abs-end flag:
#
# Parameter for the absolute start orbit
#
#
#
# == Usage
# eocfi_orbit --startDate <date> --endDate <endDate> -S <GFUCINBX>
#     --list  it lists the ground stations
#     --tle         <TLE file> 
#     --startDate   <date>     
#     --endDate     <date>
#     --eXtra     generates OSV ancillary data
#     --Config    it shows the configuration
#     --Debug     shows Debug info during the execution
#     --help      shows this help
#
# 
# == Author
# Elecnor Deimos-Space
#

require 'stringio'
require 'getoptlong'
require 'rubygems'

require 'cuc/Converters'
require 'cuc/Log4rLoggerFactory'
require 'eocfi/EOCFI_Loader_Wrapper_Earth_Explorer'
require 'eocfi/EOCFI_Environment'
require 'eocfi/EOCFI_Constants'
require 'eocfi/EOCFI_MissionFiles'


# MAIN script function
def main
 
   include EOCFI
   include CUC::Converters
   
   @isDebugMode      = false
   @bShowVersion     = false
   @bShowUsage       = false
   @bList            = false
   @bShowConfig      = false

   @bOSVExtra        = false
   @startDate        = nil
   @endDate          = nil
   @station          = ""
   fileTLE           = nil

   opts = GetoptLong.new(
     ["--startDate",   "-s",           GetoptLong::REQUIRED_ARGUMENT],
     ["--endDate",   "-e",             GetoptLong::REQUIRED_ARGUMENT],
     ["--tle",   "-t",                GetoptLong::REQUIRED_ARGUMENT],
     ["--Station",   "-S",             GetoptLong::REQUIRED_ARGUMENT],
     ["--list", "-l",                  GetoptLong::NO_ARGUMENT],
     ["--eXtra", "-X",                 GetoptLong::NO_ARGUMENT],
     ["--Info", "-I",                  GetoptLong::NO_ARGUMENT],
     ["--Config", "-C",                GetoptLong::NO_ARGUMENT],
     ["--version", "-v",               GetoptLong::NO_ARGUMENT],
     ["--Debug", "-D",                 GetoptLong::NO_ARGUMENT],
     ["--usage", "-u",                 GetoptLong::NO_ARGUMENT],
     ["--help", "-h",                  GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt
            when "--Debug"                then @isDebugMode             = true
            when "--tle"                  then fileTLE                  = arg.to_s
            when "--list"                 then @bList                   = true
            when "--version"              then @bShowVersion            = true 
            when "--eXtra"                then @bOSVExtra               = true
            when "--Config"               then @bShowConfig             = true
            when "--usage"                then @bShowUsage              = true
            when "--Station"              then @station                 = arg.to_s
            when "--startDate"            then @startDate               = arg.to_s
            when "--endDate"              then @endDate                 = arg.to_s
			   when "--help"                 then @bShowUsage              = true
         end
      end
   rescue Exception => e
      puts e.to_s
      exit(99)
   end

   # ------------------------------------------

   if @bShowUsage == true then
      usage
      exit(0)
   end

   # ------------------------------------------

   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(99)
   end

   # ------------------------------------------
   # initialize logger
      
   loggerFactory = CUC::Log4rLoggerFactory.new("#{File.basename(__FILE__)}", "#{ENV['EOCFI_CONFIG']}/eocfi_log_config.xml")

   @logger = loggerFactory.getLogger
      
   if @logger == nil then
      puts
		puts "Error in #{File.basename(__FILE__)}"
		puts "Could not set up logging system !  :-("
      puts "Check EOCFI logs configuration under \"#{ENV['EOCFI_CONFIG']}/eocfi_log_config.xml\"" 
		puts
		puts
		exit(99)
   end
   # ------------------------------------------

   @cfi         = EOCFI::Earth_Explorer_CFI.new
   
   # ------------------------------------------

   if @bShowVersion == true then
      print("\nElecnor - DEIMOS-Space S.L. ", File.basename($0), " Version: [#{EOCFI.class_variable_get(:@@version)}]", "\n\n")
      hRecord = EOCFI.class_variable_get(:@@change_record)
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }
      val  = @cfi.xo_check_library_version(@isDebugMode)
      puts
      exit(0)
   end

   # ------------------------------------------
   if @bShowUsage == true then
      usage
      exit(0)
   end
   # ------------------------------------------
  
   # ------------------------------------------
   if @isDebugMode == true then
      @cfi.xo_check_library_version(false)
      puts
   end
   # ------------------------------------------

   missionFiles = EOCFI_MissionFiles.new(@logger)

   if @isDebugMode == true then
      @logger.info("orbit reference : #{missionFiles.file_MPL_ORBSCT}")
      @logger.info("ground stations : #{missionFiles.file_MPL_GND_DB}")
      @logger.info("swath template  : #{missionFiles.file_MPL_SWTVIS}")
   end

   statDB         = missionFiles.file_MPL_GND_DB
   @roef          = missionFiles.file_MPL_ORBSCT
   swath          = missionFiles.file_MPL_SWTVIS

   # ------------------------------------------

   # TLE management

   if fileTLE != nil then
      
      if File.exist?(fileTLE) == false then
         @logger.error("File #{fileTLE} is not available")
         exit(99)
      end
      readTLE(fileTLE)
      initTime()
      initOrbit(fileTLE)
      osv = genOSV(@tleEpoch)

      @logger.info("Earth Centered Earth Fixed / Cartesian coordinates:")
      @logger.info("epoch = #{mjd2000_to_utc(@tleEpoch)} / #{@tleEpoch}")
      @logger.info("position[x] = #{osv[RB_OSV_IDX_POS_X]} #{RB_OSV_POS_UNIT}")
      @logger.info("position[y] = #{osv[RB_OSV_IDX_POS_Y]} #{RB_OSV_POS_UNIT}")
      @logger.info("position[z] = #{osv[RB_OSV_IDX_POS_Z]} #{RB_OSV_POS_UNIT}")
      @logger.info("velocity[x] = #{osv[RB_OSV_IDX_VEL_X]} #{RB_OSV_VEL_UNIT}")
      @logger.info("velocity[y] = #{osv[RB_OSV_IDX_VEL_Y]} #{RB_OSV_VEL_UNIT}")
      @logger.info("velocity[z] = #{osv[RB_OSV_IDX_VEL_Z]} #{RB_OSV_VEL_UNIT}")
   
      if @bOSVExtra == true then
         osvExtra = genOSVExtra()
         @logger.info("OSV Ancillary data:")
         @logger.info("lon = #{osvExtra[XO_ORBIT_EXTRA_NUM_DEP_ELEMENTS+XO_ORBIT_EXTRA_GEOC_LONG]} #{XO_ORBIT_EXTRA_GEOC_LONG_UNIT}")
         @logger.info("lat = #{osvExtra[XO_ORBIT_EXTRA_NUM_DEP_ELEMENTS+XO_ORBIT_EXTRA_GEOD_LAT]} #{XO_ORBIT_EXTRA_GEOD_LAT_UNIT}")
         @logger.info("alt = #{osvExtra[XO_ORBIT_EXTRA_NUM_DEP_ELEMENTS+XO_ORBIT_EXTRA_GEOD_ALT]} #{XO_ORBIT_EXTRA_GEOD_ALT_UNIT}")
      end
      exit(0)
   end
   # ------------------------------------------


   # ------------------------------------------

   if @bList == true then
      listStations(statDB)
      exit(0)
   end

   # ------------------------------------------

   # ------------------------------------------

   initTime()

   initOrbit()

   if @bShowConfig == true or @isDebugMode == true then
      showOrbitInfo
   end

   if @startDate == nil then
      exit(0)
   end

   if @startDate != nil then
      proc_time = convertTime(@startDate)
   end

   osv = genOSV(proc_time)
   
   @logger.info("Earth Centered Earth Fixed / Cartesian coordinates:")
   @logger.info("epoch = #{str2date(@startDate)} / #{proc_time}")
   @logger.info("position[x] = #{osv[RB_OSV_IDX_POS_X]} #{RB_OSV_POS_UNIT}")
   @logger.info("position[y] = #{osv[RB_OSV_IDX_POS_Y]} #{RB_OSV_POS_UNIT}")
   @logger.info("position[z] = #{osv[RB_OSV_IDX_POS_Z]} #{RB_OSV_POS_UNIT}")
   @logger.info("velocity[x] = #{osv[RB_OSV_IDX_VEL_X]} #{RB_OSV_VEL_UNIT}")
   @logger.info("velocity[y] = #{osv[RB_OSV_IDX_VEL_Y]} #{RB_OSV_VEL_UNIT}")
   @logger.info("velocity[z] = #{osv[RB_OSV_IDX_VEL_Z]} #{RB_OSV_VEL_UNIT}")

   if @bOSVExtra == true then
      osvExtra = genOSVExtra()
      @logger.info("OSV Ancillary data:")
      @logger.info("lon = #{osvExtra[XO_ORBIT_EXTRA_NUM_DEP_ELEMENTS+XO_ORBIT_EXTRA_GEOC_LONG]} #{XO_ORBIT_EXTRA_GEOC_LONG_UNIT}")
      @logger.info("lat = #{osvExtra[XO_ORBIT_EXTRA_NUM_DEP_ELEMENTS+XO_ORBIT_EXTRA_GEOD_LAT]} #{XO_ORBIT_EXTRA_GEOD_LAT_UNIT}")
      @logger.info("alt = #{osvExtra[XO_ORBIT_EXTRA_NUM_DEP_ELEMENTS+XO_ORBIT_EXTRA_GEOD_ALT]} #{XO_ORBIT_EXTRA_GEOD_ALT_UNIT}")
   end

   exit(0)

   # ------------------------------------------

   isDebugMode = false
   strDate     = "20230422T120000"

   @logger.debug("xo_time_to_orbit")
   @logger.debug("orbit_file  : #{@roef}")
   @logger.debug("date        : #{strDate}")
   @logger.debug("isDebugMode : #{isDebugMode}")                  

   val         = @cfi.xo_time_to_orbit2(\
                     @roef, \
                     strDate, \
                     isDebugMode \
                     )

   exit(0)

end

## ----------------------------------------------------------

def showOrbitInfo

   # ---------------------
   if @isDebugMode == true then
      @logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")
   end
   # ---------------------

   abs_orbit   = 1
   isDebugMode = @isDebugMode

   if @isDebugMode == true then
      @logger.debug("=> xo_orbit_info(")
      @logger.debug("orbit_id    : #{@orbit_id}")
      @logger.debug("abs_orbit   : #{abs_orbit}")
      @logger.debug("isDebugMode : #{isDebugMode}")
      @logger.debug(")")
   end

   result = @cfi.xo_orbit_info(
      @orbit_id,
      abs_orbit,
      isDebugMode
   )

   @logger.info("orbit cycle")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_REPEAT_CYCLE)}   : #{result[XO_ORBIT_INFO_EXTRA_REPEAT_CYCLE]} #{UNIT_XO_ORBIT_INFO_EXTRA_REPEAT_CYCLE}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_CYCLE_LENGTH)}   : #{result[XO_ORBIT_INFO_EXTRA_CYCLE_LENGTH]} #{UNIT_XO_ORBIT_INFO_EXTRA_CYCLE_LENGTH}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MLST_DRIFT)}     : #{result[XO_ORBIT_INFO_EXTRA_MLST_DRIFT]} #{UNIT_XO_ORBIT_INFO_EXTRA_MLST_DRIFT}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MLST)}           : #{result[XO_ORBIT_INFO_EXTRA_MLST]} #{UNIT_XO_ORBIT_INFO_EXTRA_MLST}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_ANX_LONG)}       : #{result[XO_ORBIT_INFO_EXTRA_ANX_LONG]} #{UNIT_XO_ORBIT_INFO_EXTRA_ANX_LONG}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_UTC_ANX)}        : #{result[XO_ORBIT_INFO_EXTRA_UTC_ANX]} #{UNIT_XO_ORBIT_INFO_EXTRA_UTC_ANX}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_NODAL_PERIOD)}   : #{result[XO_ORBIT_INFO_EXTRA_NODAL_PERIOD]} #{UNIT_XO_ORBIT_INFO_EXTRA_NODAL_PERIOD}")
   @logger.info("mean keplerian elements")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_A)}   : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_A]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_A}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_E)}   : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_E]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_E}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_I)}   : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_I]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_I}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_RA)}  : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_RA]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_RA}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_W)}   : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_W]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_W}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_M)}   : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_M]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_M}")
   @logger.info("osculating keplerian elements")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_A)}   : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_A]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_A}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_E)}   : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_E]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_E}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_I)}   : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_I]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_I}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_RA)}  : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_RA]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_RA}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_W)}   : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_W]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_W}")
   @logger.info("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_M)}   : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_M]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_M}")

   # ---------------------
   if @isDebugMode == true then
      @logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   end
   # ---------------------

end

## ----------------------------------------------------------

def stationvistime_compute
   arrStationID   = @cfi.xd_read_station_id(statDB, @isDebugMode)

   arrStationID.each{|station_id|
      if @isDebugMode == true then
         @logger.debug(station_id)
      end
      outFile  = "NS1_GSOV_MPL_GNDVIS_#{station_id}.xml"
   
      if @station == station_id then
         @logger.debug("Generating #{outFile} #{@orbit_abs_start} - #{@orbit_abs_end}")
         retVal   = @cfi.xv_stationvistime_compute(
                                    @roef, 
                                    swath, 
                                    statDB, 
                                    station_id, 
                                    @orbit_abs_start, 
                                    @orbit_abs_end,
                                    outFile,
                                    @isDebugMode
                                    )
         break
      end
   }
end

## ----------------------------------------------------------

def listStations(statDB)

   if File.exist?(statDB) == false then
      @logger.error("station file #{statDB} not found")
      exit(99)
   end
   
   arrStationID   = @cfi.xd_read_station_id(statDB, @isDebugMode)

   if @isDebugMode == true then
      @logger.debug("ground stations defined in #{statDB}")
   end
   arrStationID.each{|station_id|
      @logger.info(station_id)
   }

end
## ----------------------------------------------------------

def readTLE(tle_file)

   satellite   = ""
   isDebugMode = @isDebugMode
   tle_data    = nil
   # ---------------------

   if @isDebugMode == true then
      @logger.debug("=> xd_read_tle(")
      @logger.debug("tle_file    : #{tle_file}")
      @logger.debug("satellite   : #{satellite}")
      @logger.debug("isDebugMode : #{isDebugMode}")
      @logger.debug(")")
   end

   begin
      tle_data  = @cfi.xd_read_tle(\
                     tle_file, \
                     satellite, \
                     isDebugMode
      )
   rescue => exception
      @logger.error(exception.to_s)
   end

   if @isDebugMode == true then
      @logger.debug("tle_data: #{tle_data}")
   end

   @logger.info("number of TLE records: #{tle_data.xd_read_tle_file_num_rec}")
   @logger.info("=> NORAD LINE ZERO:")
   @logger.info("NORAD SATCAT   : #{tle_data.xd_read_tle_rec_norad_satcat(0)}")
   @logger.info("=> NORAD FIRST LINE:")
   @logger.info("Sat. number        : #{tle_data.xd_read_tle_rec_sat_number(0)}")
   @logger.info("Classification     : #{tle_data.xd_read_tle_rec_classification(0)}")
   @logger.info("INT DESIGNATOR     : #{tle_data.xd_read_tle_rec_int_des(0)}")
   @logger.info("Epoch              : #{tle_data.xd_read_tle_rec_time(0)} / #{mjd2000_to_utc(tle_data.xd_read_tle_rec_time(0))}")
   @logger.info("First  Time Derivative Mean Motion : #{tle_data.xd_read_tle_rec_1st_mean_motion(0)}")
   @logger.info("Second Time Derivative Mean Motion : #{tle_data.xd_read_tle_rec_2nd_mean_motion(0)}")
   @logger.info("BSTAR drag         : #{tle_data.xd_read_tle_rec_bstar(0)}")
   @logger.info("Ephemeris type     : #{tle_data.xd_read_tle_rec_ephemeris_type(0)}")
   @logger.info("Element number     : #{tle_data.xd_read_tle_rec_element_number(0)}")
   @logger.info("Checksum#1         : #{tle_data.xd_read_tle_rec_checksum1(0)}")
   @logger.info("=> NORAD SECOND LINE")
   @logger.info("Eccentricity       : #{tle_data.xd_read_tle_rec_eccentricity(0)}")
   @logger.info("Argument of Perigee: #{tle_data.xd_read_tle_rec_w(0)} degrees")
   @logger.info("Inclination        : #{tle_data.xd_read_tle_rec_inclination(0)} degrees")
   @logger.info("Right Ascension of the Ascending Node (RAAN) : #{tle_data.xd_read_tle_rec_RAAN(0)} degrees")
   @logger.info("Mean Anomaly       : #{tle_data.xd_read_tle_rec_mean_anomaly(0)} degrees")
   @logger.info("Mean Motion        : #{tle_data.xd_read_tle_rec_mean_motion(0)} rev/day")
   @logger.info("Revolution @ epoch : #{tle_data.xd_read_tle_rec_abs_orbit(0)} revs")
   @logger.info("Checksum#2         : #{tle_data.xd_read_tle_rec_checksum2(0)}")
   # ---------------------

   @startDate = mjd2000_to_utc(tle_data.xd_read_tle_rec_time(0)).strftime("%Y%m%dT%H%M%S")
   @tleEpoch  = tle_data.xd_read_tle_rec_time(0)

end
## ----------------------------------------------------------

def initTime

   # ---------------------
   # if @isDebugMode == true then
   #   @logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")
   # end
   # ---------------------

   time_model     = XL_TIMEMOD_OSF
   n_files        = 1
   time_file      = Array.new
   time_file      << @roef
   time_init_mode = XL_SEL_FILE
   time_ref       = XL_TIME_UTC
   time0          = utc_to_mjd2000("20230101T000000")
   time1          = utc_to_mjd2000("20240101T000000")
   orbit0         = 0
   orbit1         = 99999
   # isDebugMode    = @isDebugMode
   isDebugMode    = false

   if @isDebugMode == true then
      @logger.debug("=> xl_time_ref_init_file(")
      @logger.debug("time_model       :  #{XL_Time_model_enum.key(time_model)}")
      @logger.debug("n_files          :  #{n_files}")
      @logger.debug("time_file        :  #{File.basename(time_file[0])}")
      @logger.debug("time_init_mode   :  #{XL_Time_init_mode_enum.key(time_init_mode)}")
      @logger.debug("time_ref         :  #{XL_Time_ref_enum.key(time_ref)}")
      @logger.debug("time0            :  #{time0} ; #{mjd2000_to_utc(time0)}")
      @logger.debug("time1            :  #{time1} ; #{mjd2000_to_utc(time1)}")
      @logger.debug("orbit0           :  #{orbit0}")
      @logger.debug("orbit1           :  #{orbit1}")
      @logger.debug("orbit1           :  #{orbit1}")
      @logger.debug("isDebugMode      :  #{isDebugMode}")
      @logger.debug(")")
   end

   @time_id         = @cfi.xl_time_ref_init_file(\
                           time_model, \
                           n_files, \
                           time_file, \
                           time_init_mode, \
                           time_ref, \
                           time0, \
                           time1, \
                           orbit0, \
                           orbit1, \
                           isDebugMode \
                     )

   if @isDebugMode == true then
      @logger.debug("time_id => #{@time_id}")
   end
   # ---------------------
   
   # if @isDebugMode == true then
   #   @logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   # end
   # ---------------------
end
## ----------------------------------------------------------

def convertTime(strTime)
   # ---------------------
   # if @isDebugMode == true then
   #   @logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")
   # end
   # ---------------------

   ascii_id_in       = XL_ASCII_CCSDSA_COMPACT
   time_ref_in       = XL_TIME_UTC
   ascii_in          = strTime
   proc_id_out       = XL_PROC
   time_ref_out      = XL_TIME_UTC
   processing_out    = nil
   # isDebugMode       = @isDebugMode
   isDebugMode       = false

   if @isDebugMode == true then
      @logger.debug("=> xl_time_ascii_to_processing(")
      @logger.debug("ascii_id_in      : #{XL_Ascii_enum.key(ascii_id_in)}") 
      @logger.debug("time_ref_in      : #{XL_Time_ref_enum.key(time_ref_in)}")
      @logger.debug("ascii_in         : #{ascii_in}")
      @logger.debug("proc_id_out      : #{XL_Proc_enum.key(XL_PROC)}")
      @logger.debug("time_ref_out     : #{XL_Time_ref_enum.key(time_ref_out)}")
      @logger.debug("isDebugMode      : #{isDebugMode}")
      @logger.debug(")")
   end

   processing_out = @cfi.xl_time_ascii_to_processing(
                        ascii_id_in,
                        time_ref_in,
                        ascii_in,
                        proc_id_out,
                        time_ref_out,
                        processing_out,
                        isDebugMode
                     )

   if @isDebugMode == true then
      @logger.debug("processing_out => #{processing_out}")
   end

   # ---------------------
   # if @isDebugMode == true then
   #   @logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   # end
   # ---------------------
   
   return processing_out

end
## ----------------------------------------------------------

def initOrbit(orbitFile = nil)
   
   # ---------------------
   # if @isDebugMode == true then
   #    @logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")
   # end
   # ---------------------

   sat_id      = XO_SAT_GENERIC
   model_id    = nil
   # time_id     = nil
   orbit_mode  = XO_ORBIT_INIT_AUTO
   n_files     = 1
   input_files = Array.new
   
   if orbitFile != nil then
      input_files << orbitFile
      sat_id      = XO_SAT_SENTINEL_1A
   else
      input_files << @roef
   end

   time_mode   = XO_SEL_FILE
   time_ref    = XL_TIME_UTC
   time0       = nil
   time1       = nil
   orbit0      = nil
   orbit1      = nil
   isDebugMode = @isDebugMode
   #isDebugMode = false

   if @isDebugMode == true then
      @logger.debug("=> xo_orbit_init_file(")
      @logger.debug("sat_id      : #{XO_Sat_id_enum.key(sat_id)}")
      @logger.debug("model_id    : #{model_id}")
      @logger.debug("time_id     : #{@time_id}")
      @logger.debug("orbit_mode  : #{XO_Orbit_init_mode.key(orbit_mode)}")
      @logger.debug("n_files     : #{n_files}")
      @logger.debug("input_files : #{File.basename(input_files[0])}")
      @logger.debug("time_mode   : #{XO_Time_init_mode.key(time_mode)}")
      @logger.debug("time_ref    : #{XL_Time_ref_enum.key(time_ref)}")
      @logger.debug("time0       : #{time0}")
      @logger.debug("time1       : #{time1}")
      @logger.debug("orbit0      : #{orbit0}")
      @logger.debug("orbit1      : #{orbit1}")
      @logger.debug("isDebugMode : #{isDebugMode}")
      @logger.debug(")")
   end

   @orbit_id = @cfi.xo_orbit_init_file(
                     sat_id,
                     model_id,
                     @time_id,
                     orbit_mode,
                     n_files,
                     input_files,
                     time_mode,
                     time_ref,
                     time0,
                     time1,
                     orbit0,
                     orbit1,
                     isDebugMode
                  )

   if @isDebugMode == true then
      @logger.debug("orbit_id => #{@orbit_id}")
   end
   # ---------------------
   
   # ---------------------
   # if @isDebugMode == true then
   #   @logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   # end
   # ---------------------
end

## ----------------------------------------------------------

def genOSV(processing_time)
  
   # ---------------------
   # if @isDebugMode == true then
   #   @logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")
   # end
   # ---------------------
  
   mode        = 0
   time_ref    = XL_TIME_UTC
   time        = processing_time
   # isDebugMode = @isDebugMode
   isDebugMode = false
  
   if @isDebugMode == true then
      @logger.debug("=> xo_osv_compute(")
      @logger.debug("orbit_id    : #{@orbit_id}")
      @logger.debug("mode        : #{mode} / Propagation model. Dummy input for current version.")
      @logger.debug("time_ref    : #{XL_Time_ref_enum.key(time_ref)}")
      @logger.debug("time        : #{time} ; #{mjd2000_to_utc(time)}")
      @logger.debug("isDebugMode : #{isDebugMode}")
      @logger.debug(")")
   end
  
   osv = @cfi.xo_osv_compute(
                                          @orbit_id,
                                          mode,
                                          time_ref,
                                          time,
                                          isDebugMode
                                       )
  
   if @isDebugMode == true then
      @logger.debug(osv)
   end
   # ---------------------
   
   # ---------------------
   # if @isDebugMode == true then
   #   @logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   # end
   # ---------------------
   return osv
end

## ----------------------------------------------------------

def genOSVExtra
   # ---------------------
   # if @isDebugMode == true then
   #   @logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")
   # end
   # ---------------------

   extra_choice   = XO_ORBIT_EXTRA_ALL_RESULTS
   # isDebugMode    = @isDebugMode
   isDebugMode    = false

   if @isDebugMode == true then
      @logger.debug("=> xo_osv_compute_extra(")
      @logger.debug("orbit_id      : #{@orbit_id}")
      @logger.debug("extra_choice  : #{XO_ORBIT_EXTRA_choice_enum.key(extra_choice)}")
      @logger.debug(")")
   end

   result = @cfi.xo_osv_compute_extra(
      @orbit_id,
      extra_choice,
      isDebugMode
   )

   # ---------------------
   # if @isDebugMode == true then
   #   result.each{|item|
   #      @logger.debug(item)
   #   }
   # end
   # ---------------------
   # if @isDebugMode == true then
   #   @logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   # end
   # ---------------------
   return result
end
## ----------------------------------------------------------

## Print command line help
def usage
   fullpathFile = File.expand_path(__FILE__)
   
   value = `#{"head -36 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }  
end
## ----------------------------------------------------------

## ===================================================================
## Start of the main body
main
## End of the main body
## ===================================================================
