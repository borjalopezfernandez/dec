#!/usr/bin/env ruby

#########################################################################
###
### === Wrapper for Ruby to EXPLORER EO CFI by DEIMOS Space S.L.U.      
###
### === Written by Borja Lopez Fernandez
### 
###
#########################################################################

require 'test/unit'

require 'cuc/Converters'
require 'cuc/Log4rLoggerFactory'

require 'eocfi/EOCFI_Loader_Wrapper_Earth_Explorer'
require 'eocfi/EOCFI_Environment'
require 'eocfi/EOCFI_Constants'

## 1 - test_xo_check_library_version
## 2 - test_xd_read_station_id
## 3 - test_xd_read_station
## 3.1 - test_xd_read_station_naos
## 4 - test_xd_read_station_file
## 5 - test_xl_time_ref_init_file
## 6 - test_xo_orbit_init_file
## 6.1 - test_xo_orbit_init_file_naos
## 2 - test_xo_time_to_orbit
## 3 - test_xo_position_on_orbit_to_time
## 7 - test_xv_stationvistime_compute

class TestCase_Wrapper_EOCFI < Test::Unit::TestCase

   include CUC::Converters
   include EOCFI

   # Order of the test cases execution according to definition within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   
   ## ------------------------------------------------------
   
   Test::Unit.at_start do      
      puts
      puts "======================================"
      puts "EOCFI #{File.basename(__FILE__)} Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end

      @@conf = EOCFI_Environment.new
      @@conf.wrapper_load_config
      @@conf.wrapper_print_environment

      # ------------------------------------------
      # initialize logger
      
      loggerFactory = CUC::Log4rLoggerFactory.new("#{File.basename(__FILE__)}", "#{ENV['MPL_CONFIG']}/eocfi_log_config.xml")

      @@logger = loggerFactory.getLogger
      
      if @@logger == nil then
         puts
		   puts "Error in #{File.basename(__FILE__)}"
		   puts "Could not set up logging system !  :-("
         puts "Check EOCFI logs configuration under \"#{ENV['MPL_CONFIG']}/eocfi_log_config.xml\"" 
		   puts
		   puts
		   exit(99)
      end
      # ------------------------------------------

      @@logger.debug("#{EOCFI.class_variable_get(:@@version)}")
      
      hRecord = EOCFI.class_variable_get(:@@change_record)
      hRecord.each_pair{|key, value|
         @@logger.debug("#{key} => #{value}")
      }      

      $stderr.reopen(File.new("/tmp/eocfi_stderr", 'w'))

      @@testObject = EOCFI::Earth_Explorer_CFI.new

      @@logger.debug("End of #{File.basename(__FILE__)}::#{__method__.to_s}")
       
   end

   ## ------------------------------------------------------
   
   Test::Unit.at_exit do
      @@logger.debug("End of #{File.basename(__FILE__)} Unit Test Cases")
   end
   
   ## ------------------------------------------------------

   ## Setup before every test-case
   ##
   def setup
      @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")
      cmd = "rm -f /tmp/eocfi_stderr"
      @@logger.debug(cmd)
      system(cmd)
   end
   ## ------------------------------------------------------

   ## --------------------------------------------------------
   ## After every test case

   def teardown
      @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")
   end
   ## ------------------------------------------------------

   ## Test to print out the library version

   def test_xo_check_library_version   
      @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")
      isDebugMode = false
      val         = @@testObject.xo_check_library_version(isDebugMode)
      @@logger.debug(val)
   end
   ## ------------------------------------------------------

  
   ## ------------------------------------------------------

   ## Read Station File

   def test_xd_read_station_id
      @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s} START")   

      statDB         = "#{File.dirname(File.expand_path(__FILE__))}/data/S2__OPER_MPL_GND_DB"
      @@logger.debug(statDB)
      arrStationID   = @@testObject.xd_read_station_id(statDB, false)
      arrStationID.each{|stationCode|
         @@logger.debug(stationCode)
      }
      @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s} END")
   end
   ## ------------------------------------------------------

   ## Read Station File

   def test_xd_read_station
         
      @@logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")   

      statDB         = "#{File.dirname(File.expand_path(__FILE__))}/data/S2__OPER_MPL_GND_DB"
      stationInfo    = @@testObject.xd_read_station(statDB, "GMASPABX", true)
      
      @@logger.debug(stationInfo.mission_name)
      @@logger.debug(stationInfo.antenna)
      @@logger.debug(stationInfo.purpose)
      @@logger.debug(stationInfo.descriptor)
      @@logger.debug(stationInfo.type)
      @@logger.debug(stationInfo.station_alt)
      @@logger.debug(stationInfo.station_lat)
      @@logger.debug(stationInfo.station_long)
      
      @@logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
      
   end

   ## ------------------------------------------------------
   ## Read Station File NAOS mission

   def test_xd_read_station_naos
      @@logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s} NS1_OPER_MPL_GND_DB")   
      statDB         = "#{File.dirname(File.expand_path(__FILE__))}/data/NS1_OPER_MPL_GND_DB"
      @@logger.debug(statDB)

      arrStationID   = @@testObject.xd_read_station_id(statDB, false)
      arrStationID.each{|stationCode|
         @@logger.debug("xd_read_station(#{stationCode})")
         stationInfo    = @@testObject.xd_read_station(statDB, stationCode, false)
         @@logger.debug("Descriptor - #{stationInfo.descriptor}")
         @@logger.debug("Purpose - #{stationInfo.purpose}")
         @@logger.debug("Antenna - #{stationInfo.antenna}")   
         @@logger.debug("Type - #{stationInfo.type}")
         @@logger.debug("Alt - #{stationInfo.station_alt} m")
         @@logger.debug("Lat - #{stationInfo.station_lat} N")
         @@logger.debug("Lon - #{stationInfo.station_long} E")
         @@logger.debug("Mission - #{stationInfo.mission_name}")
      }
   
   # not working
   #   
   #   @@logger.debug("Mask type - #{stationInfo.mask_type}")
   #   @@logger.debug("Elevation AOS - #{stationInfo.mis_aos_el}")
   #   @@logger.debug("Elevation LOS - #{stationInfo.mis_los_el}")

      cmd = "cat /tmp/eocfi_stderr"
      @@logger.debug(cmd)
      system(cmd)
   
      @@logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   
   end
   ## ------------------------------------------------------

   ## Read Station File

   def test_xd_read_station_file
      @@logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")   

      statDB               = "#{File.dirname(File.expand_path(__FILE__))}/data/S2__OPER_MPL_GND_DB"
      @@logger.debug("station database => #{statDB}")
      file_station_data    = @@testObject.xd_read_station_file(statDB, true)
      puts file_station_data.num_rec
      #puts file_station_data.xd_station_rec.station_id
      #puts file_station_data.station_id
      
      #@@testObject.xd_free_station_file(file_station_data, true)
      
      @@logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   end

   ## ------------------------------------------------------

   ## 

   def test_xv_stationvistime_compute
  
   # require_relative 'ruby_earth_explorer_cfi'
  
      @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")   

      statDB         = "#{File.dirname(File.expand_path(__FILE__))}/data/S2__OPER_MPL_GND_DB"
      roef           = "#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBPRE_20170420T072457_20170430T072457_0001.EOF"
      swath          = "#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_SWTVIS"

      isDebugMode    = false
      arrStationID   = @@testObject.xd_read_station_id(statDB, isDebugMode)

      puts Dir.pwd

      arrStationID.each{|station_id|
       
      outFile  = "/tmp/S2A_OPER_MPL_GNDVIS_#{station_id}.xml"
        
      @@logger.debug("Generating #{outFile} with cfi.xv_stationvistime_compute")
     
      retVal   = @@testObject.xv_stationvistime_compute(
                                   roef, 
                                   swath, 
                                   statDB, 
                                   station_id,
                                   9572,
                                   9573, 
                                   outFile,
                                   isDebugMode
                                   )
      }

   end
   ## ------------------------------------------------------

   ## Test test_xl_time_ref_init_file

   def test_xl_time_ref_init_file
      @@logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")
      
      time_model     = XL_TIMEMOD_OSF
      n_files        = 1
      time_file      = Array.new
      time_file << "#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBSCT_20150625T073255_99999999T999999_0006.EOF"
      time_init_mode = XL_SEL_FILE
      time_ref       = XL_TIME_UTC
      time0          = utc_to_mj2000("20230101T000000")
      time1          = utc_to_mj2000("20240101T000000")
      orbit0         = 0
      orbit1         = 99999
      isDebugMode    = true
      strDate        = "20230422T120000"

      @@logger.debug("xl_time_ref_init_file")
      @@logger.debug("time_model       :  #{XL_Time_model_enum.key(time_model)}")
      @@logger.debug("n_files          :  #{n_files}")
      @@logger.debug("time_file        :  #{File.basename(time_file[0])}")
      @@logger.debug("time_init_mode   :  #{XL_Time_init_mode_enum.key(time_init_mode)}")
      @@logger.debug("time_ref         :  #{XL_Time_ref_enum.key(time_ref)}")
      @@logger.debug("time0            :  #{time0}")
      @@logger.debug("time1            :  #{time1}")
      @@logger.debug("orbit0           :  #{orbit0}")
      @@logger.debug("orbit1           :  #{orbit1}")
      @@logger.debug("isDebugMode      :  #{isDebugMode}")

      time_id         = @@testObject.xl_time_ref_init_file(\
                           time_model, \
                           n_files, \
                           time_file, \
                           time_init_mode, \
                           time_ref, \
                           time0, \
                           time1, \
                           orbit0, \
                           orbit1, \
                           strDate, \
                           isDebugMode \
                        )
      @@logger.debug("time_id => #{time_id}")

      # -------------------------------

      ascii_id_in       = XL_ASCII_CCSDSA_COMPACT
      time_ref_in       = XL_TIME_UTC
      ascii_in          = "20230720T120000"
      proc_id_out       = XL_PROC
      time_ref_out      = XL_TIME_UTC
      processing_out    = nil

      @@logger.debug("xl_time_ascii_to_processing")
      @@logger.debug("ascii_id_in      : #{XL_Ascii_enum.key(ascii_id_in)}") 
      @@logger.debug("time_ref_in      : #{XL_Time_ref_enum.key(time_ref_in)}")
      @@logger.debug("ascii_in         : #{ascii_in}")
      @@logger.debug("proc_id_out      : #{XL_Proc_enum.key(XL_PROC)}")
      @@logger.debug("time_ref_out     : #{XL_Time_ref_enum.key(time_ref_out)}")
      @@logger.debug("isDebugMode      : #{isDebugMode}")

      processing_out = @@testObject.xl_time_ascii_to_processing(
                           ascii_id_in,
                           time_ref_in,
                           ascii_in,
                           proc_id_out,
                           time_ref_out,
                           processing_out,
                           isDebugMode
                        ) 
                        
      @@logger.debug("processing_out => #{processing_out}")

      # ---------------------
      @@logger.debug("xl_time_close")
      @@logger.debug("isDebugMode      : #{isDebugMode}")
      status = @@testObject.xl_time_close(isDebugMode)
      # ---------------------

      ascii_id_in       = XL_ASCII_CCSDSA_COMPACT
      time_ref_in       = XL_TIME_UTC
      ascii_in          = "20230722T000000"
      proc_id_out       = XL_PROC
      time_ref_out      = XL_TIME_UTC
      processing_out    = nil

      @@logger.debug("xl_time_ascii_to_processing")
      @@logger.debug("ascii_id_in      : #{XL_Ascii_enum.key(ascii_id_in)}") 
      @@logger.debug("time_ref_in      : #{XL_Time_ref_enum.key(time_ref_in)}")
      @@logger.debug("ascii_in         : #{ascii_in}")
      @@logger.debug("proc_id_out      : #{XL_Proc_enum.key(XL_PROC)}")
      @@logger.debug("time_ref_out     : #{XL_Time_ref_enum.key(time_ref_out)}")
      @@logger.debug("isDebugMode      : #{isDebugMode}")

      processing_out = @@testObject.xl_time_ascii_to_processing(
                           ascii_id_in,
                           time_ref_in,
                           ascii_in,
                           proc_id_out,
                           time_ref_out,
                           processing_out,
                           isDebugMode
                        ) 
                        
      @@logger.debug("processing_out => #{processing_out}")

      @@logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   end

   ## ------------------------------------------------------

   ## Test test_xo_orbit_init_file

   def test_xo_orbit_init_file
      @@logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")

      # ---------------------
      time_model     = XL_TIMEMOD_OSF
      n_files        = 1
      time_file      = Array.new
      time_file << "#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBSCT_20150625T073255_99999999T999999_0006.EOF"
      time_init_mode = XL_SEL_FILE
      time_ref       = XL_TIME_UTC
      time0          = utc_to_mj2000("20230101T000000")
      time1          = utc_to_mj2000("20240101T000000")
      orbit0         = 0
      orbit1         = 99999
      isDebugMode    = true
      strDate        = "20230422T120000"

      @@logger.debug("xl_time_ref_init_file")
      @@logger.debug("time_model       :  #{XL_Time_model_enum.key(time_model)}")
      @@logger.debug("n_files          :  #{n_files}")
      @@logger.debug("time_file        :  #{File.basename(time_file[0])}")
      @@logger.debug("time_init_mode   :  #{XL_Time_init_mode_enum.key(time_init_mode)}")
      @@logger.debug("time_ref         :  #{XL_Time_ref_enum.key(time_ref)}")
      @@logger.debug("time0            :  #{time0}")
      @@logger.debug("time1            :  #{time1}")
      @@logger.debug("orbit0           :  #{orbit0}")
      @@logger.debug("orbit1           :  #{orbit1}")
      @@logger.debug("isDebugMode      :  #{isDebugMode}")

      time_id         = @@testObject.xl_time_ref_init_file(\
                           time_model, \
                           n_files, \
                           time_file, \
                           time_init_mode, \
                           time_ref, \
                           time0, \
                           time1, \
                           orbit0, \
                           orbit1, \
                           strDate, \
                           isDebugMode \
                        )
      @@logger.debug("time_id => #{time_id}")
      # ---------------------

      sat_id      = XO_SAT_SENTINEL_2A
      model_id    = nil
      # time_id     = nil
      orbit_mode  = XO_ORBIT_INIT_AUTO
      n_files     = 1
      input_files = Array.new
      input_files << "#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBSCT_20150625T073255_99999999T999999_0006.EOF"
      time_mode   = XO_SEL_FILE
      time_ref    = XL_TIME_UTC
      time0       = nil
      time1       = nil
      orbit0      = nil
      orbit1      = nil
      isDebugMode = true

      @@logger.debug("xo_orbit_init_file")
      @@logger.debug("sat_id      : #{XO_Sat_id_enum.key(sat_id)}")
      @@logger.debug("model_id    : #{model_id}")
      @@logger.debug("time_id     : #{time_id}")
      @@logger.debug("orbit_mode  : #{XO_Orbit_init_mode.key(orbit_mode)}")
      @@logger.debug("n_files     : #{n_files}")
      @@logger.debug("input_files : #{File.basename(input_files[0])}")
      @@logger.debug("time_mode   : #{XO_Time_init_mode.key(time_mode)}")
      @@logger.debug("time_ref    : #{XL_Time_ref_enum.key(time_ref)}")
      @@logger.debug("time0       : #{time0}")
      @@logger.debug("time1       : #{time1}")
      @@logger.debug("orbit0      : #{orbit0}")
      @@logger.debug("orbit1      : #{orbit1}")
      @@logger.debug("isDebugMode : #{isDebugMode}")

      orbit_id = @@testObject.xo_orbit_init_file(
                     sat_id,
                     model_id,
                     time_id,
                     orbit_mode,
                     n_files,
                     input_files,
                     time_mode,
                     time_ref,
                     time0,
                     time1,
                     orbit0,
                     orbit1,
                     isDebugMode
                  )

      @@logger.debug("orbit_id => #{orbit_id}")

      abs_orbit   = 9000
      isDebugMode = false
      @@logger.debug("xo_orbit_info")
      @@logger.debug("orbit_id    : #{orbit_id}")
      @@logger.debug("abs_orbit   : #{abs_orbit}")
      @@logger.debug("isDebugMode : #{isDebugMode}")

      result = @@testObject.xo_orbit_info(
         orbit_id,
         abs_orbit,
         isDebugMode
      )

      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_REPEAT_CYCLE)}   : #{result[XO_ORBIT_INFO_EXTRA_REPEAT_CYCLE]} #{UNIT_XO_ORBIT_INFO_EXTRA_REPEAT_CYCLE}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_CYCLE_LENGTH)}   : #{result[XO_ORBIT_INFO_EXTRA_CYCLE_LENGTH]} #{UNIT_XO_ORBIT_INFO_EXTRA_CYCLE_LENGTH}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MLST_DRIFT)}     : #{result[XO_ORBIT_INFO_EXTRA_MLST_DRIFT]} #{UNIT_XO_ORBIT_INFO_EXTRA_MLST_DRIFT}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MLST)}           : #{result[XO_ORBIT_INFO_EXTRA_MLST]} #{UNIT_XO_ORBIT_INFO_EXTRA_MLST}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_ANX_LONG)}       : #{result[XO_ORBIT_INFO_EXTRA_ANX_LONG]} #{UNIT_XO_ORBIT_INFO_EXTRA_ANX_LONG}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_UTC_ANX)}        : #{result[XO_ORBIT_INFO_EXTRA_UTC_ANX]} #{UNIT_XO_ORBIT_INFO_EXTRA_UTC_ANX}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_NODAL_PERIOD)}   : #{result[XO_ORBIT_INFO_EXTRA_NODAL_PERIOD]} #{UNIT_XO_ORBIT_INFO_EXTRA_NODAL_PERIOD}")

      cmd = "cat /tmp/eocfi_stderr"
      @@logger.debug(cmd)
      system(cmd)

      @@logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   end



   ## ------------------------------------------------------

   ## ------------------------------------------------------

   ## Test test_xo_orbit_init_file

   def test_xo_orbit_init_file_naos
      @@logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")

      # ---------------------
      time_model     = XL_TIMEMOD_OSF
      n_files        = 1
      time_file      = Array.new
      time_file << "#{File.dirname(File.expand_path(__FILE__))}/data/NS1_OPER_MPL_ORBSCT"
      time_init_mode = XL_SEL_FILE
      time_ref       = XL_TIME_UTC
      time0          = utc_to_mj2000("20230101T000000")
      time1          = utc_to_mj2000("20240101T000000")
      orbit0         = 0
      orbit1         = 99999
      isDebugMode    = true
      strDate        = "20230422T120000"

      @@logger.debug("xl_time_ref_init_file")
      @@logger.debug("time_model       :  #{XL_Time_model_enum.key(time_model)}")
      @@logger.debug("n_files          :  #{n_files}")
      @@logger.debug("time_file        :  #{File.basename(time_file[0])}")
      @@logger.debug("time_init_mode   :  #{XL_Time_init_mode_enum.key(time_init_mode)}")
      @@logger.debug("time_ref         :  #{XL_Time_ref_enum.key(time_ref)}")
      @@logger.debug("time0            :  #{time0}")
      @@logger.debug("time1            :  #{time1}")
      @@logger.debug("orbit0           :  #{orbit0}")
      @@logger.debug("orbit1           :  #{orbit1}")
      @@logger.debug("isDebugMode      :  #{isDebugMode}")

      time_id         = @@testObject.xl_time_ref_init_file(\
                           time_model, \
                           n_files, \
                           time_file, \
                           time_init_mode, \
                           time_ref, \
                           time0, \
                           time1, \
                           orbit0, \
                           orbit1, \
                           strDate, \
                           isDebugMode \
                        )
      @@logger.debug("time_id => #{time_id}")
      # ---------------------

      sat_id      = XO_SAT_GENERIC
      model_id    = nil
      # time_id     = nil
      orbit_mode  = XO_ORBIT_INIT_AUTO
      n_files     = 1
      input_files = Array.new
      input_files << "#{File.dirname(File.expand_path(__FILE__))}/data/NS1_OPER_MPL_ORBSCT"
      time_mode   = XO_SEL_FILE
      time_ref    = XL_TIME_UTC
      time0       = nil
      time1       = nil
      orbit0      = nil
      orbit1      = nil
      isDebugMode = true

      @@logger.debug("xo_orbit_init_file")
      @@logger.debug("sat_id      : #{XO_Sat_id_enum.key(sat_id)}")
      @@logger.debug("model_id    : #{model_id}")
      @@logger.debug("time_id     : #{time_id}")
      @@logger.debug("orbit_mode  : #{XO_Orbit_init_mode.key(orbit_mode)}")
      @@logger.debug("n_files     : #{n_files}")
      @@logger.debug("input_files : #{File.basename(input_files[0])}")
      @@logger.debug("time_mode   : #{XO_Time_init_mode.key(time_mode)}")
      @@logger.debug("time_ref    : #{XL_Time_ref_enum.key(time_ref)}")
      @@logger.debug("time0       : #{time0}")
      @@logger.debug("time1       : #{time1}")
      @@logger.debug("orbit0      : #{orbit0}")
      @@logger.debug("orbit1      : #{orbit1}")
      @@logger.debug("isDebugMode : #{isDebugMode}")

      orbit_id = @@testObject.xo_orbit_init_file(
                     sat_id,
                     model_id,
                     time_id,
                     orbit_mode,
                     n_files,
                     input_files,
                     time_mode,
                     time_ref,
                     time0,
                     time1,
                     orbit0,
                     orbit1,
                     isDebugMode
                  )

      @@logger.debug("orbit_id => #{orbit_id}")

      abs_orbit   = 9000
      isDebugMode = false
      @@logger.debug("xo_orbit_info")
      @@logger.debug("orbit_id    : #{orbit_id}")
      @@logger.debug("abs_orbit   : #{abs_orbit}")
      @@logger.debug("isDebugMode : #{isDebugMode}")

      result = @@testObject.xo_orbit_info(
         orbit_id,
         abs_orbit,
         isDebugMode
      )

      @@logger.debug("orbit cycle")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_REPEAT_CYCLE)}   : #{result[XO_ORBIT_INFO_EXTRA_REPEAT_CYCLE]} #{UNIT_XO_ORBIT_INFO_EXTRA_REPEAT_CYCLE}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_CYCLE_LENGTH)}   : #{result[XO_ORBIT_INFO_EXTRA_CYCLE_LENGTH]} #{UNIT_XO_ORBIT_INFO_EXTRA_CYCLE_LENGTH}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MLST_DRIFT)}     : #{result[XO_ORBIT_INFO_EXTRA_MLST_DRIFT]} #{UNIT_XO_ORBIT_INFO_EXTRA_MLST_DRIFT}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MLST)}           : #{result[XO_ORBIT_INFO_EXTRA_MLST]} #{UNIT_XO_ORBIT_INFO_EXTRA_MLST}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_ANX_LONG)}       : #{result[XO_ORBIT_INFO_EXTRA_ANX_LONG]} #{UNIT_XO_ORBIT_INFO_EXTRA_ANX_LONG}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_UTC_ANX)}        : #{result[XO_ORBIT_INFO_EXTRA_UTC_ANX]} #{UNIT_XO_ORBIT_INFO_EXTRA_UTC_ANX}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_NODAL_PERIOD)}   : #{result[XO_ORBIT_INFO_EXTRA_NODAL_PERIOD]} #{UNIT_XO_ORBIT_INFO_EXTRA_NODAL_PERIOD}")
      @@logger.debug("mean keplerian elements")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_A)}   : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_A]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_A}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_E)}   : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_E]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_E}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_I)}   : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_I]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_I}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_RA)}  : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_RA]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_RA}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_W)}   : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_W]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_W}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_MEAN_KEPL_M)}   : #{result[XO_ORBIT_INFO_EXTRA_MEAN_KEPL_M]} #{UNIT_XO_ORBIT_INFO_EXTRA_MEAN_KEPL_M}")
      @@logger.debug("osculating keplerian elements")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_A)}   : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_A]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_A}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_E)}   : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_E]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_E}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_I)}   : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_I]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_I}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_RA)}  : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_RA]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_RA}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_W)}   : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_W]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_W}")
      @@logger.debug("#{XO_ORBIT_INFO_EXTRA_enum.key(XO_ORBIT_INFO_EXTRA_OSC_KEPL_M)}   : #{result[XO_ORBIT_INFO_EXTRA_OSC_KEPL_M]} #{UNIT_XO_ORBIT_INFO_EXTRA_OSC_KEPL_M}")



      cmd = "cat /tmp/eocfi_stderr"
      @@logger.debug(cmd)
      system(cmd)

      @@logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   end

   ## ------------------------------------------------------

   ## Test to compute the date-time

   def test_xo_time_to_orbit
      @@logger.debug("BEGIN #{File.basename(__FILE__)}::#{__method__.to_s}")
   
      isDebugMode = false
      strDate     = "20170422T120000"
      val         = @@testObject.xo_time_to_orbit(\
                        "#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBSCT_20150625T073255_99999999T999999_0006.EOF", \
                        strDate, \
                        isDebugMode \
                        )
      @@logger.debug("Date => #{strDate} Orbit => #{val}")

      assert(val != -1, "Orbit Absolute obtained from date")
         
      ## error management for orbit ephemeris file not found
   
      val   = @@testObject.xo_time_to_orbit(\
                        "wrong_path/S2A_OPER_MPL_ORBSCT_20150625T073255_99999999T999999_0006.EOF", \
                        strDate, \
                        isDebugMode \
                        )   
      assert(val == -1, "Orbit Absolute failed due to wrong path to ROF")
      @@logger.debug("END #{File.basename(__FILE__)}::#{__method__.to_s}")
   end
   ## ------------------------------------------------------


  ## Orbit and Angle to Time

    def test_xo_position_on_orbit_to_time
    
       # require_relative 'ruby_earth_explorer_cfi'
 
       @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")   
       
       lOrbit      = 9572
       fAngleAnx   = 78.1299
       strROF      = "Predicted"
       isDebugMode = false
 
       val = @@testObject.xo_position_on_orbit_to_time("#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBPRE_20170420T072457_20170430T072457_0001.EOF", lOrbit, fAngleAnx, isDebugMode)
 
       @@logger.debug("PositionInOrbit (#{strROF}): Orbit => #{lOrbit} / Angle ANX => #{fAngleAnx} => #{val}")
 
       puts val
       puts self.str2date(val).to_time.usec
 
       timePRE = self.str2date(val).to_time
 
       lOrbit      = 9572
       fAngleAnx   = 78.1299
       strROF      = "Reference"
 
       val = @@testObject.xo_position_on_orbit_to_time("#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBSCT_20150625T073255_99999999T999999_0006.EOF", lOrbit, fAngleAnx, isDebugMode)
 
       @@logger.debug("PositionInOrbit (#{strROF}): Orbit => #{lOrbit} / Angle ANX => #{fAngleAnx} => #{val}")
    
       assert(val != -1, "Orbit Angle converted to ANX Time")
             
       @@logger.debug(self.str2date(val).to_time.usec)
       timeOSF = self.str2date(val).to_time
 
       @@logger.debug("Difference between OSF and PRE #{(timeOSF - timePRE)} seconds")
 
       ## error management for orbit ephemeris file not found 
 
       val = @@testObject.xo_position_on_orbit_to_time("wrong_path/S2A_OPER_MPL_ORBSCT_20150625T073255_99999999T999999_0006.EOF", lOrbit, fAngleAnx, isDebugMode)
       assert(val == -1, "Orbit Angle to ANX failed due to wrong path to ROF")
   
       return
    end
    ## ------------------------------------------------------

   
end


