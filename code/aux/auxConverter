#!/usr/bin/env ruby
#
# == Usage
# decManageDB --create-tables | --drop-tables
#     --create-tables   create all minarc required tables
#     --drop-tables     drops all minarc tables
#     --rpf             selector to include reference planning tables
#     --Debug           shows Debug info during the execution
#     --help            shows this help
# 
#

#########################################################################
#
# Ruby source for #ROPSender class
#
# Written by DEIMOS Space S.L. (bolf)
#
# Data Exchange Component -> 
# 
# git:
#   decManageDB.rb,v $Date$ $Id$ 
#
#########################################################################

require 'rubygems'
require 'getoptlong'
require 'active_record'

require 'dec/DEC_Migrations'
require 'dec/DEC_Environment'


@isDebugMode = false

dbAdapter   = ENV['DEC_DB_ADAPTER']
dbName      = ENV['DEC_DATABASE_NAME']
dbUser      = ENV['DEC_DATABASE_USER']
dbPass      = ENV['DEC_DATABASE_PASSWORD']


#begin
#   ActiveRecord::Base.establish_connection(
#                                          :adapter => dbAdapter, \
#                                          :host => "localhost",  \
#                                          :database => dbName,   \
#                                          :username => dbUser, \
#                                          :password => dbPass, \
#                                          :timeout  => 60000
#                                        )
#rescue Exception => e
#   puts e.to_s
#   puts
#   puts e.backtrace
#   puts
#end


# MAIN script function
def main

   include DEC

   bUp            = false
   bDown          = false
   @bCreateDB     = false
   @bUpdate       = false
   @bUsage        = false
   @bShowVersion  = false
   @bRPF          = false
   
   opts = GetoptLong.new(
     ["--drop-tables",   "-d",      GetoptLong::NO_ARGUMENT],
     ["--create-tables", "-c",      GetoptLong::NO_ARGUMENT],
     ["--Create-Database", "-C",    GetoptLong::NO_ARGUMENT],     
     ["--update-tables", "-u",      GetoptLong::NO_ARGUMENT],
     ["--rpf", "-r",                GetoptLong::NO_ARGUMENT],
     ["--Debug", "-D",              GetoptLong::NO_ARGUMENT],
     ["--version", "-v",            GetoptLong::NO_ARGUMENT],
     ["--help", "-h",               GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt
            when "--Debug"             then @isDebugMode    = true
            when "--Create-Database"   then @bCreateDB      = true  
            when "--create-tables"     then @bUp            = true
            when "--drop-tables"       then @bDown          = true
            when "--rpf"               then @bRPF           = true
            when "--version"           then @bShowVersion   = true
            when "--update-tables"     then @bUpdate        = true
			   when "--help"              then @bUsage         = true
         end
      end
   rescue Exception => e
      puts e.to_s
      exit(99)
   end

   if @bShowVersion == true then
      print("\nESA - DEIMOS-Space S.L. ", File.basename($0), " Version: [#{DEC.class_variable_get(:@@version)}]", "\n\n")
      hRecord = DEC.class_variable_get(:@@change_record)
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }      
      exit(0)
   end
   
   if @bUsage then
      usage
      exit(0)
   end
   
#   if @bCreateDB == true then
#      puts "Creating database ..."
#      createDatabase
#      exit(0)
#   end
      
   if !@bDown and !@bUp and !@bCreateDB then
      usage
      exit(99)
   end

   if @bDown and @bUp then
      usage
      exit(99)
   end

   ret = checkEnvironmentEssential

   if ret == true then
      ret = checkEnvironmentDB
   else
      checkEnvironmentDB
      exit(99)
   end

   if ret == false then
      exit(99)
   end

   require 'dec/DEC_DatabaseModel'

   dbAdapter   = ENV['DEC_DB_ADAPTER']
   dbName      = ENV['DEC_DATABASE_NAME']
   dbUser      = ENV['DEC_DATABASE_USER']
   dbPass      = ENV['DEC_DATABASE_PASSWORD']

   if @isDebugMode == true then
      puts "----------------"
      puts dbAdapter
      puts dbName
      puts dbUser
      puts dbPass
      puts "----------------"
   end

   if @bUpdate then

      if ActiveRecord::Base.connection.index_exists?(:received_files, :filename) == false
         migration = AddIndexFilename2ReceivedFiles.new
         migration.change
      else
         puts "Index on filename for received_files already exists :-)"
      end

      if ActiveRecord::Base.connection.index_exists?(:tracked_files, :filename) == false
         migration = AddIndexFilename2TrackedFiles.new
         migration.change
      else
         puts "Index on filename for tracked_files already exists :-)"
      end

      if ActiveRecord::Base.connection.index_exists?(:sent_files, :filename) == false
         migration = AddIndexFilename2SentFiles.new
         migration.change
      else
         puts "Index on filename for sent_files already exists :-)"
      end
   
      exit(0)
   
      migration = Add_ROP_ID_ToSentFiles.new
      migration.change
      exit(0)
      
      migration = AddSizeToReceivedFiles.new
      migration = AddProtocolToReceivedFiles.new
      migration.change
      exit(0)
   end

   if @bDown then
      if ReceivedFile.table_exists?() == true then
         CreateReceivedFiles.down
      end
      
      if TrackedFile.table_exists?() == true then
         CreateTrackedFiles.down
      end
      
      if SentFile.table_exists?() == true then
         CreateSentFiles.down
      end
      
      if Interface.table_exists?() == true then
         CreateInterfaces.down
      end
      
      if @bRPF == true
         if InventoryFile.table_exists?() == true then
            CreateInventoryFile.down
         end

         if InventoryROP.table_exists?() == true then
            CreateInventoryROP.down
         end

         if InventoryROPFile.table_exists?() == true then
            CreateInventoryROPFile.down
         end
          
         if InventoryParams.table_exists?() == true then
            CreateInventoryParams.down
         end
         
         if InventoryROPFileView.table_exists?() == true then
            CreateInventoryROPFileView.down
         end         
         
      end
      
      exit(0)
      
   end

   if @bUp then
      if Interface.table_exists?() == false then
         CreateInterfaces.up
      end
      
      if TrackedFile.table_exists?() == false then
         CreateTrackedFiles.up
      end
      
      if ReceivedFile.table_exists?() == false then
         CreateReceivedFiles.up
      end
      
      if SentFile.table_exists?() == false then
         CreateSentFiles.up
      end
      
      if @bRPF == true
      
         require 'rpf/RPF_Migrations'
      
         if InventoryFile.table_exists?() == false then
            CreateInventoryFile.up
         end

         if InventoryROP.table_exists?() == false then
            CreateInventoryROP.up
         end

         if InventoryROPFile.table_exists?() == false then
            CreateInventoryROPFile.up
         end

         if InventoryParams.table_exists?() == false then
            CreateInventoryParams.up
         end

         if InventoryROPFileView.table_exists?() == false then
            CreateInventoryROPFileView.up
         end
         
         migration = Add_ROP_ID_ToSentFiles.new
         migration.change


      end      
      
      exit(0)
      
   end

   usage
 
   exit(0)

end

# -------------------------------------------------------------

# Print command line help
def usage
   fullpathFile = File.expand_path(__FILE__)    
   
   value = `#{"head -12 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end
# -------------------------------------------------------------

def createDatabase
   dbAdapter   = ENV['DEC_DB_ADAPTER']
   dbName      = ENV['DEC_DATABASE_NAME']
   dbUser      = ENV['DEC_DATABASE_USER']
   dbPass      = ENV['DEC_DATABASE_PASSWORD']

   db_config = {
	   host: 'localhost',
	   adapter: 'postgresql',
	   encoding: 'utf-8',
	   database: dbName,
	   schema_search_path: 'public',
      timeout: 60000
   }

   db_config = db_config.merge({username: dbUser, password: dbPass})

   ActiveRecord::Base.establish_connection(db_config)
   
   ActiveRecord::Base.connection.create_database(db_config[:database])
   
end
# -------------------------------------------------------------

## ===================================================================
# Start of the main body
main
# End of the main body
##====================================================================
