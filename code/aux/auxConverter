#!/usr/bin/env ruby
#
# == Synopsis
#
# This is a Data Exchange Component (DEC) command line tool that manages the
# file conversions / harmonisation according to every mission standard and 
# mission service providers such as ground stations.
#
# This tool can be used manually from the command line or included in the DEC
# configuration as part of any pull or push workflow.
# 
# For reference to the current file formant conversions and the auxiliary data
# files supported, please execute the tool with the --version flag.
#
# == Usage
# auxConverter -m S3 -f <full_path_file> -d <dir>
#     --mission <id>    mission identifier
#       POD    - Copernicus Precise Orbit Determination
#       S2     - Copernicus Sentinel-2
#       S3     - Copernicus Sentinel-3
#       NAOS   - NAOS mission
#       KSAT   - Kongsberg Satellite Services
#     --version         shows the version number / supported conversions
#     --Debug           shows Debug info during the execution
#     --help            shows this help
# 
# == Author
# Elecnor Deimos-Space
#
# == Copyright
# Copyright (c) 2021 Elecnor Deimos-Space
#
#########################################################################
#
# Ruby source for #auxConverter
#
# Written by DEIMOS Space S.L.
#
# Data Exchange Component -> 
# 
# git:
#   auxConverter,v $Date$ $Id$ 
#
#########################################################################

require 'rubygems'
require 'getoptlong'

require 'cuc/Log4rLoggerFactory'
require 'dec/DEC_Environment'
require 'aux/AUX_Environment'
require 'aux/AUX_Handler'


# MAIN script function
def main

   include AUX
   include DEC

   @bUsage           = false
   @isDebugMode      = false
   @bShowVersion     = false
   @full_path_file   = ""
   @targetDir        = ""
   @mission          = ""
      
   opts = GetoptLong.new(
     ["--file", "-f",               GetoptLong::REQUIRED_ARGUMENT],
     ["--dir", "-d",                GetoptLong::REQUIRED_ARGUMENT],
     ["--mission", "-m",            GetoptLong::REQUIRED_ARGUMENT],
     ["--Debug", "-D",              GetoptLong::NO_ARGUMENT],
     ["--version", "-v",            GetoptLong::NO_ARGUMENT],
     ["--help", "-h",               GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt
            when "--file"              then @full_path_file = arg.to_s
            when "--dir"               then @targetDir      = arg.to_s
            when "--Debug"             then @isDebugMode    = true
            when "--mission"           then @mission        = arg.to_s
            when "--version"           then @bShowVersion   = true
			   when "--help"              then @bUsage         = true
         end
      end
   rescue Exception => e
      puts e.to_s
      exit(99)
   end

   if @bShowVersion == true then
      print("\nElecnor Deimos-Space ", File.basename($0), " Version: [#{AUX::VERSION}]", "\n\n")
      hRecord = AUX::CHANGE_RECORD
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }      
      exit(0)
   end
   
   if @bUsage == true then
      usage
      exit(0)
   end
   
   if @mission == "" then
      usage
      exit(66)
   end

   if @full_path_file == "" then
      usage
      exit(66)
   end

   ## ----------------------------------

   self.load_config
   
   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(66)
   end   

   ## ----------------------------------
   ## initialize logger
   loggerFactory = CUC::Log4rLoggerFactory.new("auxc", "#{ENV['DEC_CONFIG']}/dec_log_config.xml")
   
   @logger = loggerFactory.getLogger   
   if @logger == nil then
      puts
		puts "Error in #{File.basename(__FILE__)}"
     	puts "Could not initialize logging system !  :-("
      puts "Check DEC logs configuration under \"#{ENV['DEC_CONFIG']}/dec_log_config.xml\"" 
 	   puts
   	exit(99)
   end
   ## ----------------------------------

   if File.exist?(@full_path_file) == false and Dir.exist?(@full_path_file) then
      @logger.error("[AUX_600] cannot access to #{@full_path_file}")
      exit(99)
   end
   ## ----------------------------------

   begin
      handler = AUX_Handler.new(@full_path_file, @mission, @targetDir, @logger, @isDebugMode)   
      newName = handler.convert
   rescue Exception => e
      if @isDebugMode == true then
         @logger.debug(e.backtrace)
      end
      @logger.error("[AUX_666] SW Problem #{e.to_s}")
      exit(99)
   end
   exit(0)

end

# -------------------------------------------------------------

# Print command line help
def usage
   fullpathFile = File.expand_path(__FILE__)    
   
   value = `#{"head -32 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end
# -------------------------------------------------------------



## ===================================================================
## Start of the main body
main
## End of the main body
##====================================================================
