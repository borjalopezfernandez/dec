#!/usr/bin/env ruby

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'cuc/Log4rLoggerFactory'
require 'ctc/FTPClientCommands'

require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'
require 'dec/ReadInterfaceConfig'
require 'dec/ReadConfigOutgoing'
require 'dec/ReadConfigIncoming'

# Preconditions:
# 1 - setup 
# 1.1 - load_config_development
# 1.2 - inventory database is created

# 2 - teardown
# 2.1 - purge archive
# 2.2 - inventory database is destroyed

#  1  - test_decConfigInterface2DB
#  2  - test_decGetFromInterface
#  3  - test_decListener


# Select a single test of the suite

# ruby decUnitTests -n test_my_method 

# Start FTP Server in MacOS Sierra
# launchctl load -w /System/Library/LaunchDaemons/ftp.plist

# Stop FTP Server
# launchctl unload -w /System/Library/LaunchDaemons/ftp.plist

class DECTestCaseILRS < Test::Unit::TestCase

   include CUC::DirUtils
   include CTC::FTPClientCommands
   include DEC

   
   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   
   ## ------------------------------------------------------
   
   Test::Unit.at_start do      
      puts
      puts "======================================"
      puts "DEC Interface Test Cases for ILRS"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
      
            @@arrDownloadFiles = [ \
                           "finals.all", \
                           "gpsrapid.out" \
                           ]

      
=begin
      puts
      puts
      puts "THINK IT TWICE  !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      
      if c != 'Y' then
         exit(99)
      end

=end      
      
      @@conf = DEC_Environment.new
      
      @@conf.wrapper_load_config
  
      @@conf.wrapper_print_environment

      @@conf.createEnvironmentDirs


      if @@conf.wrapper_check_environment == false then
         puts "DEC environment not suited for unit tests"
         puts
         exit(99)
      end

      # initialize logger
      loggerFactory = CUC::Log4rLoggerFactory.new("test", "#{ENV['DEC_CONFIG']}/dec_log_config.xml")
      if @isDebugMode then
         loggerFactory.setDebugMode
      end
      @@logger = loggerFactory.getLogger

      if @@logger == nil then
         puts
         puts "Error in decUnitTests::main"
         puts "Could not set up logging system !  :-("
         puts "Check DEC logs configuration under \"#{ENV['DEC_CONFIG']}/dec_log_config.xml\"" 
         puts
         puts
         exit(99)
      end
      
      
   end
   
   ## ------------------------------------------------------
   
   Test::Unit.at_exit do
      puts "End of DEC test for IERS interface"
   end
   
   ## ------------------------------------------------------
   
   ## Setup before every test-case
   ##
   def setup
      puts __method__.to_s
      puts
      puts "================================================"
      puts "#{File.basename(__FILE__)}::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development
            
      decConfig   = DEC::ReadConfigDEC.instance
      reportDir   = decConfig.getReportDir

      system("\\rm -rf #{reportDir}")
      system("\\rm -rf /tmp/dec*")
      system("\\rm -rf /tmp/DEC*.log")

      ftConfig    = ReadInterfaceConfig.instance
      configOut   = ReadConfigOutgoing.instance
      configIn    = ReadConfigIncoming.instance
      arrEnts     = ftConfig.getAllMnemonics

      @entityConfig     = ReadInterfaceConfig.instance
      conf              = ReadConfigIncoming.instance
      @finalDir         = conf.getIncomingDir("ILRS")
      checkDirectory(@finalDir)
      
      cmd = "decManageDB -c"
      ret = system(cmd)
      
      if ret == false then
         puts
         puts "Error when creating the DEC inventory ! :-("
         puts
         # exit(99)
      end
      
      cmd = "decConfigInterface2DB -p EXTERNAL"
      
      ret = system(cmd)
      
      if ret == false then
         puts
         puts "Error when adding interface configuration to the database ! :-("
         puts
         # exit(99)
      end

      if self.checkEnvironmentEssential == false then
         self.printEnvironmentError
         exit(99)
      end
      
   end
   ## --------------------------------------------------------
   ## After every test case

   def teardown
      puts
      puts "================================================"
      puts "#{File.basename(__FILE__)}::#{__method__.to_s}"
      puts

      @@conf.wrapper_load_config_development

      cmd = "decManageDB -d"
      puts cmd
      ret = system(cmd)
       
      if ret == false then
         puts "Error when dropping the dec inventory ! :-("
         puts
         exit(99)
      end
   end
   ## ------------------------------------------------------

   ## ------------------------------------------------------

   def test_ILRS_S3
      
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decGetFromInterface -m ILRS -l"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      sleep(2.0)

      cmd = "decGetFromInterface -m ILRS"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end
   ## ------------------------------------------------------

end

## ===================================================================




