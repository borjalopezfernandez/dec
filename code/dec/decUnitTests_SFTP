#!/usr/bin/env ruby

#########################################################################
###
### === Ruby source for #decUnitTests_SFTP class
###
### === Written by DEIMOS Space S.L.
###
### === Data Exchange Component
###
### # git: decUnitTests_SFTP,v $Id$: 
### 
### module DEC
###
#########################################################################

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'cuc/Log4rLoggerFactory'

require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'

## rake -f build_dec.rake dec:install[borja,localhost,s2_test_pg]


class DECTestCase_SFTP < Test::Unit::TestCase

   include Test::Unit::Data
   
   include CUC::DirUtils
   
   include DEC
         
   # Order of the test cases execution according to definition within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   # --------------------------------------------------------
   
   Test::Unit.at_start do
      system("clear")
      puts
      puts "======================================"
      puts "DEC #{File.basename(__FILE__)} Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
   
   
      @@arrDownloadFiles = [ \
                           "finals.all", \
                           "tai-utc.dat" \
                           ]

      @@conf = DEC_Environment.new

      @@conf.wrapper_load_config

      @decConfigDir = ENV['DEC_CONFIG']
 
      ## ----------------------------------
      ## initialize logger
      loggerFactory = CUC::Log4rLoggerFactory.new("DECTEST", "#{@decConfigDir}/dec_log_config.xml")
   
      @@logger = loggerFactory.getLogger   
      if @@logger == nil then
         puts
		   puts "Error in #{File.basename(__FILE__)}"
     	   puts "Could not initialize logging system !  :-("
         puts "Check DEC logs configuration under \"#{@decConfigDir}/orchestrator_log_config.xml\"" 
 	      puts
   	   exit(99)
      end

      ## ----------------------------------
      @@conf.wrapper_unset_config
   
   end
   
   ## --------------------------------------------------------
   
   Test::Unit.at_exit do
      @@logger.info("End of DEC tests #{File.basename(__FILE__)}")
   end
   ## --------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s} START")
      cmd = "mkdir -p /tmp/tmp/dir1"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "mkdir -p /tmp/tmp/dir2"
      @@logger.debug(cmd)
      system(cmd)
      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s} START")
   end
   ## ------------------------------------------------------
   ## After every test case

   def teardown
      return
   end
   ## ------------------------------------------------------
   
   ## ------------------------------------------------------
   
   ##
   
   ## PULL Circulations
   def test_pull
      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s} START")

      checkDirectory("/tmp/dec/in_basket_if_localhost_secure")
      checkDirectory("/tmp/dec_simul_if/localhost_secure/download")
      checkDirectory("/tmp/dec_simul_if/localhost_secure/upload/_TEMP_")

      cmd = "\\rm -rf /tmp/dec/in_basket_if_localhost_secure/*"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "rm -f /tmp/DEC*.log"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "decManageDB -d"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decManageDB -c"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)   
   
      cmd = "decCheckConfig -e LOCALHOST_SECURE"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      ## -----------------------------------------
      ## list mode and subsequent download
      
      system("echo \'my touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile1.txt")
      system("echo \'another touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile2.txt")
      system("echo \'another brick in the touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile3.txt")
      system("echo \'another brick in the touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile4.txt")
            
      cmd = "decGetFromInterface -m LOCALHOST_SECURE -l -D"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      cmd = "decGetFromInterface -m LOCALHOST_SECURE -D"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      arrFiles = Dir["/tmp/dec/in_basket_if_localhost_secure/touch*"]      
      assert(arrFiles.length == 4, "Number of files pulled")
      
      ## -----------------------------------------

      
      ## -----------------------------------------
      ## Download again since --nodb is used to avoid filtering by previous download
          
      system("\\rm -rf /tmp/dec/in_basket_if_localhost_secure/*")
      
      system("echo \'my touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile1.txt")
      system("echo \'another touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile2.txt")
      system("echo \'another brick in the touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile3.txt")
      system("echo \'another brick in the touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile4.txt")
   
            
      cmd = "decGetFromInterface -m LOCALHOST_SECURE --nodb"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
 
      arrFiles = Dir["/tmp/dec/in_basket_if_localhost_secure/touch*"] 
      assert(arrFiles.length == 4, "Number of files pulled")

      ## -----------------------------------------
      ## Now no files should be present for download

      system("\\rm -rf /tmp/dec/in_basket_if_LOCALHOST_SECURE/*")
      
      cmd = "decGetFromInterface -m LOCALHOST_SECURE"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
            
      arrFiles = Dir["/tmp/dec/in_basket_if_LOCALHOST_SECURE/touch*"]      
      assert(arrFiles.length == 0, "Number of files pulled")

      ## -----------------------------------------

      cmd = "decStats -H 1"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      
      ## -----------------------------------------
      
      arr = Dir["/tmp/DEC*.log"]

      ## Management of duplicated files from the interface

      @@logger.info("TEST: Management of duplicated files from the interface")

      cmd = "\\rm -rf /tmp/dec/in_basket_if_localhost_secure/*"
      @@logger.debug(cmd)
      system(cmd)

      system("\\rm -rf /tmp/dec_simul_if/localhost_secure/download/*")
      
      system("echo \'my touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile1.txt")
      system("echo \'another touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile2.txt")
      system("echo \'another brick in the touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile3.txt")
      system("echo \'another brick in the touch file\' > /tmp/dec_simul_if/localhost_secure/download/touchfile4.txt")
           
      cmd = "decGetFromInterface -m LOCALHOST_SECURE -D"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
 
      arrFiles = Dir["/tmp/dec/in_basket_if_LOCALHOST_SECURE/touch*"]      
      assert(arrFiles.length == 0, "Duplicated files should not be pulled")
                      
      cmd = "grep DEC_125 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "Duplications logged in #{__method__.to_s}") 

      ## -----------------------------------------
      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s} END")
   end
   ## ------------------------------------------------------

   ## ------------------------------------------------------
   
   ## PUSH Circulations
   def test_push
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "rm -f /tmp/DEC*.log"
      puts cmd
      system(cmd)

      checkDirectory("/tmp/dec/in_basket_if_LOCALHOST_SECURE")
      
      system("\\rm -rf /tmp/dec/in_basket_if_LOCALHOST_SECURE/*")

      cmd = "rm -f /tmp/tmp/dir1/finals.all"
      puts cmd
      system(cmd)

      cmd = "rm -f /tmp/tmp/dir1/tai-utc.dat"
      puts cmd
      system(cmd)


      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      puts cmd
      assert(system(cmd), cmd)   
   
      cmd = "decCheckConfig -e LOCALHOST_SECURE"
      puts cmd
      assert(system(cmd), cmd)
      
      checkDirectory("/tmp/dec_delivery_root/GIP_PROBA2")
      
      sourceDir = DEC::ReadConfigDEC.instance.getSourceDir
      
      checkDirectory(sourceDir)
      puts "SOURCE DIR => #{sourceDir}"

      ## for FTP protocol the same files for download are used
      
      @@arrDownloadFiles.each{|filename|
         puts filename
         system("echo \'#{filename}\' > #{sourceDir}/#{filename}")
      }

      cmd = "decGetFiles4Transfer"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decSend2Interface --mnemonic LOCALHOST_SECURE -O"
      puts cmd
      assert(system(cmd), cmd)

#      cmd = "decDeliverFiles -D"
#      puts cmd
#      assert(system(cmd), cmd)

      cmd = "decListDirUpload -m LOCALHOST_SECURE -t"
      puts cmd
      assert(system(cmd), cmd)
      puts      

      cmd = "decStats"
      assert(system(cmd), cmd)
      
   end
   ## ------------------------------------------------------



end

### ==================================================================
