#!/usr/bin/env ruby

## Interface: PARALLEL_HTTP

## rake -f build_dec.rake dec:install[borja,localhost]

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'cuc/Log4rLoggerFactory'

require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'
require 'dec/ReadConfigIncoming'
require 'dec/ReadConfigOutgoing'

class DECTestCase_HTTP < Test::Unit::TestCase

   include Test::Unit::Data
   
   include CUC::DirUtils
   
   include DEC
         
   # Order of the test cases execution according to definition within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   # --------------------------------------------------------
   
   Test::Unit.at_start do
      system("clear")
      puts
      puts "======================================"
      puts "DEC HTTP Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
   
   
      @@arrDownloadFiles = [ \
                           "finals.all", \
                           "tai-utc.dat" \
                           ]

      @@conf = DEC_Environment.new

      @@conf.wrapper_load_config

      @decConfigDir = ENV['DEC_CONFIG']
 
      ## ----------------------------------
      ## initialize logger
      loggerFactory = CUC::Log4rLoggerFactory.new("DECTEST", "#{@decConfigDir}/dec_log_config.xml")
   
      @@logger = loggerFactory.getLogger   
      if @@logger == nil then
         puts
		   puts "Error in decUnitTests_LOCAL"
     	   puts "Could not initialize logging system !  :-("
         puts "Check DEC logs configuration under \"#{@decConfigDir}/dec_log_config.xml\"" 
 	      puts
   	   exit(99)
      end

      ## ----------------------------------
      @@conf.wrapper_unset_config
   
   end
   
   ## --------------------------------------------------------
   
   Test::Unit.at_exit do
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s}")
   end
   ## --------------------------------------------------------   
   
   ## Setup before every test-case
   ##
   def setup
      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s} START")
      
      @@logger.debug("Defining environment variable used in configuration: DEC_TMP")
      ENV['DEC_TMP'] = '/tmp'

      conf = ReadConfigOutgoing.instance

      dir = conf.getOutgoingDir("WEBDAV2")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      dir = conf.getUploadDir("WEBDAV2")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      dir = conf.getUploadTemp("WEBDAV2")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      ## PARALLEL_HTTP is used for pull operations
      conf = ReadConfigIncoming.instance

      dir = conf.getIncomingDir("PARALLEL_HTTP")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      arr = conf.getDownloadDirs("PARALLEL_HTTP")

      arr.each{|inconfig|
         @@logger.debug("checking #{inconfig[:directory]}")
         checkDirectory(inconfig[:directory])
      }

      cmd = "decManageDB -d"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decManageDB -c"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decConfigInterface2DB -a PARALLEL_HTTP"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decConfigInterface2DB -a WEBDAV2"
      @@logger.debug(cmd)
      ret = system(cmd)

      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s} END")
   
      cmd = "rm -f /tmp/DEC*.log"
      @@logger.debug(cmd)
      system(cmd)

   end
   ## ------------------------------------------------------
   ## After every test case

   def teardown
      return
   end
   ## ------------------------------------------------------
   
   ## ------------------------------------------------------
   
   ##
   
   # data("SEPARATOR",     ["TEST LABEL",     0,   0,   0,    false])
   # data("0",     ["1_files_1GB_1Slots",      1,   1024000,   1,     false])
   # data("1",     ["3_files_1GB_1Slots",      3,   1024000,   1,     false])
   # data("2",     ["3_files_1GB_3Slots",      3,   1024000,   3,     false])
   # data("3",     ["7_files_1GB_5Slots",      7,   1024000,   5,     false])
   data("4",     ["10_files_1GB_5Slots",     10,  1024000,   5,     false])

   ## PULL Circulations
   def test_pull(params)

      label, numFiles, numBlocks, numSlots, noDB = params

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START #{label}")
      
      ## -----------------------------------------
      ## list mode and subsequent download

      conf = ReadConfigIncoming.instance
      arr = conf.getDownloadDirs("PARALLEL_HTTP")
      downloadDir = arr[0][:directory]

      1.upto(numFiles) do |i|
         filename = "test_http_#{i}.bin"
         cmd = "dd if=/dev/urandom of=#{downloadDir}/#{filename} bs=1024 count=#{numBlocks}"
         @@logger.debug(cmd)
         system(cmd)
      end
           
      cmd = "decGetFromInterface -m PARALLEL_HTTP -l"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      cmd = "decGetFromInterface -m PARALLEL_HTTP -P #{numSlots}"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      dir = conf.getIncomingDir("PARALLEL_HTTP")

      arrFiles = Dir["#{dir}/test_http*"]      
      assert(arrFiles.length == numFiles, "Number of files pulled")
      
      cmd = "decStats -H 1"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "rm -f #{dir}/test_http*"
      @@logger.debug(cmd)
      system(cmd)

      ## -----------------------------------------
      
      arr = Dir["/tmp/DEC*.log"]

      cmd = "cp #{arr[0]} /tmp/test_pull_http_#{label}.log"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "grep stats /tmp/test_pull_http*.log"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "grep DEC\_110 /tmp/test_pull_http*.log"
      @@logger.debug(cmd)
      system(cmd)

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END #{label}")
   end
   ## ------------------------------------------------------

   ## ------------------------------------------------------
   
   # data("SEPARATOR",     ["TEST LABEL",     0,   0,   0,    false])
   # data("0",     ["1_files_10GB_1Slots_NoDB",      1,   1024000,   1,     true])
   # data("1",     ["3_files_10GB_1Slots_NoDB",      3,   1024000,   1,     true])
   data("2",     ["7_files_10GB_1Slots_NoDB",      7,   1024000,   1,     true])

   ## PUSH Circulations
   def test_push(params)
      label, numFiles, numBlocks, numSlots, noDB = params
      
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START #{label}")

      sourceDir = DEC::ReadConfigDEC.instance.getSourceDir
      checkDirectory(sourceDir)
      @@logger.debug("SOURCE DIR => #{sourceDir}")

      1.upto(numFiles) do |i|
         filename = "test_http_#{i}.bin"
         cmd = "dd if=/dev/urandom of=#{sourceDir}/#{filename} bs=1024 count=#{numBlocks}"
         @@logger.debug(cmd)
         system(cmd)
      end

      cmd = "decGetFiles4Transfer"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "decSend2Interface --mnemonic WEBDAV2 -O"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      conf = ReadConfigOutgoing.instance
      dir = conf.getUploadDir("WEBDAV2")
      cmd = "rm -f #{dir}/test_http*"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "grep DEC\_210 /tmp/test_push_http*.log"
      @@logger.debug(cmd)
      system(cmd)

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END #{label}")
   end
   ## ------------------------------------------------------



end

### ==================================================================
