#!/usr/bin/env ruby

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'cuc/Log4rLoggerFactory'

require 'dec/InterfaceHandlerFTPS_Implicit'
require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'

## rake -f build_dec.rake dec:install[borja,localhost,s2_test_pg]

### sudo /usr/local/sbin/pure-ftpd /Users/borja/Projects/dec/config/ftp/pure-ftpd.conf

## http://index-of.es/Varios-2/Everything%20Curl.pdf


## https://rubydoc.info/gems/curb/Curl/Easy

## https://en.wikipedia.org/wiki/FTPS
## https://www.loadbalancer.org/blog/ftps-implicit-vs-ftps-explicit-who-will-win/

### ---------------------------------------------------------
###
### Test Environment#2 FTPS Explicit Mode (need to change config port to 21)
###
### sudo docker image build -t dec_ftp:latest . -f ./docker/Dockerfile.dec.vsftpd
###
### sudo docker container run --name dec_ftp -p 21:21 -p 30200-30300:30200-30300 -it -d dec_ftp
###
### sudo docker container exec -i -t dec_ftp /bin/bash
###
### ---------------------------------------------------------

##
## Create self-signed certificate
## openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout /etc/ssl/private/pure-ftpd.pem -out /etc/ssl/private/pure-ftpd.pem

## To configure vsftpd edit /opt/local/etc/vsftpd.conf
## ssl_enable=YES

## sudo port load vsftpd
## sudo port unload vsftpd


###
### Securing FTP with TLS
### https://tools.ietf.org/html/rfc4217
###

## curl -k --ftp-ssl --insecure --user dec:dec ftp://localhost/
##
## lftp :~> set ssl:verify-certificate no
## lftp :~> set ssl-force true
## lftp :~> set ssl-protect-data true

## Explicit TLS port 21 and requests AUTH TLS command.
## lftp :~> connect localhost

## Implicit Mode port 990
## lftp :~> connect ftps://localhost

## lftp :~> login dec

## https://www.glftpd.com/
## https://www.wftpserver.com/
##
##
## curl -k --list-only --ftp-ssl --insecure --user dec:dec ftps://127.0.0.1/tmp/dir2/

## curl -s -k --ftp-ssl --insecure --user dec:dec ftps://127.0.0.1/tmp/dir2/pedo > pedo

### https://github.com/bnix/double-bag-ftps/issues/17
### https://gist.github.com/jnimety/01c63faea799385862100b5a16b013d8#file-implicit_tls_ftp-rb

class DECTestCase_FTPS < Test::Unit::TestCase

   include Test::Unit::Data
   
   include CUC::DirUtils
   
   include DEC
         
   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   # --------------------------------------------------------
   
   Test::Unit.at_start do
      system("clear")
      puts
      puts "======================================"
      puts "DEC FTPS / FTPES Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
   
   
      @@arrDownloadFiles = [ \
                           "finals.all", \
                           "tai-utc.dat" \
                           ]

      @@conf = DEC_Environment.new

      @@conf.wrapper_load_config

      @decConfigDir = ENV['DEC_CONFIG']
 
      ## ----------------------------------
      ## initialize logger
      loggerFactory = CUC::Log4rLoggerFactory.new("DECTEST", "#{@decConfigDir}/dec_log_config.xml")
   
      @@logger = loggerFactory.getLogger   
      if @@logger == nil then
         puts
		   puts "Error in decUnitTests_FTPS"
     	   puts "Could not initialize logging system !  :-("
         puts "Check DEC logs configuration under \"#{@decConfigDir}/orchestrator_log_config.xml\"" 
 	      puts
   	   exit(99)
      end

      ## ----------------------------------
      @@conf.wrapper_unset_config
   
   end
   
   ## --------------------------------------------------------
   
   Test::Unit.at_exit do
      puts "End of DEC tests FTPS"
   end
   ## --------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s} START")
      
      @@logger.debug("Defining environment variable used in configuration: DEC_TMP")
      ENV['DEC_TMP'] = '/tmp'

      conf = ReadConfigOutgoing.instance

      dir = conf.getOutgoingDir("LOCALHOST_FTPS")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      dir = conf.getUploadDir("LOCALHOST_FTPS")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      dir = conf.getUploadTemp("LOCALHOST_FTPS")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      ## PARALLEL_HTTP is used for pull operations
      conf = ReadConfigIncoming.instance

      dir = conf.getIncomingDir("LOCALHOST_FTPS")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      arr = conf.getDownloadDirs("LOCALHOST_FTPS")

      arr.each{|inconfig|
         @@logger.debug("checking #{inconfig[:directory]}")
         checkDirectory(inconfig[:directory])
      }

      cmd = "decManageDB -d"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decManageDB -c"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decConfigInterface2DB -a LOCALHOST_FTPS"
      @@logger.debug(cmd)
      ret = system(cmd)


      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s} END")
   
      cmd = "rm -f /tmp/DEC*.log"
      @@logger.debug(cmd)
      system(cmd)
   end
   ## ------------------------------------------------------
   ## After every test case

   def teardown
      return
   end
   ## ------------------------------------------------------
   
   ##
   
   ## PULL Circulations
   def test_pull
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      checkDirectory("/tmp/dec/in_basket_if_localhost_ftps")
      
      system("\\rm -rf /tmp/dec/in_basket_if_localhost_ftps/*")

      cmd = "rm -f /tmp/DEC*.log"
      puts cmd
      system(cmd)

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      puts cmd
      assert(system(cmd), cmd)   
   
      cmd = "decCheckConfig -e LOCALHOST_FTPS"
      puts cmd
      assert(system(cmd), cmd)
      
      ## -----------------------------------------
      ## list mode and subsequent download
      
      system("echo \'my touch file\' > /tmp/tmp/dir1/touchfile1.txt")
      system("echo \'another touch file\' > /tmp/tmp/dir1/touchfile2.txt")
      system("echo \'another brick in the touch file\' > /tmp/tmp/dir2/touchfile3.txt")
      system("echo \'another brick in the touch file\' > /tmp/tmp/dir2/touchfile4.txt")
            
      cmd = "decGetFromInterface -m LOCALHOST_FTPS -l -D"
      puts cmd
      assert(system(cmd), cmd)
      
      cmd = "decGetFromInterface -m LOCALHOST_FTPS -D"
      puts cmd
      assert(system(cmd), cmd)

      arrFiles = Dir["/tmp/dec/in_basket_if_localhost_ftps/touch*"]      
      assert(arrFiles.length == 4, "Number of files pulled")
      
      ## -----------------------------------------

      
      ## -----------------------------------------
      ## Download again since --nodb is used to avoid filtering by previous download
          
      system("\\rm -rf /tmp/dec/in_basket_if_localhost_ftps/*")
      
      system("echo \'my touch file\' > /tmp/tmp/dir1/touchfile1.txt")
      system("echo \'another touch file\' > /tmp/tmp/dir1/touchfile2.txt")
      system("echo \'another brick in the touch file\' > /tmp/tmp/dir2/touchfile3.txt")
      system("echo \'another brick in the touch file\' > /tmp/tmp/dir2/touchfile4.txt")
            
      cmd = "decGetFromInterface -m LOCALHOST_FTPS --nodb"
      puts cmd
      assert(system(cmd), cmd)
 
      arrFiles = Dir["/tmp/dec/in_basket_if_localhost_ftps/touch*"]      
      assert(arrFiles.length == 4, "Number of files pulled")

      ## -----------------------------------------
      ## Now no files should be present for download

      system("\\rm -rf /tmp/dec/in_basket_if_localhost_ftps/*")
      
      cmd = "decGetFromInterface -m LOCALHOST_FTPS"
      puts cmd
      assert(system(cmd), cmd)
            
      arrFiles = Dir["/tmp/dec/in_basket_if_localhost_ftps/touch*"]      
      assert(arrFiles.length == 0, "Number of files pulled")

      ## -----------------------------------------

      cmd = "decStats -H 1"
      puts cmd
      assert(system(cmd), cmd)
      
      
      ## -----------------------------------------
      
      arr = Dir["/tmp/DEC*.log"]

      system("\\rm -rf /tmp/dec/in_basket_if_localhost_ftps/*")
      
      system("echo \'my touch file\' > /tmp/tmp/dir1/touchfile1.txt")
      system("echo \'another touch file\' > /tmp/tmp/dir1/touchfile2.txt")
      system("echo \'another brick in the touch file\' > /tmp/tmp/dir2/touchfile3.txt")
      system("echo \'another brick in the touch file\' > /tmp/tmp/dir2/touchfile4.txt")
            
      cmd = "decGetFromInterface -m LOCALHOST_FTPS"
      puts cmd
      assert(system(cmd), cmd)
 
      arrFiles = Dir["/tmp/dec/in_basket_if_localhost_ftps/touch*"]      
      assert(arrFiles.length == 0, "Duplicated files should not be pulled")
                      
      cmd = "grep DEC_125 #{arr[0]}"
      puts cmd
      assert(system(cmd), "Duplications logged in #{__method__.to_s}") 

      ## -----------------------------------------
      
   end
   ## ------------------------------------------------------

   ## ------------------------------------------------------
   
   ## PUSH Circulations
   def test_push
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "rm -f /tmp/DEC*.log"
      puts cmd
      system(cmd)

      checkDirectory("/tmp/dec/in_basket_if_localhost_ftps")
      
      system("\\rm -rf /tmp/dec/in_basket_if_localhost_ftps/*")

      cmd = "rm -f /tmp/tmp/dir1/finals.all"
      puts cmd
      system(cmd)

      cmd = "rm -f /tmp/tmp/dir1/tai-utc.dat"
      puts cmd
      system(cmd)


      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      puts cmd
      assert(system(cmd), cmd)   
   
      cmd = "decCheckConfig -e LOCALHOST_FTPS"
      puts cmd
      assert(system(cmd), cmd)
      
      checkDirectory("/tmp/dec_delivery_root/GIP_PROBA2")
      
      sourceDir = DEC::ReadConfigDEC.instance.getSourceDir
      
      checkDirectory(sourceDir)
      puts "SOURCE DIR => #{sourceDir}"

      ## for FTPS protocol the same files for download are used
      
      @@arrDownloadFiles.each{|filename|
         puts filename
         system("echo \'#{filename}\' > #{sourceDir}/#{filename}")
      }

      cmd = "decGetFiles4Transfer"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decSend2Interface --mnemonic LOCALHOST_FTPS -O -D"
      puts cmd
      assert(system(cmd), cmd)

#      cmd = "decDeliverFiles -D"
#      puts cmd
#      assert(system(cmd), cmd)

      cmd = "decListDirUpload -m LOCALHOST_FTPS -t"
      puts cmd
      assert(system(cmd), cmd)
      puts      

      cmd = "decStats"
      assert(system(cmd), cmd)
      
   end
   ## ------------------------------------------------------



end

### ==================================================================
