#!/usr/bin/env ruby

#########################################################################
#
# === Ruby source for #decUnitTests_FTPS class
#
# === Written by DEIMOS Space S.L.
#
# === Data Exchange Component
#
# # git: decUnitTests_FTPS,v $Id$: 
# 
# module DEC
#
#########################################################################

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'

## ---------------------------------------------------------
##
## Test Environment
##
## sudo docker image build -t dec_ftp:latest . -f ./docker/Dockerfile.dec.vsftpd
##
## sudo docker container run --name dec_ftp -p 21:21 -p 30200-30300:30200-30300 -it -d dec_ftp
##
## sudo docker container exec -i -t dec_ftp /bin/bash
##
## ---------------------------------------------------------

##
## Create self-signed certificate
## openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout /etc/ssl/private/pure-ftpd.pem -out /etc/ssl/private/pure-ftpd.pem

## To configure vsftpd edit /opt/local/etc/vsftpd.conf
## sudo port load vsftpd
## sudo port unload vsftpd


###
### Securing FTP with TLS
### https://tools.ietf.org/html/rfc4217
###


## curl -k --ftp-ssl --insecure --user dec:dec ftp://localhost/
##
## lftp :~> set ssl:verify-certificate no
## lftp :~> set ssl-force true
## lftp :~> set ssl-protect-data true
## lftp :~> connect localhost
## lftp :~> login dec

class DECTestCase_FTPS < Test::Unit::TestCase

   include Test::Unit::Data
   
   include CUC::DirUtils
   
   include DEC
         
   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   # --------------------------------------------------------
   
   Test::Unit.at_start do
      system("clear")
      puts
      puts "======================================"
      puts "DEC FTPS / FTPES Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
   
   
      @@arrDownloadFiles = [ \
                           "finals.all", \
                           "tai-utc.dat" \
                           ]

   
   end
   
   # --------------------------------------------------------
   
   Test::Unit.at_exit do
      puts "End of DEC tests FTPS"
   end
   #--------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      return
   end
   ## ------------------------------------------------------
   ## After every test case

   def teardown
      return
   end
   ## ------------------------------------------------------
   
   ## ------------------------------------------------------
   
   ## PULL Circulations
   def test_pull
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      checkDirectory("/tmp/dec/in_basket_if_localhost_ftps")
      
      system("\\rm -rf /tmp/dec/in_basket_if_localhost_ftps/*")


      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      puts cmd
      assert(system(cmd), cmd)   
   
      cmd = "decCheckConfig -e LOCALHOST_FTPS"
      puts cmd
      assert(system(cmd), cmd)
      
      cmd = "decGetFromInterface -m LOCALHOST_FTPS -l"
      puts cmd
      assert(system(cmd), cmd)
      
      cmd = "decGetFromInterface -m LOCALHOST_FTPS"
      puts cmd
      assert(system(cmd), cmd)

      arrFiles = Dir["/tmp/dec/in_basket_if_localhost_ftps/touch_*"]      
      assert(arrFiles.length == 4, "Number of files pulled")
          
      system("\\rm -rf /tmp/dec/in_basket_if_localhost_ftps/*")
      
      cmd = "decGetFromInterface -m LOCALHOST_FTPS --nodb"
      puts cmd
      assert(system(cmd), cmd)
 
      arrFiles = Dir["/tmp/dec/in_basket_if_localhost_ftps/touch_*"]      
      assert(arrFiles.length == 4, "Number of files pulled")

      system("\\rm -rf /tmp/dec/in_basket_if_localhost_ftps/*")
      
      cmd = "decGetFromInterface -m LOCALHOST_FTPS"
      puts cmd
      assert(system(cmd), cmd)
            
      arrFiles = Dir["/tmp/dec/in_basket_if_localhost_ftps/touch_*"]      
      assert(arrFiles.length == 0, "Number of files pulled")

      cmd = "decStats -H 1"
      puts cmd
      assert(system(cmd), cmd)
      
      
   end
   ## ------------------------------------------------------

   ## ------------------------------------------------------
   
   ## PUSH Circulations
   def test_push
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      checkDirectory("/tmp/dec/in_basket_if_localhost_ftps")
      
      system("\\rm -rf /tmp/dec/in_basket_if_localhost_ftps/*")


      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      puts cmd
      assert(system(cmd), cmd)   
   
      cmd = "decCheckConfig -e LOCALHOST_FTPS"
      puts cmd
      assert(system(cmd), cmd)
      
      checkDirectory("/tmp/dec_delivery_root/GIP_PROBA2")
      
      sourceDir = DEC::ReadConfigDEC.instance.getSourceDir
      
      checkDirectory(sourceDir)
      puts "SOURCE DIR => #{sourceDir}"

      ## for FTPS protocol the same files for download are used
      
      @@arrDownloadFiles.each{|filename|
         puts filename
         system("echo \'#{filename}\' > #{sourceDir}/#{filename}")
      }

      cmd = "decGetFiles4Transfer"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decSend2Interface --mnemonic LOCALHOST_FTPS -O"
      puts cmd
      assert(system(cmd), cmd)

#      cmd = "decDeliverFiles -D"
#      puts cmd
#      assert(system(cmd), cmd)

      cmd = "decListDirUpload -m LOCALHOST_FTPS -t"
      puts cmd
      assert(system(cmd), cmd)
      puts      

      cmd = "decStats"
      assert(system(cmd), cmd)
      
   end
   ## ------------------------------------------------------



end

### ==================================================================
