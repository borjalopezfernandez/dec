#!/usr/bin/env ruby

#########################################################################
#
# === Ruby source for #DEC_TestCases class
#
# === Written by DEIMOS Space S.L. (bolf)
#
# === Data Exchange Component
# 
# module DEC
#
#########################################################################

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'ctc/FTPClientCommands'
require 'dec/DEC_Environment'
require 'dec/ReadInterfaceConfig'
require 'dec/ReadConfigOutgoing'

# Preconditions:
# 1 - setup 
# 1.1 - load_config_development
# 1.2 - inventory database is created

# 2 - teardown
# 2.1 - purge archive
# 2.2 - inventory database is destroyed

#  1  - test_decConfigInterface2DB
#  2  - test_decGetFromInterface
#  3  - test_decListener


# Select a single test of the suite

# ruby decUnitTests -n test_my_method 

# Start FTP Server in MacOS Sierra
# launchctl load -w /System/Library/LaunchDaemons/ftp.plist

# Stop FTP Server
# launchctl unload -w /System/Library/LaunchDaemons/ftp.plist

class DECTestCase < Test::Unit::TestCase

   include CUC::DirUtils
   include CTC::FTPClientCommands
   include DEC

   
   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   #--------------------------------------------------------
   
   Test::Unit.at_start do      
      puts
      puts "======================================"
      puts "DEC Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
      
      
=begin
      puts
      puts
      puts "THINK IT TWICE  !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      
      if c != 'Y' then
         exit(99)
      end

=end      
      
      @@conf = DEC_Environment.new
      
      @@conf.wrapper_load_config_development


      puts      
      @@conf.wrapper_print_environment
      puts
      
      
      @@conf.createEnvironmentDirs


      if @@conf.wrapper_check_environment == false then
         puts "DEC environment not suited for unit tests"
         puts
         exit(99)
      end
      
      require 'dec/DEC_DatabaseModel'
      require 'dec/ReadInterfaceConfig'
      
      ftConfig = ReadInterfaceConfig.instance
      arrEnts  = ftConfig.getAllMnemonics

      arrEnts.each{|x|
         
         puts x
         
         bEnabled4Send  = ftConfig.isEnabled4Sending?(x)
         bEnabled4Recv  = ftConfig.isEnabled4Receiving?(x)
         ftpSend        = ftConfig.getFTPServer(x)

         if bEnabled4Recv == true and x.upcase.include?("LOCALHOST") then
            arrDirs = ftpSend[:arrDownloadDirs]
            arrDirs.each{|interface|
               dir         = interface.directory
               downloadDir = nil
                     
               if dir[0,1] != '/' then
                  downloadDir='~/'+dir
               else
                  downloadDir=dir
               end     
               cmd = "mkdir -p #{downloadDir}"
               puts cmd
               system(cmd)
            }
         end
                  
         if bEnabled4Send == false or !x.upcase.include?("LOCALHOST") then
            puts "#{x} is not configured for sending files or it is not local"
            next
         end
         
         uploadDir      = ftpSend[:uploadDir]
         uploadTemp     = ftpSend[:uploadTemp]
         
         if uploadDir[0,1] != '/' then
            uploadDir='~/'+uploadDir
         end     
         cmd = "mkdir -p #{uploadDir}"
         puts cmd
         system(cmd)
            
         if uploadTemp[0,1] != '/' then
            uploadTemp='~/'+uploadTemp
         end     
         cmd = "mkdir -p #{uploadTemp}"
         puts cmd
         system(cmd)            
      }
      
   end
   
   #--------------------------------------------------------
   
   Test::Unit.at_exit do
      system("decListener -S")
      puts "End of DEC tests"
   end
   
   #--------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development
      
      @path = "#{ENV['MINARC_BASE']}/code/dec"
      
      cmd = "decManageDB -c"
      ret = system(cmd)
      
      if ret == false then
         puts
         puts "Error when creating the minarc inventory ! :-("
         puts
         # exit(99)
      end
      
      cmd = "decConfigInterface2DB -p EXTERNAL"
      
      ret = system(cmd)
      
      if ret == false then
         puts
         puts "Error when adding interface configuration to the database ! :-("
         puts
         # exit(99)
      end
      
   end
   # --------------------------------------------------------
   # After every test case

   def teardown
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      @@conf.wrapper_load_config_development

      cmd = "decManageDB -d"
      puts cmd
      ret = system(cmd)
       
      if ret == false then
         puts "Error when dropping the dec inventory ! :-("
         puts
         exit(99)
      end
   end
   # --------------------------------------------------------


   # --------------------------------------------------------

   def test_decGetFromInterface
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      @@conf.wrapper_load_config_development

      puts
      puts
      @@conf.print_environment
      puts
      puts

      cmd = "decGetFromInterface -v"
      assert(system(cmd), cmd)

      dec_tmp = ENV['DEC_TMP']

      ENV.delete('DEC_TMP')
      
      cmd = "decGetFromInterface -m IERS -l --nodb"
      puts cmd
      assert(!system(cmd), cmd)
      
      ENV['DEC_TMP'] = dec_tmp


      cmd = "decConfigInterface2DB -p EXTERNAL"
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")

      @entityConfig     = ReadInterfaceConfig.instance
      @finalDir         = @entityConfig.getIncomingDir("IERS")
      
      checkDirectory(@finalDir)

      # finals.all / tai-utc.dat
            
      FileUtils.rm_f("#{@finalDir}/finals.all")
      FileUtils.rm_f("#{@finalDir}/finals.all")
            
      cmd = "decGetFromInterface -m IERS -l --nodb -D"
      puts cmd
      assert(system(cmd), cmd)
      
      cmd = "decGetFromInterface -m IERS --nodb --no-intray"
      puts cmd
      assert(system(cmd), cmd)

      assert(File.exist?("#{@finalDir}/finals.all"), "retrieved finals.all")
      assert(File.exist?("#{@finalDir}/tai-utc.dat"), "retrieved tai-utc.dat")

      FileUtils.rm_f("#{@finalDir}/finals.all")
      FileUtils.rm_f("#{@finalDir}/finals.all")

      cmd = "decGetFromInterface -m IERS --no-intray"
      puts cmd
      assert(system(cmd), cmd)

      assert(File.exist?("#{@finalDir}/finals.all"), "retrieved finals.all")
      assert(File.exist?("#{@finalDir}/tai-utc.dat"), "retrieved tai-utc.dat")

      FileUtils.rm_f("#{@finalDir}/finals.all")
      FileUtils.rm_f("#{@finalDir}/tai-utc.dat")

      cmd = "decStats -v"
      assert(system(cmd), cmd)

      cmd = "decStats -f non_received_file.kk"
      assert(!system(cmd), cmd)
      
      cmd = "decStats -f finals.all"
      assert(system(cmd), cmd)

      cmd = "decStats -f tai-utc.dat"
      assert(system(cmd), cmd)

      cmd = "decStats"
      assert(system(cmd), cmd)

      cmd = "decGetFromInterface -m IERS --no-intray"
      puts
      assert(system(cmd), cmd)

      assert(!File.exist?("#{@finalDir}/finals.all"), "should not retrieve twice finals.all")
      assert(!File.exist?("#{@finalDir}/tai-utc.dat"), "should not retrieve twice tai-utc.dat")

      cmd = "decStats -H 1"
      assert(system(cmd), cmd)
      
      cmd = "decStats -H 2"
      assert(system(cmd), cmd)
      

   end
   # --------------------------------------------------------


end


#=====================================================================


#-----------------------------------------------------------


