#!/usr/bin/env ruby

# == Synopsis
#
# This is a command line tool that connects to NAOS MCS using NATS & SFTP.
#
# F0. Get Session 
#
# F1. Manage G/S connections
# CCS5.AutoPilot.NAOS.call, message: SleGroundStationMgm SVALS0 CONNECT
#
# F2. Session Switch
# NATS subject used by AUTO to issue the request: CCS5.AutoPilot.NAOS.switch
# NATS body: none.
#
# F3. Ingest MPS activities file
# NATS subject used by AUTO to issue the request: CCS5.AutoPilot.NAOS.call
# NATS body: Ingest <input URL> <target path>
# <input URL>: path to local file (e.g. NFS mounted) or FTP URL for the file to be ingested, in the latter case the URL must contain user, password, hostname, remote path including a file name (Port is optional).
# <target path>: destination path for the ingested path (absolute or relative directory/file path).
# Note that if the destination path ends with / (slash), it is treated as a directory, and the ingested file will keep its name. Otherwise it is a full path, including a file name.
# Note that when using a relative path, the destination path will be relative to a root folder preconfigured in the MCS for all ingested files (settings: NAOS/IngestDir).
#
# decNATS -n NAOS_IVV_MCS_NATS -F3 -P "{\"filename\" :\"/tmp/2022-05-25T15:36:59.288624_PLA_SBA\", \"target\" :\"/tmp/2022-06-01T18:00:00.449688_PLA_OSC_eng_uplink\"}"
#
# F4. Trigger processing of MPS/FDS activities file
# NATS subject used by AUTO to issue the request: CCS5.AutoPilot.NAOS.call
# NATS body: ProcessActivityFile <PATH>
# <PATH>: Path to the MPS/FDS activities XML file (corresponds to <target path> used in the ingest function (F3). The file is written according to the XML schema mtl.xsd (see Appendix 1 – Spacecraft activities file).
#
# decNATS -n NAOS_IVV_MCS_NATS -F4 -P "{\"path\" :\"/CCS/VARIABLE/INPUTS/2022-05-25T15:36:59.288624_PLA_SBA\"}"
# decNATS -n NAOS_IVV_MCS_NATS -F4 -P "{\"path\" :\"/CCS/VARIABLE/INPUTS/2022-05-27T09:14:38.449688_PLA_OSC\"}"
#
# F5. Start dispatching a sequence of TCs created from an activities file
# NATS subject used by AUTO to issue the request: CCS5.AutoPilot.NAOS.call
# NATS body: UplinkActivityFile <filename>
# <filename>: name of the activity file that was used to generate the TC sequence (without extension “.xml”)
# This request executes the TC sequence generated in F4 (above), starting the uplink of all TCs in the file. TCs are sent according to the current active commanding mode: either sequential (COP1 active, also known as AD) or expedite (also known as BD).
# If COP1 is active, a command (either a PUS TC(11,4) carrier of a time-tagged TC or an immediate TC) is considered uplinked when the onboard acceptance verification stage succeeds (UV_ONB_ACC, verified with TM/CLCW).
# If COP1 is not active, the relevant stage for considering the TC uplinked is UV_GS_UPLINK (corresponds to the ground station reporting TC being uplinked).
# After a successful uplink, the stack file is deleted, and the NATS reply message is simply “OK”. If uplinking failed at a certain stage, the file will stay on disk, so it does not need to be regenerated again. However, it makes no provisions to avoid sending the same TCs again
#
# decNATS -n NAOS_IVV_MCS_NATS -F5 -P "{\"filename\" :\"2022-06-25T15:36:59\"}"
#
# F6. Generate TM report (for FDS)
# NATS subject used by AUTO to issue the request: CCS5.AutoPilot.NAOS.call
# NATS body: HistoryReport <Report Type> <start time> <end time> <outputURL>
# <Report Type>: GPS, THR, SCA, MSC (or other). This value identifies a report configuration file (named <Report Type>.dat), containing the list of TM parameters to be retrieved (PCF_NAME’s).
# <start time> <endtime>: time range for the retrieval (e.g. last orbit), ISO format e.g. 2020-04-20T15:18:49
# <outputURL>: destination of the final report.
#
# decNATS -n NAOS_IVV_MCS_NATS -F6 -P "{\"type\" :\"GPS\", \"start\" : \"2015-04-20T15:18:49\" , \"end\" : \"2025-04-20T15:18:49\", \"url\" : \"/tmp/GPS-TM-data-Pass-551.xml\" }"
#
#
# F7. Process Playback TM frames
# NATS subject used by AUTO to issue the request: CCS5.AutoPilot.NAOS.call
# NATS body: ReplayTmFrames <File path> <VC>
# <File path> : TM File path (file absolute path, or relative to a preconfigured root folder for ingested files : settings: NAOS/IngestDir)
# <VC> TM VC, filter for TM frames to replay (value: 0, 1, ...7) (optional argument, if not provided all VCs in the file are replayed).
# The input TM file is a binary file of concatenated TM frames where each frame is 1115 bytes long (configurable at general level in CCS5 for the mission via settings: TM/frame/dataLength).
# Frames are read out of the TM file and injected into CCS5 for processing. If synchronization is lost while reading the file (due to file data inconsistency), processing will stop with an error. Injected frames are marked with “source” property set to the file name. This property is propagated to TM packets and parameters and made available as metadata for visualisation (e.g. TM history viewers) and retrieval within the MCS (CCS5).
# The process ends when all frames have been replayed, the caller (AUTO) is eventually notified with a response that includes the number of replayed frames.
#
#
# MessageBroker::subscribe -subject CCS5.AutoPilot.NAOS.call.ack referby ackMessage
# trace add variable ackMessage write [lambda {var idx op} {
#  syslog -ok "$tcl_name -> Received ACK message: [MessageBroker::getMessageBody $::ackMessage]"
# }]
#
#
# == Usage
# decNATS -m <I/F SFTP> -n <I/F NATS> -F<function> -P {JSON parameters}
#        --mnemonic  <MNEMONIC> (mnemonic is case sensitive)
#        --Subject   <subject>
#        --Body      <body>
#        --nodb      no usage of the Inventory for recording operations
#        --help      shows this help
#        --usage     shows the usage
#        --Debug     shows Debug info during the execution
#        --version   shows version number
# 
# == Author
# Deimos-Space S.L.
#
# == Copyright
# Copyright (c) 2022 Deimos Space S.L.
#

#########################################################################
#       
# === Written by NAOS
#
# === Deimos Space
# 
#########################################################################

## nats server check -s nats://172.23.253.28:4222

## nats sub -s nats://172.23.253.28:4222 ">"

## nats sub -s nats://172.23.253.28:4222 "CCS5.SESS.STATUS.NAOS.*"

# "CCS5.AutoPilot.NAOS.call.ack"
# CCS5.AutoPilot.NAOS.call.*


# [#69] Received on "CCS5.GSFE.settings.NAOS"
# MCS/GSFE/NisDriver/TestUnis1/autoConnectTC 0 MCS/GSFE/NisDriver/TestUnis1/autoConnectTM 0 MCS/GSFE/NisDriver/defaultDriver/autoConnectTC 0 MCS/GSFE/NisDriver/defaultDriver/autoConnectTM 0 MCS/GSFE/NisDriver/TestUnis1/autoActivate 0 MCS/GSFE/NisDriver/defaultDriver/autoConnectMON 0 MCS/GSFE/NisDriver/DEDANAOSSIM02_SV/autoConnectTC 0 MCS/GSFE/NisDriver/DEDANAOSSIM02_SV/autoConnectTM 0 MCS/GSFE/NisDriver/DEDANAOSSIM02_SV/autoConnectMON 0 MCS/GSFE/NisDriver/DEDANAOSSIM02_SV/autoActivate 0 MCS/GSFE/NisDriver/TestUnis1/autoConnectMON 0 MCS/GSFE/NisDriver/defaultDriver/autoActivate 0

#201] Received on "CCS5.GSFE.status.NAOS"
# {"DEDANAOSSIM02_SV":{"active":0,"monConnected":0,"tcConnected":0,"tmConnected":0},"TestUnis1":{"active":0,"monConnected":0,"tcConnected":0,"tmConnected":0},"defaultDriver":{"active":0,"monConnected":0,"tcConnected":0,"tmConnected":0}}


# [#82] Received on "CCS5.AutoPilot.status.NAOS"
# {"alertCount":0,"connected":1,"epoch":315964800,"lastCompletedTask":-1,"lastCompletionTime":0,"lastErrorTask":-1,"lastStartedSeq":null,"lastStartedStk":null,"lastTaskErrorMsg":null,"model":"SAT","name":"NAOS","nextScheduleEntry":0,"nextScheduleMethod":null,"nextScheduleSeconds":-1654083668,"nextScheduleTask":null,"nextScheduleTime":0,"obt":699.33,"refresh":1654083668,"session":"2022_06_01T11_29_15_ccsexec_nl2-s-mcs-srv-01_RT","tcPktCount":0,"tmLevel":1,"tmPktCount":0,"visible":0}

#[#7288] Received on "CCS5.AutoPilot.event.NAOS"
#{"logTime":"2022-06-01T11:50:09.990Z","severity":"OK","source":"AP(8)","text":"Service 'ingest /CCS/VARIABLE/INPUTS/2022-06-01T09:14:38.449688_PLA_OSC_eng_uplink /tmp/2022-06-01T09:14:38.449688_PLA_OSC_eng_uplink' returned 'Progress: 100% (791 of 791 bytes...'"}

# [#7283] Received on "CCS5.AutoPilot.NAOS.ingest" with reply "_INBOX.Rb1TdwVc7jMwiP3FwIesEH.Rb1TdwVc7jMwiP3FwIeu3W"
# /CCS/VARIABLE/INPUTS/2022-06-01T09:14:38.449688_PLA_OSC_eng_uplink /tmp/2022-06-01T09:14:38.449688_PLA_OSC_eng_uplink

require 'rubygems'
require 'getoptlong'
require 'json'

require 'cuc/Log4rLoggerFactory'
require 'cuc/Converters'

require 'dec/DEC_Environment'
require 'dec/ReadInterfaceConfig'
require 'dec/NATSClientCCS5'
require 'dec/NATSClient'

# MAIN script function
def main

  include CUC::Converters
  
  include DEC

  strBody     = ""
  strSubject  = ""
  strFunction = ""
  hParams     = nil
  jParams     = nil

  @ifNATS     = ""
  @ifSFTP     = nil

  opts = GetoptLong.new(
    ["--Function", "-F",            GetoptLong::REQUIRED_ARGUMENT],
    ["--Params", "-P",              GetoptLong::REQUIRED_ARGUMENT],
    ["--Subject", "-S",             GetoptLong::REQUIRED_ARGUMENT],
    ["--Body", "-B",                GetoptLong::REQUIRED_ARGUMENT],
    ["--mnemonic", "-m",            GetoptLong::REQUIRED_ARGUMENT],
    ["--servernats", "-n",          GetoptLong::REQUIRED_ARGUMENT],
    ["--Debug", "-D",               GetoptLong::NO_ARGUMENT],
    ["--version", "-v",             GetoptLong::NO_ARGUMENT],
    ["--help", "-h",                GetoptLong::NO_ARGUMENT]
    )
   
  begin
     opts.each do |opt, arg|
        case opt
          when "--Debug"             then @isDebugMode    = true
          when "--Function"          then strFunction     = "F#{arg.to_s}"
          when "--Body"              then strBody         = arg.to_s
          when "--Subject"           then strSubject      = arg.to_s
          when "--Params"            then hParams         = arg
          when "--version"           then @bShowVersion   = true
          when "--mnemonic"          then @ifSFTP         = arg
          when "--servernats"        then @ifNATS         = arg      
          when "--update-tables"     then @bUpdate        = true
          when "--help"              then @bUsage         = true
        end
     end
  rescue Exception => e
     puts e.to_s
     exit(99)
  end 

  if @bShowVersion == true then
    print("\nESA - DEIMOS-Space S.L. ", File.basename($0), " Version: [#{DEC.class_variable_get(:@@version)}]", "\n\n")
    hRecord = DEC.class_variable_get(:@@change_record)
    hRecord.each_pair{|key, value|
       puts "#{key} => #{value}"
    }      
    exit(0)
  end

  if @bUsage then
    usage
    exit(0)
  end

  if strFunction == "" or @ifNATS == "" \
    and (strBody == "" and strSubject == "") then
    usage
    exit(66)
  end

  ret = checkEnvironmentEssential

  if ret == true then
     ret = checkEnvironmentDB
  else
     checkEnvironmentDB
     exit(99)
  end

  if ret == false then
     exit(99)
  end

  ## ------------------------------------------------------

  # initialize logger
  loggerFactory = CUC::Log4rLoggerFactory.new("nats", "#{ENV['DEC_CONFIG']}/dec_log_config.xml")
  if @isDebugMode then
     loggerFactory.setDebugMode
  end
  @logger = loggerFactory.getLogger
  
  if @logger == nil then
    puts
    puts "Error in getFromInterface::main"
    puts "Could not set up logging system !  :-("
    puts "Check DEC logs configuration under \"#{ENV['DEC_CONFIG']}/dec_log_config.xml\"" 
    puts
    puts
    exit(99)
  end

  ## ------------------------------------------------------

  @logger.info("[DEC_005] I/F #{@ifNATS}: Polling Started")

  if strSubject != "" then
    client = NATSClient.new(@ifNATS, @logger, @isDebugMode)
    begin
      client.natsRequest(strSubject, strBody)
    rescue Exception => e
      @logger.error("[DEC_610] I/F #{@ifNATS}: #{e.to_s}")
      exit(99)
    end
    exit(0)
  end

  ## ------------------------------------------------------

  ccs5 = NATSClientCCS5.new(@ifNATS, @ifSFTP, @logger, @isDebugMode)

  begin
    case strFunction
      when "F0" then 
        ccs5.requestF0
      when "F2" then 
        ccs5.requestF2
      when "F3" then 
        ccs5.requestF3(hParams)
      when "F4" then 
        ccs5.requestF4(hParams)
      when "F5" then 
        ccs5.requestF5(hParams)   
      when "F6" then 
        ccs5.requestF6(hParams)
      when "F7" then 
        ccs5.requestF7(hParams)
      when "F99" then 
        ccs5.requestF99(hParams)               
      else
        @logger.error("[DEC_799] Function #{strFunction} is not supported")
        exit(99)
    end
  rescue Exception => e
    @logger.error("[DEC_610] I/F #{@ifNATS}: #{e.to_s}")
    if @isDebugMode == true then
      @logger.debug(e.backtrace)
    end
    exit(99)
  end

  exit(0)
end
#-------------------------------------------------------------

## Print command line help
def usage
  fullpathFile = File.expand_path(__FILE__)    
  
  value = `#{"head -86 #{fullpathFile}"}`
     
  value.lines.drop(1).each{
     |line|
     len = line.length - 1
     puts line[2, len]
  }
end
## --------------------------------------------------------------

#===============================================================================
# Start of the main body
main
# End of the main body
#===============================================================================
