#!/usr/bin/env ruby

#########################################################################
###
### === Ruby source for #DEC_TestCases class
###
### === Written by DEIMOS Space S.L. (bolf)
###
### === Data Exchange Component
### 
### module DEC
###
#########################################################################

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'Date'

require 'cuc/Log4rLoggerFactory'
require 'cuc/DirUtils'

require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'


# Preconditions:
# 1 - setup 

# 2 - teardown

##  0.1 - test_download_s2a

##  1  - test_class_delay_s1
##  2  - test_class_delay_s2
##  3  - test_class_sensing_s1
##  4  - test_command_delay_s1a
##  5.1  - test_command_creation_gnss_s1a
##  5.2  - test_command_creation_gnss_s2a
##  6  - test_command_creation_s1a
##  7  - test_command_creation_s1a_long
##  8.1  - test_command_creation_delay_s1a
##  8.2  - test_command_creation_delay_s2a
##  8.3  - test_command_creation_delay_s3a
##  8.4  - test_command_creation_delay_s5p
##  9  - test_s1a_validity
##  10 - test_s1b_validity_json
##  11 - test_s1a_string
##  12 - test_s1b_creation
##  13 - test_s2_datatake


# Select a single test of the suite

# ruby decUnitTests_DHUS -n test_my_method 


class DECTestInterfaceDHUS < Test::Unit::TestCase

   include CUC::DirUtils
   include DEC

   
   # Order of the test cases execution according to defintion within code
   #self.test_order = :defined
   
      
   ## ------------------------------------------------------
   
   Test::Unit.at_start do      
   #def setup
      @my_argv = ARGV.dup
      puts
      puts "======================================"
      puts "DEC ODATA Interface Test Cases #{self.class.name.split('::').last}"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
      
            @@arrDownloadFiles = [ \
                           "finals.all", \
                           "gpsrapid.out" \
                           ]

      
=begin
      puts
      puts
      puts "THINK IT TWICE  !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      
      if c != 'Y' then
         exit(99)
      end

=end      
      
      @@conf = DEC_Environment.new
      
      @@conf.wrapper_load_config
        
      @@conf.wrapper_print_environment
      
      @@conf.createEnvironmentDirs


      if @@conf.wrapper_check_environment == false then
         puts "DEC environment not suited for unit tests"
         puts
         exit(99)
      end


      # initialize logger
      loggerFactory = CUC::Log4rLoggerFactory.new("test", "#{ENV['DEC_CONFIG']}/dec_log_config.xml")
      if @isDebugMode then
         loggerFactory.setDebugMode
      end
      @@logger = loggerFactory.getLogger
      
      if @@logger == nil then
         puts
		   puts "Error in decUnitTests::main"
		   puts "Could not set up logging system !  :-("
         puts "Check DEC logs configuration under \"#{ENV['DEC_CONFIG']}/dec_log_config.xml\"" 
		   puts
		   puts
		   exit(99)
      end

      
   end
   
   ## ------------------------------------------------------

   Test::Unit.at_exit do
      puts "End of DEC tests 4 DHUS"
   end

   def setup
      puts "setup"
   end

   def teardown
      puts "teardown"
   end

   ## ------------------------------------------------------


   ## --------------------------------------------------------
   ## test class 1

   def test_class_delay_s1
      @@logger.debug("================================================")
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s}")
      
      if self.checkEnvironmentEssential == false then
         self.printEnvironmentError
         exit(99)
      end
     
      require 'dec/ODataClientDHUS'
      
      currentTime = DateTime.now - (5.0/24.0)
      datetime    = currentTime.strftime("%Y-%m-%dT%H:00:00.000")
      client      = ODataClientDHUS.new("borjalf", "perrillo.pwd", "dhus:s1:S1B", nil, datetime, nil, "/tmp", false, @@logger)
      client.setDebugMode
      assert(client.exec_query, "hour delay")
      ## --------------------------------------------
         
        
   end
   ## ------------------------------------------------------


   ## --------------------------------------------------------
   ## 

   def test_class_delay_s2
      @@logger.debug("================================================")
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s}")
      
      if self.checkEnvironmentEssential == false then
         puts
         self.printEnvironmentError
         puts
         exit(99)
      end

      ## --------------------------------------------
     
      require 'dec/ODataClientDHUS'
      
      currentTime = DateTime.now - (1.5/24.0)
      datetime    = currentTime.strftime("%Y-%m-%dT%H:00:00.000")
      client      = ODataClientDHUS.new("borjalf", "perrillo.pwd", "dhus:s2:S2B", nil, datetime, nil, "/tmp", false, @@logger)
      client.setDebugMode
      assert(client.exec_query, "hour delay")
      ## --------------------------------------------
         
        
   end
   ## ------------------------------------------------------

   
   ## --------------------------------------------------------
   ## 

   def test_class_delay_s3
      puts
      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts
      
      if self.checkEnvironmentEssential == false then
         puts
         self.printEnvironmentError
         puts
         exit(99)
      end
     
      require 'dec/ODataClientDHUS'
      
      currentTime = DateTime.now - (5.0/24.0)
      datetime    = currentTime.strftime("%Y-%m-%dT%H:00:00.000")
      client      = ODataClientDHUS.new("borjalf", "perrillo.pwd", "dhus:s3:S3B", nil, datetime, nil, "/tmp", false, @@logger)
      client.setDebugMode
      assert(client.exec_query, "hour delay")
      ## --------------------------------------------
         
        
   end
   ## ------------------------------------------------------

   ## --------------------------------------------------------
   ## 

   def test_class_sensing_s1
      puts
      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts
      
      if self.checkEnvironmentEssential == false then
         puts
         self.printEnvironmentError
         puts
         exit(99)
      end
     
      require 'dec/ODataClientDHUS'
      
      client      = ODataClientDHUS.new("borjalf", "perrillo.pwd", "dhus:s1:S1B", nil, nil, "2021-06-17T23:59:00.000,2021-06-18T00:00:00.000", "/tmp", false, @@logger)
      client.setDebugMode
      assert(client.exec_query, "sensing range")
      ## --------------------------------------------
      
   end
   ## ------------------------------------------------------

   ## --------------------------------------------------------
   ## 

   def test_class_sensing_s2
      puts
      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts
      
      if self.checkEnvironmentEssential == false then
         puts
         self.printEnvironmentError
         puts
         exit(99)
      end
     
      require 'dec/ODataClientDHUS'
      
      client      = ODataClientDHUS.new("borjalf", "perrillo.pwd", "dhus:s2:S2A", nil, nil, "2021-07-18T00:00:00.000,2021-07-18T00:05:00.000", "/tmp", false, @@logger)
      client.setDebugMode
      assert(client.exec_query, "sensing range")
      ## --------------------------------------------
            
      
   end
   ## ------------------------------------------------------


   ## ------------------------------------------------------

#   def test_protocol
#   
#      ## References:
#      ## https://nokogiri.org/tutorials/searching_a_xml_html_document.html
#   
#      puts
#      puts "================================================"
#      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
#      puts
#
#      require 'net/http'
#      require 'nokogiri'
#
#      level    = "L2A"
#      datatake = "GS2B_20200903T104429_018252_N02.14"
#      
#      puts
#      puts datatake.slice(28,3)
#      puts
#      
#      strEUP   = "#{datatake.slice(1,3)}_MSI#{level}_#{datatake.slice(5,15)}_#{datatake.slice(28,3)}#{datatake.slice(32,3)}"
#
#      puts
#      puts strEUP
#      puts
#
#
#      strURL = "https://scihub.copernicus.eu/dhus/odata/v1/Products?$select=Id&$filter=substringof(%27S2B_MSIL2A_20200903T104429_N0214%27,Name)"
#   
#   
#      uri = URI.parse(strURL)
#      
#      http = Net::HTTP.new(uri.host, uri.port)
#
#      http.use_ssl = true
#
#      request = Net::HTTP::Get.new(uri.request_uri)
#      
#      puts strURL
#      puts uri.request_uri
#      
#      request.basic_auth("borjalf", "perrillo.pwd")
#      
#      response = nil
#      
#      while response == nil do
#         begin
#            response = http.request(request)
#         rescue Exception => e
#            puts e.to_s
#            response = nil
#            sleep(1.0)
#         end
#      end
#   
#      puts response.code
#      puts
#      puts response.message
#      puts
#      
#      doc = Nokogiri::XML(response.body)
#            
#      elements = doc.xpath("//xmlns:title")
#      
#      elements.each{|item|
#         puts item.text
#      }
#      
#   end

   ## -------------------------------------------------------------

   def test_commandline_helpers
      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      cmd = "decODataClient -v"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decODataClient -h"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decODataClient -u mario -p cipollini"
      puts cmd
      assert(!system(cmd), "#{cmd} invoked without the query")

      cmd = "decODataClient -u mario -q dhus:s2:l1c:GS2B_20200903T104429_018252_N02.14"
      puts cmd
      assert(!system(cmd), "#{cmd} invoked without the password")

   end

   ## ------------------------------------------------------

   def test_s2_datatake
   
      ## References:
      ## https://nokogiri.org/tutorials/searching_a_xml_html_document.html
   
      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      ## Query by Datatake
      cmd = "decODataClient -u borjalf -p perrillo.pwd -q dhus:s2:l2a:GS2B_20200903T104429_018252_N02.14"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")

      ## Query by Datatake & Datastrip
      cmd = "decODataClient -u borjalf -p perrillo.pwd -q dhus:s2:l1c:GS2A_20200831T191921_027123_N02.09:20200901T003452"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake & Datastrip query")


   end

   ## ------------------------------------------------------
   
   
   ## ------------------------------------------------------
   
   def test_s1_all
      
      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      require 'Date'
      
      currentTime = DateTime.now - (2/24.0)

      ## Query by CreationDate for Sentinel-1A
      cmd = "decODataClient -u borjalf -p perrillo.pwd -t #{currentTime.strftime("%Y-%m-%dT%H:00:00.000")} -q dhus:s1:S1A -D"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts

      sleep(10.0)

      ## Query by CreationDate for Sentinel-1B
      cmd = "decODataClient -u borjalf -p perrillo.pwd -t #{currentTime.strftime("%Y-%m-%dT%H:00:00.000")} -q dhus:s1:S1B -D"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts

      sleep(10.0)


      ## Query by CreationDate for GRD products Medium Resolution
      cmd = "decODataClient -u borjalf -p perrillo.pwd -t #{currentTime.strftime("%Y-%m-%dT%H:00:00.000")} -q dhus:s1:S1A_EW_GRDM_1 -D"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts

      ## Query by CreationDate for GRD products Medium Resolution
      cmd = "decODataClient -u borjalf -p perrillo.pwd -t #{currentTime.strftime("%Y-%m-%dT%H:00:00.000")} -q dhus:s1:S1A_EW_OCN -D"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts

   end

   ## ------------------------------------------------------

   def test_command_delay_s1a

      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      require 'Date'

      ## Query by CreationDate for Sentinel-1A
            
      cmd = "decODataClient -u borjalf -p perrillo.pwd -H 2 -q dhus:s1:S1A -L /Users/borja/Projects/dec/data/dhus -D"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts

      sleep(5.0)
   
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------

   def test_command_creation_gnss_s1a

      @@logger.debug("================================================")
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s}")
      
      cmd = "decODataClient -u gnssguest -p gnssguest -c \"2021-01-01T00:00:00.000,2021-05-13T00:00:00.000\" -q dhus:gnss:S1A -L /Users/borja/Projects/dec/data/dhus"
      @@logger.debug(cmd)
      assert(system(cmd), "#{cmd} Datatake query")

      sleep(5.0)
   
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------

   def test_command_creation_gnss_s2a

      @@logger.debug("================================================")
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s}")
      
      cmd = "decODataClient -u gnssguest -p gnssguest -c \"2021-01-01T00:00:00.000,2021-05-13T00:00:00.000\" -q dhus:gnss:S2A -L /Users/borja/Projects/dec/data/dhus"
      @@logger.debug(cmd)
      assert(system(cmd), "#{cmd} Datatake query")
      sleep(5.0)
   
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------

   def test_command_creation_s1a

      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      require 'Date'

      ## Query by CreationDate for Sentinel-1A
      
      cmd = "decODataClient -u borjalf -p perrillo.pwd -c \"2021-04-01T23:50:00.000,2021-04-02T00:00:00.000\" --query dhus:s1:S1A -D -L /tmp"
      
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts

      sleep(5.0)
   
   end
   ## ------------------------------------------------------

   def test_command_creation_s1a_long

      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      require 'Date'

      ## Query by CreationDate for Sentinel-1A
      
      cmd = "decODataClient -u borjalf -p perrillo.pwd -c \"2021-04-02T08:00:00.000,2021-04-02T10:00:00.000\" --query dhus:s1:S1A -D -L /tmp"
      
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts

      sleep(5.0)
   
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------

   def test_command_creation_delay_s1a

      @@logger.debug("================================================")
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s}")

      require 'Date'

      ## Query by CreationDate for Sentinel-1A
      
      cmd = "decODataClient -u borjalf -p perrillo.pwd -d 2 --query dhus:s1:S1A -L /tmp"
      
      @@logger.debug(cmd)
      
      assert(system(cmd), "#{cmd} Datatake query")

      sleep(5.0)
   
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------

   def test_command_creation_delay_s2a

      @@logger.debug("================================================")
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s}")

      require 'Date'

      ## Query by CreationDate for Sentinel-2A
      
      cmd = "decODataClient -u borjalf -p perrillo.pwd -d 2 --query dhus:s2:S2A -L /tmp"
      
      @@logger.debug(cmd)
      
      assert(system(cmd), "#{cmd} Datatake query")

      sleep(5.0)
   
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------

   def test_command_creation_delay_s3a

      @@logger.debug("================================================")
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s}")

      ## Query by CreationDate for Sentinel-2A
      
      cmd = "decODataClient -u borjalf -p perrillo.pwd -d 2 --query dhus:s3:S3A -L /tmp"
      
      @@logger.debug(cmd)
      
      assert(system(cmd), "#{cmd} Datatake query")

      sleep(5.0)
   
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------

   def test_command_creation_delay_s5p

      @@logger.debug("================================================")
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s}")

      ## Query by CreationDate for Sentinel-2A
      
      cmd = "decODataClient -u s5pguest -p s5pguest -d 2 --query dhus_s5p:s5:S5 -L /tmp"
      
      @@logger.debug(cmd)
      
      assert(system(cmd), "#{cmd} Datatake query")

      sleep(5.0)
   
   end

   ## ------------------------------------------------------


   ## ------------------------------------------------------

   ## ( beginPosition:[2021-03-17T23:59:00.000Z TO 2021-03-18T00:00:00.000Z] ) AND ( (platformname:Sentinel-1 AND filename:S1A_*))

   ## S1A_IW_RAW__0SDV_20210317T235918_20210317T235951_037045_045C26_347B

   ## DEC_OPER_OPDHUS_S1A_AUIP_20210422T110156_V20210317T235900_20210318T000050_9_0

   def test_s1a_validity
      @@logger.debug("================================================")
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s}")

      ## Query by ContentDate/Start ContentDate/End for Sentinel-1A
   
      cmd = "decODataClient -u borjalf -p perrillo.pwd -s \"2021-07-17T23:00:00.000,2021-07-18T00:00:00.000\" --query dhus:s1:S1A -D -L /tmp"
      
      @@logger.debug(cmd)
      assert(system(cmd), "#{cmd} Datatake query")

   end
   ## ------------------------------------------------------

   def test_s1b_validity_json
      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      cmd = "decODataClient -u borjalf -p perrillo.pwd -s 2021-03-17T00:00:00.000,2021-03-17T00:20:00.000 -q dhus:s1:S1A -L /Users/borja/Projects/dec/data/dhus -f json -D"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts
   end
   ## ------------------------------------------------------

   def test_s1a_string

      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts


      ## Query by ContentDate/Start ContentDate/End for Sentinel-1A
      
      cmd = "decODataClient -u borjalf -p perrillo.pwd -q dhus:s1:S1A:S1A_WV_SLC__1SSV_20210101 -L /Users/borja/Projects/dec/data/dhus -D"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts

   
   end


   ## ------------------------------------------------------
   def test_s1b_creation

      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      require 'Date'

      ## Query by CreationDate for Sentinel-1B
      
      cmd = "decODataClient -u borjalf -p perrillo.pwd -H 4.5 -q dhus:s1:S1B -L /Users/borja/Projects/dec/data/dhus"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts

      sleep(5.0)
   
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------
   def test_s2b_creation

      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      require 'Date'

      ## Query by CreationDate for Sentinel-1B
      
      cmd = "decODataClient -u borjalf -p perrillo.pwd -H 2 -q dhus:s2:S2B -L /Users/borja/Projects/dec/data/dhus"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts

      sleep(5.0)
   
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------

   def test_s1_2

      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      require 'Date'

      ## Query by CreationDate for Sentinel-1A
      
      currentTime = DateTime.now - (2/24.0)
      
      cmd = "decODataClient -u borjalf -p perrillo.pwd -t #{currentTime.strftime("%Y-%m-%dT%H:00:00.000")} -q dhus:s1:S1A"
      puts cmd
      assert(system(cmd), "#{cmd} Datatake query")
      puts
   
   end

   ## ------------------------------------------------------

#   def test_s2_2
#   
#      ## References:
#      ## https://nokogiri.org/tutorials/searching_a_xml_html_document.html
#   
#      puts "================================================"
#      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
#      puts
#
#      ## Query by Datatake
##       cmd = "decODataClient -u borjalf -p perrillo.pwd -q dhus:s2:l2a:GS2B_20200903T104429_018252_N02.14"
##       puts cmd
##       assert(system(cmd), "#{cmd} Datatake query")
#
#      ## Query by Datatake & Datastrip
#      cmd = "decODataClient -D -u borjalf -p perrillo.pwd -q dhus:s2:l1c:GS2A_20200831T191921_027123_N02.09:20200901T003452"
#      puts cmd
#      assert(system(cmd), "#{cmd} Datatake & Datastrip query")
#
#   end
#
   ## ------------------------------------------------------

   ## ------------------------------------------------------
   def test_download_s2a

      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts
      
      cmd = "rm -f /tmp/S2A*"
      puts cmd
      system(cmd)
      
      cmd = "decODataClient -u borjalf -p perrillo.pwd -q dhus:s2:S2A --creation \"2021-07-01T00:00:00.000,2021-07-01T00:05:03.000\" -L /tmp -r"  # "-D"
      puts cmd
      assert(system(cmd), "#{cmd} query")
      puts

      sleep(5.0)
   
   end

   ## ------------------------------------------------------

   ## ------------------------------------------------------

   def test_contingency
      puts "================================================"
      puts "#{self.class.name.split('::').last}::#{__method__.to_s}"
      puts

      ## Non existing user
      cmd = "decODataClient -u mario -p cipollini -q dhus:s2:l2a:GS2B_20200903T104429_018252_N02.14"
      puts cmd
      assert(!system(cmd), "#{cmd} user non existent I believe")   
   end

   ## ------------------------------------------------------




end


## ===================================================================




