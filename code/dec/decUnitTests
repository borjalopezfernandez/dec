#!/usr/bin/env ruby

#########################################################################
#
# === Ruby source for #DEC_TestCases class
#
# === Written by DEIMOS Space S.L. (bolf)
#
# === Data Exchange Component
# 
# module DEC
#
#########################################################################

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'ctc/FTPClientCommands'
require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'
require 'dec/ReadInterfaceConfig'
require 'dec/ReadConfigOutgoing'
require 'dec/ReadConfigIncoming'

### Preconditions:
### 1 - setup 
### 1.1 - load_config_development
### 1.2 - inventory database is created
##
### 2 - teardown
### 2.1 - purge archive
### 2.2 - inventory database is destroyed
##
###  0  - test_parsers
###  1  - test_dec_config
###  2  - test_commandline_helpers
###  3  - test_decConfigInterface2DB
###  4  - test_decGetFromInterface
###  4.1  - test_decGetFromInterface_LOCAL
###  4.2  - test_decGetFromInterface_WEBDAV
###  4.3  - test_decGetFromInterface_WEBDAV_SECURE => decUnitTests_WEBDAV_SECURE
###  4.4  - test_decGetFromInterface_PARALLEL_HTTP
###  4.5  - test_decGetFromInterface_contingency_1
###  4.6  - test_decGetFromInterface_contingency_2
###  4.7  - test_decGetFromInterface_contingency_3
###  5  - test_decListener
###  6  - test_decGetFiles4Transfer
###  7  - test_decSend2Interface
###  7.1  - test_decSend2Interface_LOCAL
###  8  - test_decDeliverFiles

# Select a single test of the suite

# ruby decUnitTests -n test_my_method 

# Start FTP Server in MacOS Sierra
# launchctl load -w /System/Library/LaunchDaemons/ftp.plist

### MacOS Catalina
## cd $HOME (non root $PWD)
## sudo /usr/local/sbin/pure-ftpd
## PAMAuthentication            yes

# Stop FTP Server
# launchctl unload -w /System/Library/LaunchDaemons/ftp.plist

##To use chroot, vsftpd requires root privileges, so you will need to run
##`sudo vsftpd`.
##You should be certain that you trust any software you grant root privileges.
##
##The vsftpd.conf file must be owned by root or vsftpd will refuse to start:
##  sudo chown root /usr/local/etc/vsftpd.conf
##
##To have launchd start vsftpd now and restart at startup:
##  sudo brew services start vsftpd
##Or, if you don't want/need a background service you can just run:
##  sudo vsftpd


class DECTestCase < Test::Unit::TestCase

   include CUC::DirUtils
   include CTC::FTPClientCommands
   include DEC

   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   #--------------------------------------------------------
   
   Test::Unit.at_start do
      system("clear")
      puts
      puts "======================================"
      puts "DEC Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
            
=begin
      puts
      puts
      puts "THINK IT TWICE  !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      
      if c != 'Y' then
         exit(99)
      end

=end      

      system("\\rm -f /tmp/test_decGetFromInterface_PARALLEL_HTTP")

      @@arrDownloadFiles = [ \
                           "finals.all", \
                           "tai-utc.dat" \
                           ]

      @@arrPushFiles = [ \
                           "S2__OPER_SRA_EDRS_A_PDMC_20180719T030000_V20180719T030000_20180831T233257.EOF", \
                           "S2B_OPER_REP_OPDPC__SGS__20180721T061746_V20180721T061746_20180721T061746.EOF", \
                           "S2B_OPER_REP_OPDPC__MPC__20180721T061746_V20180721T061746_20180721T061746.EOF", \
                           "S2__OPER_REP_ARC____EPA__20180721T110140_V20180721T085229_20180721T085414.EOF", \
                           "S2__OPER_REP_ARC____MPC__20180721T110140_V20180721T085229_20180721T085414.EOF", \
                           "S2__OPER_REP_OPAI___EPA__20180721T130012_V20180721T010002_20180721T130001.EOF", \
                           "S2__OPER_REP_OPAI___MPC__20180721T130012_V20180721T010002_20180721T130001.EOF", \
                           "S2A_OPER_MPL__NPPF__20180720T110000_20180806T140000_0001.TGZ", \
                           "S2__OPER_REP_OPLTAS_UPA__20180722T060002_V20180721T030002_20180722T060002.EOF", \
                           "S2A_OPER_MPL__NPPF__20180820T110000_20180906T140000_0001.TGZ", \
                           "S2A_OPER_MPL__NPPF__20190420T110000_20190426T140000_0001.TGZ", \
                           "S2A_OPER_MPL__NPPF__20170820T110000_20170906T140000_0001.TGZ", \
                           "S2A_OPER_MPL__NPPF__20180920T110000_20180926T140000_0001.TGZ", \
                           "S2A_OPER_MPL__NPPF__20190520T110000_20190526T140000_0001.TGZ", \
                           "S2A_OPER_MPL_ORBPRE_20180720T030221_20180730T030221_0001.EOF", \
                           "S2A_OPER_REP_PASS_E_EDRS_20180720T235700_V20180720T234817_20180720T235645.EOF", \
                           "S2A_OPER_REP_STNACQ_SGS__20180724T123414_V20180724T120243_20180724T121539.EOF", \
                           "S2A_OPER_MPL_SPMPS__PDMC_20180719T090005_V20180720T090000_20180726T090000.EOF", \
                           "S2A_OPER_MPL_FSSGS__PDMC_20180719T090008_V20180720T090000_20180726T090000.EOF", \
                           "S2__OPER_REP_OPLTA__EPA__20180721T130015_V20180721T010002_20180721T130001.EOF", \
                           "S2__OPER_REP_OPLTAS_UPA__20190522T060002_V20190521T030002_20190522T060002.EOF", \
                           "S2__OPER_GIP_PROBA2_MPC__20190502T000212_V20190506T004000_21000101T000000_B00.TGZ", \
                           "S2A_OPER_GIP_PROBAS_MPC__20190307T000207_V20190311T000000_21000101T000000_B00.TGZ", \
                           "S2__OPER_REP_OPDAM1_PDMC_20180721T110501_V20180721T085229_20180721T085229.EOF" \
                           ]


      
      @@conf = DEC_Environment.new
      
      @@conf.wrapper_load_config_development

      puts      
      @@conf.wrapper_print_environment
      puts
      
      
      @@conf.createEnvironmentDirs


      if @@conf.wrapper_check_environment == false then
         puts "DEC environment not suited for unit tests"
         puts
         exit(99)
      end
      
      
   end
   
   ## --------------------------------------------------------
   
   Test::Unit.at_exit do
      # system("decListener -S")
      puts "End of DEC tests"
   end
   
   ## --------------------------------------------------------   
   
   ## Setup before every test-case
   ##
   def setup
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development
      
      decConfig   = DEC::ReadConfigDEC.instance
      reportDir   = decConfig.getReportDir

      system("\\rm -rf #{reportDir}")
      system("\\rm -rf /tmp/dec*")
      system("\\rm -rf /tmp/DEC*.log")

      ftConfig    = ReadInterfaceConfig.instance
      configOut   = ReadConfigOutgoing.instance
      configIn    = ReadConfigIncoming.instance
      arrEnts     = ftConfig.getAllMnemonics

      arrEnts.each{|x|
                  
         bEnabled4Send  = ftConfig.isEnabled4Sending?(x)
         bEnabled4Recv  = ftConfig.isEnabled4Receiving?(x)

         ## --------------------------------------

         if bEnabled4Send == true then
         
            uploadDir = configOut.getUploadDir(x)
         
            if uploadDir == nil or uploadDir == "" then
               next
            end
         
            if uploadDir[0,1] != '/' then
               uploadDir = '~/' + uploadDir
            end
            checkDirectory(uploadDir)

            uploadTemp = configOut.getUploadTemp(x)
         
            if uploadTemp[0,1] != '/' then
               uploadTemp = '~/' + uploadTemp
            end
            checkDirectory(uploadTemp)
         end

         ## --------------------------------------

         if bEnabled4Recv == true then
            arr = configIn.getDownloadDirs(x)
            
            arr.each{|dir|
               
               downloadDir = ""

               if dir[:directory][0,1] != '/' then
                  downloadDir = '~/' + dir[:directory]
               else
                  downloadDir = dir[:directory]
               end
               
               checkDirectory(downloadDir)
            }
            
            ###
            ###
            ### IT IS PENDING TO UPDATE THE CHECK CONFIGURATION TOOL 
            ### TO CKECK THAT AN INTERFACE MIGHT NOT HAVE DEFINED
            ### ANY RULE FOR PULL (OR PUSH)
            
            ## create the files available for pulling
            
            if x.upcase.include?("LOCALHOST") \
               or x.upcase.include?("FILESYSTEM") \
               or x.upcase.include?("WEBDAV") then
               @@arrDownloadFiles.each{|filename|
                  dir = arr[0][:directory]
                  if dir[0,1] != '/' then
                     dir = "~/#{arr[0][:directory]}"
                  end
                  puts "============================"
                  puts "#{filename}    => #{dir}/#{filename}"
                  cmd = "echo \'#{filename} is in da house\' > #{dir}/#{filename}"
                  puts cmd
                  system(cmd)
               }
            end
            
         end

         ## --------------------------------------
      }
      
      
      cmd = "decManageDB -c"
      ret = system(cmd)
      
      if ret == false then
         puts
         puts "Error when creating the DEC inventory ! :-("
         puts
         # exit(99)
      end
      
      cmd = "decConfigInterface2DB -p EXTERNAL"
      
      ret = system(cmd)
      
      if ret == false then
         puts
         puts "Error when adding interface configuration to the database ! :-("
         puts
         # exit(99)
      end
      
   end
   ## --------------------------------------------------------
   ## After every test case

   def teardown
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      @@conf.wrapper_load_config_development

#      cmd = "decManageDB -d"
#      puts cmd
#      ret = system(cmd)
#       
#      if ret == false then
#         puts "Error when dropping the dec inventory ! :-("
#         puts
#         exit(99)
#      end
   end
   ## -------------------------------------------------------------

   ## Need to document all DEC options

   def test_dec_config
      
      require 'dec/ReadConfigDEC'
      
      puts DEC::ReadConfigDEC.instance.getSatPrefix
      puts DEC::ReadConfigDEC.instance.getProjectName
      puts DEC::ReadConfigDEC.instance.getProjectID
      puts DEC::ReadConfigDEC.instance.getMission
      puts DEC::ReadConfigDEC.instance.getOutgoingFilters
      puts DEC::ReadConfigDEC.instance.getReports
      puts DEC::ReadConfigDEC.instance.deleteSourceFiles?
      puts
      puts DEC::ReadConfigDEC.instance.getIncomingFilters
      puts "DeleteUnknownFiles      => #{DEC::ReadConfigDEC.instance.getDeleteUnknown}"
      puts "DeleteDuplicatedFiles   => #{DEC::ReadConfigDEC.instance.getDeleteDuplicated}"
      puts DEC::ReadConfigDEC.instance.getDownloadDirs
   end
   ## -------------------------------------------------------------

   ## dec_incoming_files.xml

   def test_dec_config_incoming
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts
      
      require 'dec/ReadConfigIncoming'
      
      assert(@@conf.wrapper_check_config_files_incoming, "check presence of config for incoming flows")
      
      conf = ReadConfigIncoming.instance
      puts
      puts conf.getAllIncomingFiles
      puts
      puts conf.getAllFileTypes
      puts
      puts conf.getInTrays4Filetype("S2A_*.*")
      puts
      puts conf.getTargetDirs4Filetype("S2A_*.*")
      puts
      puts conf.getInTrayDir("S2ALL")
      puts
      puts conf.getDIMInTray("S2ALL")
      puts
      puts conf.getDIMCompress("S2ALL")
      puts
      puts conf.getDIMCompress("S2A")
      puts
      puts conf.getDIMs4Filetype("S2A_*.*")
      puts
      puts conf.getTargetDirs4Filetype("S2A_*.*")
      puts
      puts conf.isHardLinked?("S2A_OPER_MPL__NPPF__20180820T110000_20180906T140000_0001.TGZ")
      puts conf.isHardLinked?("S2B_OPER_MPL__NPPF__20180820T110000_20180906T140000_0001.TGZ")
      puts conf.isHardLinked?("S2__OPER_REP_OPLTA__EPA__20180721T130015_V20180721T010002_20180721T130001.EOF")
      puts
      puts conf.getIncomingDir("LOCALHOST_NOT_SECURE")
      puts conf.getIncomingDir("LOCALHOST_SECURE")
      puts conf.getIncomingDir("IERS")
      puts
      puts conf.getDownloadDirs("LOCALHOST_NOT_SECURE")
      puts
      puts conf.getDownloadDirs("LOCALHOST_SECURE")
      puts
      arr = conf.getEntitiesSendingIncomingFileName("S2A_OPER_MPL__NPPF__20180820T110000_20180906T140000_0001.TGZ")
      puts arr
      puts
      puts arr.include?("LOCALHOST_SECURE")
      puts arr.include?("LOCALHOST_NOT_SECURE")
      puts
      puts "end of DEC_UnitTests::#{__method__.to_s}"
   end

   ## -------------------------------------------------------------

   ## dec_outgoing_files.xml

   def test_dec_config_outgoing
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts
      
      require 'dec/ReadConfigOutgoing'

      assert(@@conf.wrapper_check_config_files_outgoing, "check presence of config for outgoing flows")
      
      conf = ReadConfigOutgoing.instance
      
      puts conf.getOutgoingDir("LOCALHOST_NOT_SECURE")
      puts
      puts conf.getOutgoingDir("LOCALHOST_SECURE")
      puts
      puts conf.getUploadDir("LOCALHOST_NOT_SECURE")
      puts
      puts conf.getUploadDir("LOCALHOST_SECURE")
      puts
      puts conf.getUploadTemp("LOCALHOST_NOT_SECURE")
      puts
      puts conf.getUploadTemp("LOCALHOST_SECURE")
      puts
      puts conf.getAllOutgoingTypes      
      puts
      puts conf.getAllOutgoingFileNames
      puts
      puts conf.getEntitiesReceivingOutgoingFile("S2A*")
      puts
      puts "-------------------------------------------"
      puts
      puts conf.getEntitiesReceivingOutgoingFile("S2B*")
      puts
      puts "-------------------------------------------"
      puts
      puts conf.getEntitiesReceivingOutgoingFile("GIP_PROBA2")
      puts "-------------------------------------------"
      puts
      puts conf.getDeliveryMethods("LOCALHOST_NOT_SECURE", "GIP_PROBA2")
      puts
      puts conf.getDeliveryMethods("LOCALHOST_SECURE", "GIP_PROBA2")
      puts
      puts conf.getDeliveryMethods("LOCALHOST_NOT_SECURE", "S2A*")
      puts
      puts conf.getDeliveryMethods("LOCALHOST_SECURE", "S2B*")
      puts
      puts
      puts "-------------------------------------------"
      puts
      puts conf.getCompressMethod("LOCALHOST_NOT_SECURE", "GIP_PROBA2")
      puts
      puts conf.getCompressMethod("LOCALHOST_SECURE", "GIP_PROBA2")
      puts
      puts conf.getCompressMethod("LOCALHOST_NOT_SECURE", "S2A*")
      puts
      puts conf.getCompressMethod("LOCALHOST_SECURE", "S2B*")
      puts
      
#      puts                 
      puts "end of DEC_UnitTests::#{__method__.to_s}"
   end

   ## -------------------------------------------------------------

   def test_commandline_helpers
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      @@conf.wrapper_unset_config
      
      cmd = "decConfigInterface2DB"
      assert(!system(cmd), cmd)

      cmd = "decConfigInterface2DB -v"
      assert(system(cmd), cmd)

      cmd = "decConfigInterface2DB -h"
      assert(system(cmd), cmd)

      cmd = "decListener"
      assert(!system(cmd), cmd)

      cmd = "decListener -v"
      assert(system(cmd), cmd)

      cmd = "decListener -h"
      assert(system(cmd), cmd)

      cmd = "decCheckConfig"
      assert(!system(cmd), cmd)

      cmd = "decCheckConfig -v"
      assert(system(cmd), cmd)

      cmd = "decCheckConfig -h"
      assert(system(cmd), cmd)

      cmd = "decGetFromInterface"
      assert(!system(cmd), cmd)

      cmd = "decGetFromInterface -v"
      assert(system(cmd), cmd)

      cmd = "decGetFromInterface -h"
      assert(system(cmd), cmd)

      cmd = "decGetFiles4Transfer -v"
      assert(system(cmd), cmd)

      cmd = "decGetFiles4Transfer -u"
      assert(system(cmd), cmd)

      cmd = "decGetFiles4Transfer -h"
      assert(system(cmd), cmd)

      cmd = "decSend2Interface -v"
      assert(system(cmd), cmd)

      cmd = "decSend2Interface -m non_existing_if"
      assert(!system(cmd), cmd)

      cmd = "decCheckSent -v"
      assert(system(cmd), cmd)

      cmd = "decCheckSent -h"
      assert(system(cmd), cmd)


      dec_tmp = ENV['DEC_TMP']

      ENV.delete('DEC_TMP')
      
      cmd = "decSend2Interface -m LOCALHOST_NOT_SECURE -O"
      assert(!system(cmd), cmd)
      
      ENV['DEC_TMP'] = dec_tmp

      cmd = "decDeliverFiles -v"
      assert(system(cmd), cmd)

      cmd = "decDeliverFiles -u"
      assert(system(cmd), cmd)

      cmd = "decDeliverFiles -h"
      assert(system(cmd), cmd)

      ENV.delete('DEC_TMP')
      
      cmd = "decDeliverFiles"
      assert(!system(cmd), cmd)


      @@conf.wrapper_load_config_development
   end
   ## --------------------------------------------------------

   def test_parsers
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts
            
      ftReadConf = ReadInterfaceConfig.instance
      ftReadConf.update
      ftpRecv    = ftReadConf.getFTPServer("LOCALHOST_NOT_SECURE")
      
      puts
      puts ftpRecv
      puts

      ftReadConf = ReadInterfaceConfig.instance
      ftReadConf.update
      ftpRecv    = ftReadConf.getFTPServer("WEBDAV_SECURE")
      
      puts
      puts ftpRecv
      puts

      puts ftReadConf.isVerifyPeerSSL?("WEBDAV_SECURE")
      puts ftReadConf.isVerifyPeerSSL?("WEBDAV")

      # ftpSend    = ftReadConf.getFTPServer("LOCALHOST_NOT_SECURE")
   end
   ## ---------------------------------------------------------

   def test_decValidateConfig
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "decValidateConfig -v"
      assert(system(cmd), cmd)

      cmd = "decValidateConfig -h"
      assert(system(cmd), cmd)

      cmd = "decValidateConfig -e"
      assert(system(cmd), cmd)

      cmd = "decValidateConfig -i"
      assert(system(cmd), cmd)

      cmd = "decValidateConfig -o"
      assert(system(cmd), cmd)

      cmd = "decValidateConfig -m"
      assert(system(cmd), cmd)

      cmd = "decValidateConfig -l"
      assert(system(cmd), cmd)

      cmd = "decValidateConfig -g"
      assert(system(cmd), cmd)

      cmd = "decValidateConfig -a"
      assert(system(cmd), cmd)

      cmd = "decValidateConfig -X /tmp/dec_config -N decUnitTests@localhost"
      assert(system(cmd), cmd)

      assert(File.exist?("/tmp/dec_config/dec_interfaces.xml"),         "Extracted dec_interfaces.xml")
      assert(File.exist?("/tmp/dec_config/dec_config.xml"),             "Extracted dec_config.xml")
      assert(File.exist?("/tmp/dec_config/dec_incoming_files.xml"),     "Extracted dec_incoming_files.xml")
      
   end
   ## -----------------------------------------------------------

   def test_decCheckConfig
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      ret = system(cmd)      

      cmd = "decCheckConfig -a -e LOCALHOST_NOT_SECURE"
      puts cmd
      puts
      assert(system(cmd), cmd)

      cmd = "decCheckConfig -a -e LOCALHOST_SECURE"
      puts cmd
      puts
      assert(system(cmd), cmd)

      cmd = "decCheckConfig -a -e FILESYSTEM"
      puts cmd
      puts
      assert(system(cmd), cmd)

      cmd = "decCheckConfig -a -e LOCALHOST_NOT_SECURE --nodb"
      puts cmd
      puts
      assert(system(cmd), cmd)

      cmd = "decCheckConfig -h"
      puts cmd
      puts
      assert(system(cmd), cmd)
      
      cmd = "decCheckConfig -v"
      puts cmd
      puts      
      assert(system(cmd), cmd)

      cmd = "decCheckConfig -o"
      puts cmd
      puts      
      assert(system(cmd), cmd)

      cmd = "decCheckConfig -i"
      puts cmd
      puts
      assert(system(cmd), cmd)

      cmd = "decCheckConfig -l"
      puts cmd
      puts
      assert(system(cmd), cmd)

      ## -----------------------------------------
      ## test are not performed for the flag --all since
      ## the access slot to the interface IERS is not granted
      ## resulting into error
#      cmd = "decCheckConfig -a --nodb"
#      puts cmd
#      puts
#      assert(system(cmd), cmd)
#
#      cmd = "decCheckConfig -a"
#      puts cmd
#      puts
#      assert(system(cmd), cmd)
      ## -----------------------------------------
#      
#      # only mail delivery is checked so far
#      cmd = "decCheckConfig -m"
#      assert(system(cmd), cmd)
#
#
#      cmd = "decCheckConfig -t"
#      assert(system(cmd), cmd)

      
   end
   ## -------------------------------------------------------------

   def test_decConfigInterface2DB
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development

      cmd = "decManageDB -v"
      assert(system(cmd), cmd)

      cmd = "decConfigInterface2DB -v"
      assert(system(cmd), cmd)
            
      cmd = "decConfigInterface2DB --add IF_1"
      assert(system(cmd), "decConfigInterface2DB --add IF_1")

      cmd = "decConfigInterface2DB -p EXTERNAL"
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")
   end
   ## --------------------------------------------------------
   ##

   def test_decGetFromInterface
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      @@conf.wrapper_load_config_development

#      puts
#      puts
#      @@conf.print_environment
#      puts
#      puts

      checkDirectory(ReadConfigDEC.instance.getReportDir)
      
      FileUtils.rm_f("#{ReadConfigDEC.instance.getReportDir}/*")

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")


      dec_tmp = ENV['DEC_TMP']

      ENV.delete('DEC_TMP')
      
      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE -l --nodb"
      puts cmd
      assert(!system(cmd), cmd)
      
      ENV['DEC_TMP'] = dec_tmp

      inConfig          = ReadConfigIncoming.instance
      @finalDir         = inConfig.getIncomingDir("LOCALHOST_NOT_SECURE")
      
      checkDirectory(@finalDir)

      # finals.all / tai-utc.dat
            
      FileUtils.rm_f("#{@finalDir}/finals.all")
      FileUtils.rm_f("#{@finalDir}/tai-utc.dat")
                  
      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE -l --nodb"
      puts cmd
      assert(system(cmd), cmd)
      
      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE --nodb --no-intray"
      puts cmd
      assert(system(cmd), cmd)

      assert(File.exist?("#{@finalDir}/finals.all"),  "retrieved finals.all")
      assert(File.exist?("#{@finalDir}/tai-utc.dat"), "retrieved tai-utc.dat")
      FileUtils.rm_f("#{@finalDir}/finals.all")
      FileUtils.rm_f("#{@finalDir}/tai-utc.dat")

      prevDir = Dir.pwd
      
      # check presence of generated report file
      Dir.chdir(ReadConfigDEC.instance.getReportDir)
      arr = Dir["S2*_OPER_DEC_F_RECV*"]
      assert(!arr.empty?, "report directory is not empty")
      FileUtils.rm_f("#{ReadConfigDEC.instance.getReportDir}/*")
      
      Dir.chdir(prevDir)

      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE --no-intray"
      puts cmd
      assert(system(cmd), cmd)

      assert(File.exist?("#{@finalDir}/finals.all"),  "retrieved finals.all")
      assert(File.exist?("#{@finalDir}/tai-utc.dat"), "retrieved tai-utc.dat")
      FileUtils.rm_f("#{@finalDir}/finals.all")
      FileUtils.rm_f("#{@finalDir}/tai-utc.dat")

      # check presence of generated report file
      Dir.chdir(ReadConfigDEC.instance.getReportDir)
      arr = Dir["S2*_OPER_DEC_F_RECV*"]
      assert(!arr.empty?, "report directory is not empty")
      FileUtils.rm_f("#{ReadConfigDEC.instance.getReportDir}/*")
      
      cmd = "cat #{ReadConfigDEC.instance.getReportDir}/#{arr[0]}"
      puts cmd
      system(cmd)
      
      Dir.chdir(prevDir)

      cmd = "decStats -v"
      assert(system(cmd), cmd)

      cmd = "decStats -f non_received_file.kk"
      puts cmd
      assert(!system(cmd), cmd)
      
      cmd = "decStats -f finals.all"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decStats -f tai-utc.dat"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decStats"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE --no-intray"
      puts cmd
      assert(system(cmd), cmd)

      assert(!File.exist?("#{@finalDir}/finals.all"),    "should not retrieve twice finals.all")
      assert(!File.exist?("#{@finalDir}/tai-utc.dat"),   "should not retrieve twice tai-utc.dat")

      cmd = "decStats -H 1"
      puts cmd
      assert(system(cmd), cmd)
      
      cmd = "decStats -H 2"
      puts cmd
      assert(system(cmd), cmd)

      decConfig   = DEC::ReadConfigDEC.instance
      reportDir   = decConfig.getReportDir

      arr = Dir["#{reportDir}/*"]
      assert(arr.length>0, "delivery report generation")

      ## execute a new iteration of decGetFromInterface without flag --no-intray
      ## to disseminate generated reports from previous iteration

      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE"
      puts cmd
      assert(system(cmd), cmd)

      arr = Dir["/tmp/DEC*.log"]
      
      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}") 

   end
   ## --------------------------------------------------------

   ## verification of the protocol LOCAL using interface "FILESYSTEM"

   def test_decGetFromInterface_LOCAL
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")

      inConfig          = ReadConfigIncoming.instance
      @finalDir         = inConfig.getIncomingDir("FILESYSTEM")
      
      checkDirectory(@finalDir)

      # finals.all / tai-utc.dat
            
      FileUtils.rm_f("#{@finalDir}/finals.all")
      FileUtils.rm_f("#{@finalDir}/tai-utc.dat")

      cmd = "decGetFromInterface -m FILESYSTEM --no-intray"
      puts cmd
      assert(system(cmd), cmd)

      assert(File.exist?("#{@finalDir}/finals.all"),  "retrieved finals.all")
      assert(File.exist?("#{@finalDir}/tai-utc.dat"), "retrieved tai-utc.dat")

      cmd = "decStats -f finals.all"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decStats -f tai-utc.dat"
      puts cmd
      assert(system(cmd), cmd)

      FileUtils.rm_f("#{@finalDir}/finals.all")
      FileUtils.rm_f("#{@finalDir}/tai-utc.dat")

      arr = Dir["/tmp/DEC*.log"]
      
      cmd = "grep WARN #{arr[0]}"
      puts cmd
      assert(system(cmd), "WARN should be raised for previously received files  #{__method__.to_s}") 
            
      
      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}") 
   
   end
   
   ## --------------------------------------------------------
   
   ## verification of the protocol WEBDAV over HTTP using interface "WEBDAV"
   
   def test_decGetFromInterface_WEBDAV
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      puts cmd
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")

      cmd = "decCheckConfig -e WEBDAV -i"
      puts cmd
      assert(system(cmd), cmd)

      inConfig          = ReadConfigIncoming.instance
      @finalDir         = inConfig.getIncomingDir("WEBDAV")
            
      checkDirectory(@finalDir)

      FileUtils.rm_f("#{@finalDir}/finals.all")
      FileUtils.rm_f("#{@finalDir}/tai-utc.dat")

      cmd = "decGetFromInterface -m WEBDAV -l"
      puts cmd
      assert(system(cmd), cmd)
      
      puts
      puts
      
      cmd = "decGetFromInterface -m WEBDAV"
      puts cmd
      assert(system(cmd), cmd)

      configIn          = ReadConfigIncoming.instance
      dirDissemination  = configIn.getInTrayDir("GPS")

      assert(File.exist?("#{dirDissemination}/finals.all"),  "retrieved finals.all")
      assert(File.exist?("#{dirDissemination}/tai-utc.dat"), "retrieved tai-utc.dat")

      # --------------------------------    
      # Verify that files have been deleted in the interface upon download
      configIn    = ReadConfigIncoming.instance
      arr         = configIn.getDownloadDirs("WEBDAV")
        
      arr.each{|dir|
               
         downloadDir = ""

         if dir[:directory][0,1] != '/' then
            downloadDir = '~/' + dir[:directory]
         else
            downloadDir = dir[:directory]
         end
         
         puts "Checking #{downloadDir}"
         
         assert(!File.exist?("#{downloadDir}/finals.all"),  "checked removed finals.all")
         assert(!File.exist?("#{downloadDir}/tai-utc.dat"),  "checked removed tai-utc.dat")
      }
      # --------------------------------      


      cmd = "decStats -f finals.all"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decStats -f tai-utc.dat"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decStats"
      puts cmd
      assert(system(cmd), cmd)
      
      # --------------------------------    
      
      FileUtils.rm_f("#{@finalDir}/finals.all")
      FileUtils.rm_f("#{@finalDir}/tai-utc.dat")

      
      cmd = "decGetFromInterface -m WEBDAV --no-intray"
      puts cmd
      assert(system(cmd), cmd)
      
      assert(!File.exist?("#{@finalDir}/finals.all"),  "should not retrieve finals.all")
      assert(!File.exist?("#{@finalDir}/tai-utc.dat"), "should not retrieve tai-utc.dat")
      
      arr = Dir["/tmp/DEC*.log"]
      
      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}") 


   end   
   
   ## --------------------------------------------------------
   

   
   ## --------------------------------------------------------   
   ##   
   ## Performance test with the protocol WEBDAV over HTTP using interface "PARALLEL_HTTP"
   ##
   ## results are written in /tmp/test_decGetFromInterface_PARALLEL_HTTP
   ##
   
   data("SEPARATOR",     ["Start of the Test",     0,   0,   0,    false])

   data("1",     ["10files_10GB_2Slots_NoDB",      10,   10240,   2,     true])
   data("2",     ["10files_10GB_4Slots_NoDB",      10,   10240,   4,     true])
   data("3",     ["10files_10GB_6Slots_NoDB",      10,   10240,   6,     true])
   data("4",     ["10files_10GB_8Slots_NoDB",      10,   10240,   8,     true])
   data("5",     ["10files_10GB_10Slots_NoDB",     10,   10240,   10,    true])
  
   data("SEPARATOR",     ["END OF 10 FILES of 10 GBs NoDB",     0,   0,   0,    false])

   data("b1",     ["10files_10GB_2Slots_NoDB",      10,   10240,   2,     false])
   data("b2",     ["10files_10GB_4Slots_NoDB",      10,   10240,   4,     false])
   data("b3",     ["10files_10GB_6Slots_NoDB",      10,   10240,   6,     false])
   data("b4",     ["10files_10GB_8Slots_NoDB",      10,   10240,   8,     false])
   data("b5",     ["10files_10GB_10Slots_NoDB",     10,   10240,   10,    false])
  
   data("SEPARATOR",     ["END OF 10 FILES of 10 GBs DB Recording",     0,   0,   0,    false])

   data("6",     ["50files_10GB_2Slots_NoDB",      50,   10240,   2,     true])
   data("7",     ["50files_10GB_4Slots_NoDB",      50,   10240,   4,     true])
   data("8",     ["50files_10GB_6Slots_NoDB",      50,   10240,   6,     true])
   data("9",     ["50files_10GB_8Slots_NoDB",      50,   10240,   8,     true])   
   data("10",    ["50files_10GB_10Slots_NoDB",     50,   10240,   10,    true])   

   data("SEPARATOR",     ["END OF 50 FILES of 10 GBs NoDB",     0,   0,   0,    false])
   
   data("b6",     ["50files_10GB_2Slots_NoDB",      50,   10240,   2,     false])
   data("b7",     ["50files_10GB_4Slots_NoDB",      50,   10240,   4,     false])
   data("b8",     ["50files_10GB_6Slots_NoDB",      50,   10240,   6,     false])
   data("b9",     ["50files_10GB_8Slots_NoDB",      50,   10240,   8,     false])   
   data("b10",    ["50files_10GB_10Slots_NoDB",     50,   10240,   10,    false])   

   data("SEPARATOR",     ["END OF 50 FILES of 10 GBs DB Recording",     0,   0,   0,    false])

   data("11",    ["100files_10GB_2Slots_NoDB",      100,   10240,   2,     true])
   data("12",    ["100files_10GB_4Slots_NoDB",      100,   10240,   4,     true])
   data("13",    ["100files_10GB_6Slots_NoDB",      100,   10240,   6,     true])
   data("14",    ["100files_10GB_8Slots_NoDB",      100,   10240,   8,     true])   
   data("15",    ["100files_10GB_10Slots_NoDB",     100,   10240,   10,    true])   

   data("SEPARATOR",     ["END OF 100 FILES of 10 GBs NoDB",     0,   0,   0,    false])

   data("11",    ["100files_10GB_2Slots_NoDB",      100,   10240,   2,     false])
   data("12",    ["100files_10GB_4Slots_NoDB",      100,   10240,   4,     false])
   data("13",    ["100files_10GB_6Slots_NoDB",      100,   10240,   6,     false])
   data("14",    ["100files_10GB_8Slots_NoDB",      100,   10240,   8,     false])   
   data("15",    ["100files_10GB_10Slots_NoDB",     100,   10240,   10,    false])   

   data("SEPARATOR",     ["END OF 100 FILES of 10 GBs DB Recording",     0,   0,   0,    false])

   data("1",     ["10files_100GB_2Slots_NoDB",      10,   102400,   2,     false])
   data("2",     ["10files_100GB_4Slots_NoDB",      10,   102400,   4,     false])
   data("3",     ["10files_100GB_6Slots_NoDB",      10,   102400,   6,     false])
   data("4",     ["10files_100GB_8Slots_NoDB",      10,   102400,   8,     false])
   data("5",     ["10files_100GB_10Slots_NoDB",     10,   102400,   10,    false])
  
   data("SEPARATOR",     ["END OF 10 FILES of 100 GBs",     0,   0,   0,    false])
   
   def test_decGetFromInterface_PARALLEL_HTTP(params)

      label, numFiles, numBlocks, numSlots, noDB = params
                                 
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s} => #{label}"
      puts

      if numFiles == 0 then
         cmd = "echo \"#{label}\" >> /tmp/test_decGetFromInterface_PARALLEL_HTTP"
         puts cmd
         system(cmd)
         return
      end

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      puts cmd
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")

      cmd = "decCheckConfig -e PARALLEL_HTTP -i"
      puts cmd
      assert(system(cmd), cmd)

      configIn          = ReadConfigIncoming.instance
      @finalDir         = configIn.getIncomingDir("PARALLEL_HTTP")
            
      checkDirectory(@finalDir)

      arr = configIn.getDownloadDirs("PARALLEL_HTTP")
      
      downloadDir = ""
      
      if arr[0][:directory][0,1] != '/' then
         downloadDir = '/Users/borja/' + arr[0][:directory]
      else
         downloadDir = arr[0][:directory]
      end

      ## -----------------------------------------
      ## Create test files
      
      # 1 GB
      # dd if=/dev/zero of=testfile bs=1024 count=1024000
      
      # 100 MB
      # dd if=/dev/zero of=testfile bs=1024 count=102400
      
      1.upto(numFiles) do |i|
         filename = "test_http_#{i}.bin"
         cmd = "dd if=/dev/urandom of=#{downloadDir}/#{filename} bs=1024 count=#{numBlocks}"
         puts cmd
         system(cmd)
      end

      ## -----------------------------------------

      ## Download the files
      
      puts
      puts
      puts label
      
      cmd = "decGetFromInterface -m PARALLEL_HTTP --no-intray -B -P #{numSlots}"
      if noDB == true then
         cmd = "decGetFromInterface -m PARALLEL_HTTP --no-intray -B -P #{numSlots} --nodb"
      end
      puts
      puts cmd
      puts
      assert(system(cmd), cmd)

      ## Checking files presence at final dir 

      1.upto(numFiles) do |i|
         filename = "test_http_#{i}.bin"
         assert(File.exist?("#{@finalDir}/#{filename}"), "Checking #{filename} presence at #{@finalDir}")
         FileUtils.rm_f("#{@finalDir}/#{filename}")
      end
     
      arr = Dir["/tmp/DEC*.log"]
     
      cmd = "grep \"Complete download\" #{arr[0]} >> /tmp/test_decGetFromInterface_PARALLEL_HTTP"
      puts cmd
      system(cmd)
     
      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}") 
      
   end
   ## --------------------------------------------------------

   ## --------------------------------------------------------   
   ##   
   ## Contingency test for decGetFromInterface consistency into 
   ## @finalDir of a given interface
   ## 

   def test_decGetFromInterface_contingency_1
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")

      inConfig          = ReadConfigIncoming.instance
      @finalDir         = inConfig.getIncomingDir("LOCALHOST_NOT_SECURE")
      
      checkDirectory(@finalDir)
      
      ## remove write permisions into final directory to force errors   
      puts
      puts "Changing file permissions to #{@finalDir}"
      puts
      
      FileUtils.chmod("a-w", @finalDir)

      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE"
      puts cmd
      assert(system(cmd), cmd)

      arr = Dir["/tmp/DEC*.log"]
      
      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(system(cmd), "ERROR should be logged in #{__method__.to_s}") 

      system("\\rm -rf /tmp/DEC*.log")

      ## restoring write permisions into final directory to avoid errors   
      puts
      puts "Restoring file permissions to #{@finalDir}"
      puts
      
      FileUtils.chmod_R("u+w", @finalDir)

      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE"
      puts cmd
      assert(system(cmd), cmd)

#      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE"
#      puts cmd
#      assert(system(cmd), cmd)

      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")
      
   end

   ## --------------------------------------------------------

   ## --------------------------------------------------------   
   ##   
   ## Contingency test for decGetFromInterface consistency during 
   ## local dissemination into intrays (none of them is writable)
   ## 

   def test_decGetFromInterface_contingency_2
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")

      configIn          = ReadConfigIncoming.instance
      dirDissemination  = configIn.getInTrayDir("S2A")

      checkDirectory(dirDissemination)

      ## remove write permisions into dissemination directory to force errors   
      puts
      puts "Changing file permissions to #{dirDissemination}"
      puts
      
      FileUtils.chmod("a-w", dirDissemination)

      configIn          = ReadConfigIncoming.instance
      dirDissemination  = configIn.getInTrayDir("GPS")

      checkDirectory(dirDissemination)

      ## remove write permisions into dissemination directory to force errors   
      puts
      puts "Changing file permissions to #{dirDissemination}"
      puts
      
      FileUtils.chmod("a-w", dirDissemination)

      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE"
      puts cmd
      assert(system(cmd), cmd)

      arr = Dir["/tmp/DEC*.log"]
      
      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(system(cmd), "ERROR should be logged in #{__method__.to_s}") 
      
      ## checking presence of files into final dir previous local disseminatino
      @finalDir         = configIn.getIncomingDir("LOCALHOST_NOT_SECURE")
      
      assert(File.exist?("#{@finalDir}/finals.all"), "finals.all preserved in #{@finalDir}")
      assert(File.exist?("#{@finalDir}/tai-utc.dat"), "tai-utc.dat preserved in #{@finalDir}")

      dirGPS  = configIn.getInTrayDir("GPS")
      dirS2A  = configIn.getInTrayDir("S2A")

      ## remove write permisions into dissemination directory to force errors   
      puts
      puts "Restoring file permissions to #{dirS2A}"
      puts
      FileUtils.chmod("u+w", dirS2A)
      
      ## remove write permisions into dissemination directory to force errors   
      puts
      puts "Restoring file permissions to #{dirGPS}"
      puts
      FileUtils.chmod("u+w", dirGPS)

      system("\\rm -rf /tmp/DEC*.log")

      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(!system(cmd), "no ERROR should be logged in #{__method__.to_s}") 

      assert(!File.exist?("#{@finalDir}/finals.all"), "finals.all removed from #{@finalDir}")
      assert(!File.exist?("#{@finalDir}/tai-utc.dat"), "tai-utc.dat removed from #{@finalDir}")


      assert(File.exist?("#{dirGPS}/finals.all"), "finals.all disseminated to #{dirGPS}")
      assert(File.exist?("#{dirGPS}/tai-utc.dat"), "tai-utc.dat disseminated to #{dirGPS}")
            
      assert(File.exist?("#{dirS2A}/finals.7z"), "finals.all disseminated to #{dirS2A}")
      assert(File.exist?("#{dirS2A}/tai-utc.7z"), "tai-utc.dat disseminated to #{dirS2A}")

   end
   ## --------------------------------------------------------

   ## --------------------------------------------------------   
   ##   
   ## Contingency test for decGetFromInterface consistency during 
   ## local dissemination into intrays (one of them is writable)
   ## 

   def test_decGetFromInterface_contingency_3
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")

      configIn          = ReadConfigIncoming.instance
      dirDissemination  = configIn.getInTrayDir("S2A")

      checkDirectory(dirDissemination)

      ## remove write permisions into dissemination directory to force errors   
      puts
      puts "Changing file permissions to #{dirDissemination}"
      puts
      
      FileUtils.chmod("a-w", dirDissemination)

      configIn          = ReadConfigIncoming.instance
      dirDissemination  = configIn.getInTrayDir("GPS")

      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE"
      puts cmd
      assert(system(cmd), cmd)

      arr = Dir["/tmp/DEC*.log"]
      
      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(system(cmd), "ERROR should be logged in #{__method__.to_s}") 

      ## remove write permisions into dissemination directory to force errors   
      puts
      puts "Restoring file permissions to #{dirDissemination}"
      puts

      FileUtils.chmod("u+w", dirDissemination)
      
      ## checking presence of files into final dir previous local disseminatino
      @finalDir         = configIn.getIncomingDir("LOCALHOST_NOT_SECURE")
      assert(File.exist?("#{@finalDir}/finals.all"), "finals.all preserved in #{@finalDir}")
      assert(File.exist?("#{@finalDir}/tai-utc.dat"), "tai-utc.dat preserved in #{@finalDir}")
       
      dirGPS  = configIn.getInTrayDir("GPS")
      dirS2A  = configIn.getInTrayDir("S2A")

      ## remove write permisions into dissemination directory to force errors   
      puts
      puts "Restoring file permissions to #{dirS2A}"
      puts
      FileUtils.chmod("u+w", dirS2A)
      
      ## remove write permisions into dissemination directory to force errors   
      puts
      puts "Restoring file permissions to #{dirGPS}"
      puts
      FileUtils.chmod("u+w", dirGPS)

      system("\\rm -rf /tmp/DEC*.log")

      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(!system(cmd), "no ERROR should be logged in #{__method__.to_s}") 

      assert(!File.exist?("#{@finalDir}/finals.all"), "finals.all removed from #{@finalDir}")
      assert(!File.exist?("#{@finalDir}/tai-utc.dat"), "tai-utc.dat removed from #{@finalDir}")


      assert(File.exist?("#{dirGPS}/finals.all"), "finals.all disseminated to #{dirGPS}")
      assert(File.exist?("#{dirGPS}/tai-utc.dat"), "tai-utc.dat disseminated to #{dirGPS}")
            
      assert(File.exist?("#{dirS2A}/finals.7z"), "finals.all disseminated to #{dirS2A}")
      assert(File.exist?("#{dirS2A}/tai-utc.7z"), "tai-utc.dat disseminated to #{dirS2A}")
      
   end


   ## --------------------------------------------------------


   def test_decGetFromInterface2
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      @@conf.wrapper_load_config_development

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")

      inConfig          = ReadConfigIncoming.instance
      @finalDir         = inConfig.getIncomingDir("LOCALHOST_NOT_SECURE")
      
      checkDirectory(@finalDir)
            
      FileUtils.rm_f("#{@finalDir}/finals.all")
      FileUtils.rm_f("#{@finalDir}/tai-utc.dat")

      cmd = "decGetFromInterface -m LOCALHOST_NOT_SECURE"
      puts cmd
      assert(system(cmd), cmd)
      
      arr = Dir["/tmp/DEC*.log"]
      
      cmd = "grep \"Complete download\" #{arr[0]}"
      puts `#{cmd}`
            
      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}") 
      
      
   end
   ## --------------------------------------------------------


   def test_decListener
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "decListener -v"
      assert(system(cmd), cmd)

      cmd = "decListener -s non_existing_interface"
      assert(!system(cmd), cmd)
   
      dec_tmp = ENV['DEC_TMP']
      ENV.delete('DEC_TMP')
      
      cmd = "decListener -m LOCALHOST_NOT_SECURE --nodb -D -i 60"
      assert(!system(cmd), cmd)
      
      ENV['DEC_TMP'] = dec_tmp
      
      cmd = "decListener -m LOCALHOST_NOT_SECURE --nodb -D -i 60"
      assert(system(cmd), cmd)
   
      sleep(10)

      cmd = "decListener -s LOCALHOST_NOT_SECURE"
      assert(system(cmd), cmd)

      sleep(10)
      
      cmd = "decListener -c"
      assert(!system(cmd), cmd)
       
      cmd = "decListener -S"
      assert(system(cmd), cmd)
      
      sleep(10)
  
      cmd = "decListener -a"
      assert(system(cmd), cmd)

      sleep(10)

      cmd = "decListener -a -R"
      assert(system(cmd), cmd)

      sleep(10)
            
      cmd = "decListener -S"
      assert(system(cmd), cmd)
      
      sleep(20)
      
   end

   ## -------------------------------------------------------------

   def test_decGetFiles4Transfer
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      sourceDir = ENV['DEC_DELIVERY_ROOT']
      checkDirectory(sourceDir)
      puts "SOURCE DIR => #{sourceDir}"
      
      checkDirectory("#{sourceDir}/GIP_PROBA2")

      aFilename = "S2B_OPER_GIP_PROBAS_MPC__20190610T000207_V20190610T000000_21000101T000000_B00.EOF"
      system("echo \'#{aFilename}\' > #{sourceDir}/GIP_PROBA2/#{aFilename}")

      @@arrPushFiles.each{|filename|
         puts filename
         system("echo \'#{filename}\' > #{sourceDir}/#{filename}")
      }

      cmd = "decCheckConfig -o"
      assert(system(cmd), cmd)

      cmd = "decGetFiles4Transfer -l -D"
      assert(system(cmd), cmd)

      cmd = "decGetFiles4Transfer -D"
      assert(system(cmd), cmd)

   end
   
   ## --------------------------------------------------------
   ##
   ## test for pushing files towards the interfaces
   ##
   ## 
   
   def test_decSend2Interface
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      ret = system(cmd)

      cmd = "decSend2Interface -S"
      assert(system(cmd), cmd)

      cmd = "decSend2Interface -m non_existing_if"
      assert(!system(cmd), cmd)

      test_decGetFiles4Transfer

      cmd = "decSend2Interface -m LOCALHOST_NOT_SECURE -O -D"
      puts
      puts cmd
      puts
      assert(system(cmd), cmd)

      cmd = "decStats"
      assert(system(cmd), cmd)

      cmd = "decCheckSent -m LOCALHOST_NOT_SECURE -t"
      assert(system(cmd), cmd)
      puts      

      decConfig   = DEC::ReadConfigDEC.instance
      reportDir   = decConfig.getReportDir
      arr = Dir["#{reportDir}/*"]
      assert(arr.length>0, "delivery report generation")

      cmd = "decSend2Interface -m LOCALHOST_SECURE -O"
      assert(system(cmd), cmd)

      cmd = "decStats"
      assert(system(cmd), cmd)

      cmd = "decCheckSent -m LOCALHOST_SECURE -t"
      assert(system(cmd), cmd)
      puts      

      arr = Dir["/tmp/DEC*.log"]
      
      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}") 

   end

   ## -------------------------------------------------------------

   ## test for pushing files towards the interfaces
   ##
   ## 
   
   def test_decDeliverFiles

      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      require 'dec/ReadConfigDEC'
      decConfig   = DEC::ReadConfigDEC.instance
      reportDir   = decConfig.getReportDir

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      ret = system(cmd)

      sourceDir = ENV['DEC_DELIVERY_ROOT']
      
      checkDirectory(sourceDir)
      puts "SOURCE DIR => #{sourceDir}"
      
      @@arrPushFiles.each{|filename|
         puts filename
         system("echo \'#{filename}\' > #{sourceDir}/#{filename}")
      }

      cmd = "decDeliverFiles -D"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decCheckSent -m LOCALHOST_SECURE -t"
      assert(system(cmd), cmd)
      puts      

      cmd = "decCheckSent -m LOCALHOST_NOT_SECURE -t"
      assert(system(cmd), cmd)
      puts      

      cmd = "decStats"
      assert(system(cmd), cmd)

   end
   ## -------------------------------------------------------------

   ## test for pushing files with LOCAL protocol towards the interfaces
   ##
   ##

   def test_decSend2Interface_LOCAL

      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      ret = system(cmd)

      sourceDir = ENV['DEC_DELIVERY_ROOT']
      
      checkDirectory(sourceDir)
      puts "SOURCE DIR => #{sourceDir}"

      ## for LOCAL protocol the same files for download are used
      
      @@arrDownloadFiles.each{|filename|
         puts filename
         system("echo \'#{filename}\' > #{sourceDir}/#{filename}")
      }

      cmd = "decGetFiles4Transfer"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decSend2Interface --mnemonic FILESYSTEM"
      puts cmd
      assert(system(cmd), cmd)

#      cmd = "decDeliverFiles -D"
#      puts cmd
#      assert(system(cmd), cmd)

      cmd = "decCheckSent -m FILESYSTEM -t"
      assert(system(cmd), cmd)
      puts      

      cmd = "decStats"
      assert(system(cmd), cmd)

   end

   ## -------------------------------------------------------------

   def test_decNotify2Interface
      cmd = "decNotify2Interface -v"
      assert(system(cmd), cmd)

   end
   ## -------------------------------------------------------------

end


## =====================================================================

