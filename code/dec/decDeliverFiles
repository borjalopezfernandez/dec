#!/usr/bin/env ruby

# == Synopsis
#
# This is a DEC command line tool that delivers all files from a given repository.
# It invokes decGetFiles4Transfer to fetch the files to be pushed towards the 
# configured interfaces and file rules.
# 
# This command can be used in order to send a given file just once 
# (for each delivery method: sftp, ftp, email) for a given Interface. 
# Use "-O" flag to enable this behaviour.
#
# -O flag:
# The "ONCE" flag registers in the Inventory all the files sent. As well it checks
# prior to the delivery whether a files has been previously sent or not to avoid 
# delivering it twice to the same Interface.
#
# -N flag:
# The "NOARCHIVE" flag skips the file(s) retrieval from Archive step.
# It may be useful for some deliveries retries in case of previous errors when
# no additional files are desired.
# As well when "external" processes using this command configure by themselves the
# files to be delivered.
#
# -p flag:
# The "params" flag allows when registering in the database, fill up some fields
# with the values specified.
#
# -R flag:
# The Report flag creates a Report with all files transferred to a given I/F.
#
# -K flag:      
# The Kill flag cancels an on-going delivery. It sends SIGTERM signal to all
# existing decSend2Interface processes running.
#
# -T flag:
# The timeout flag is used to set a timeout time, that when expired sends a SIGTERM to the ddcDeliverFiles
# It is an automated Kill. The timeout value is in seconds
#
# == Usage
# decDeliverFiles [-O] [-N] [-p "Field1:Value Field2:Value"] [-R]
#        --ONCE      The file is just sent once for each I/F
#        --NOARCHIVE This flag skips the file archive retrieving step
#        --Report    This flag enables Delivered Files Reports creation
#        --nodb      no usage of the Inventory for recording operations
#        --Kill      it cancels an ongoing delivery
#        --help      shows this help
#        --usage     shows the usage
#        --Debug     shows Debug info during the execution
#        --version   shows version number
# 

require 'getoptlong'

require 'cuc/CheckerProcessUniqueness'
require 'cuc/Log4rLoggerFactory'
require 'dec/ReadInterfaceConfig'
require 'dec/DEC_Environment'


@isDebugMode      = false                  

# MAIN script function
def main

   include           DEC
   
   ## ======================================================================
   
   def SIGTERMHandler
      puts "\n[#{File.basename($0)}] SIGTERM signal received ... sayonara, baby !\n"
      self.killInProgressSend2Interfaces
      @locker.release
      exit(0)
   end
   ## ======================================================================

   # It sends SIGTERM signal to the in-progress send2Entity <I/F> processes
   def killInProgressSend2Interfaces
      ddcIntConfig  = ReadInterfaceConfig.instance
      arrInterfaces = ddcIntConfig.getAllMnemonics
   
      arrInterfaces.each{|x|
         @logger.info("Stopping delivery to #{x}")
         checker = CUC::CheckerProcessUniqueness.new("decSend2Interface", x, true)
         if @isDebugMode == true then
            checker.setDebugMode
         end
         pid = checker.getRunningPID
         if pid == false then
            if @isDebugMode == true then
               @logger.debug("send2Interface for #{x} I/F was not running")
            end
         else
            if @isDebugMode == true then
               @logger.debug("Sending signal SIGTERM to Process #{pid} for killing decSend2Interface #{x}")
            end
            Process.kill(15, pid.to_i)
         end         
      }
   end   
   ## ======================================================================
   
   @isDeliveredOnce  = false
   @isNoDB           = false 
   @skipGetFiles     = false
   @strParams        = ""
   @createReport     = false
   bKill             = false
   timeout           = 0
   @bShowVersion     = false
   @bShowUsage       = false

   opts = GetoptLong.new(
     ["--Debug", "-D",          GetoptLong::NO_ARGUMENT],
     ["--usage", "-u",          GetoptLong::NO_ARGUMENT],
     ["--ONCE", "-O",           GetoptLong::NO_ARGUMENT],
     ["--NOARCHIVE", "-N",      GetoptLong::NO_ARGUMENT],
     ["--version", "-v",        GetoptLong::NO_ARGUMENT],
     ["--Report", "-R",         GetoptLong::NO_ARGUMENT],
     ["--params", "-p",         GetoptLong::REQUIRED_ARGUMENT],
     ["--Timeout", "-T",        GetoptLong::REQUIRED_ARGUMENT],
     ["--help", "-h",           GetoptLong::NO_ARGUMENT],
     ["--Kill", "-K",           GetoptLong::NO_ARGUMENT],
     ["--nodb", "-n",           GetoptLong::NO_ARGUMENT]
     )
   
   begin 
      opts.each do |opt, arg|
         case opt
            when "--ONCE"        then @isDeliveredOnce         = true
            when "--NOARCHIVE"   then @skipGetFiles            = true
            when "--Debug"       then @isDebugMode             = true
            when "--version"     then @bShowVersion            = true
            when "--Report"      then @createReport            = true
            when "--help"        then @bShowUsage              = true
            when "--usage"       then @bShowUsage              = true
            when "--params"      then @strParams               = arg.to_s
            when "--Kill"        then bKill                    = true
            when "--nodb"        then @isNoDB                  = true
            when "--Timeout"     then timeout                  = arg 
         end
      end
   rescue Exception
      exit(99)
   end

   if @bShowVersion == true then
      print("\nDEC ", File.basename($0), " Version: [#{DEC.class_variable_get(:@@version)}]", "\n\n")
      hRecord = DEC.class_variable_get(:@@change_record)
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }      
      exit(0)
   end

   if @bShowUsage == true then
      usage
      exit(0)
   end

   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(99)
   end
   
   # ---------------------------------------------
   # initialize logger
   loggerFactory = CUC::Log4rLoggerFactory.new("push", "#{ENV['DEC_CONFIG']}/dec_log_config.xml")
   if @isDebugMode then
      loggerFactory.setDebugMode
   end
   @logger = loggerFactory.getLogger
   if @logger == nil then
      puts
		puts "Error in decDeliverFiles::main"
		puts "Could not set up logging system !  :-("
      puts "Check DEC logs configuration under \"#{ENV['DEC_CONFIG']}/dec_log_config.xml\"" 
		puts
		puts
		exit(99)
   end
   # ---------------------------------------------

   if @strParams != "" and @isDeliveredOnce == false then
      @logger.error("#{File.basename($0)} params argument -p requires -O option enabled ! :-p")
      exit(99)
   end

   # This assures there is only one decDeliverFiles running 
   @locker = CUC::CheckerProcessUniqueness.new(File.basename($0), nil, true)

   if @locker.isRunning == true then
      @logger.warn("#{File.basename($0)} is already running !")
      exit(0)
   else
      @logger.info("#{File.basename($0)} is started")
   end

   # Register in lock file the process
   @locker.setRunning

   if bKill == true then
      killInProgressDelivery
   end
   
   # Register a handler for SIGTERM
   trap 15,proc{ self.SIGTERMHandler }

   # Register a handler for SIGINT
   trap 2,proc{ self.SIGTERMHandler }


   # ---------------------------------------------

   # 20180511 - Super dirty original E2ESPM patch to kill deliverer
   # time-outs should be managed at protocol level and not application
   
   # Timeout daemon
   # Check each 5 seconds if the parent is dead
   # If parent is dead the daemon stops, if timeout runs out, SIGTERM is called
   if timeout != 0 then
      fork { 
         Process.setpriority(Process::PRIO_PROCESS, 0, 1)
         counter= 0
         timeout= timeout.to_i

         while timeout >= counter do
            exit!(0) if Process.ppid == 1
            sleep(5)
            counter=counter + 5
         end

         self.SIGTERMHandler
      }
   end

   # ---------------------------------------------

   if @skipGetFiles == false then
      
      ## -------------------------------
      ## Get files to be transferred
      cmd = "decGetFiles4Transfer"
   
      if @isDebugMode == true then
         cmd = %Q{#{cmd} -D}
      end
   
      ret = system(cmd)
   
      ## -------------------------------
      
      if ret == false then
         @logger.error("Error executing #{cmd}")
         @logger.error("Could not retrieve files to be sent from Archive ! :-(")
         exit(99)
      end
   end
      
   # Deliver to all Interfaces
   deliver2Interfaces
   
end

## ---------------------------------------------------------------------

## ---------------------------------------------------------------------
##
## Deliver 2 all interfaces

def deliver2Interfaces
   ddcIntConfig  = ReadInterfaceConfig.instance
   arrInterfaces = ddcIntConfig.getAllMnemonics
   processInfo   = Hash.new
   
   arrInterfaces.each{|interface|

      if ddcIntConfig.isEnabled4Sending?(interface) == false then
         next
      end

      if @isDebugMode == true then
         command  = %Q{decSend2Interface --mnemonic #{interface} -D}
      else
         command  = %Q{decSend2Interface --mnemonic #{interface}}
      end

      if @isDeliveredOnce == true then
         command = %Q{#{command} -O}
      end

      if @createReport == true then
         command = %Q{#{command} -R}
      end

      if @isNoDB == true then
         command = %Q{#{command} --nodb}
      end 

      if @strParams != "" then
         command = %Q{#{command} -p "#{@strParams}"}
      end

      # Create a new process for each Interface
      pid = fork { 
         Process.setpriority(Process::PRIO_PROCESS, 0, 1)
#         if @isDebugMode == true then
            @logger.info(command)
#         end
         exec(command)
      }
      
      sleep(2)
      processInfo[pid] = interface

   }
   
   # Wait for all processes
   bSuccess = true

   arrInterfaces.each{|interface|

      if ddcIntConfig.isEnabled4Sending?(interface) == false then
         next
      end

      pid     = Process.wait
      resCode = $?.exitstatus >> 8         
      
      if resCode != 0 then
         @logger.error("FAILED to Send the files to ", processInfo[pid], " I/F")
         bSuccess = false
      end
   
   }
   return bSuccess
end
## ---------------------------------------------------------------------

## ==========================================================================
##
## It sends SIGTERM signal to the active in-progress decDeliverFiles process
def killInProgressDelivery
   checker = CUC::CheckerProcessUniqueness.new(File.basename($0), nil, true)
   if @isDebugMode == true then
      checker.setDebugMode
   end
   if checker.getRunningPID == false then
      @logger.error("#{File.basename($0)} was not running !")
      exit(99)
   else
      pid = checker.getRunningPID
      @logger.info("Sending signal SIGTERM to Process #{pid} for killing #{File.basename($0)} ")
      Process.kill(15, pid.to_i)
      exit(0)
   end
end
##
## ==========================================================================

## -------------------------------------------------------------
##
## Print command line help
##
def usage
   fullpathFile = File.expand_path(__FILE__)   
   
   value = `#{"head -56 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end
## -------------------------------------------------------------

## =============================================================================
## Start of the main body
main
## End of the main body
## =============================================================================
