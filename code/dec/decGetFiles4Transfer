#!/usr/bin/env ruby

# == Synopsis
#
# This is a DEC command line tool that retrieves files to be transferred (push)
# from a source directory specified by dec_config.xml SourceDir configuration item.
#
# Files present in the source directory are gathered and then filtered according to the rules 
# defined in dec_outgoing_files.xml
# => wildcards such as  <File Type="S2A*">
# => children directories, such as <File Type="./GIP_PROBA2"> 
# 
# Files gathered are finally placed into the directory defined in the 
# configuration <GlobalOutbox> present in dec_config.xml 
# 
# -O flag:
# The "ONCE" flag registers in the Inventory all the files sent. As well it checks
# prior to the delivery whether a files has been previously sent or not to avoid 
# delivering it twice to the same Interface.
#
# == Usage
# decGetFiles4Transfer [-O] [-l]
#   --ONCE      The file is just sent once for each I/F
#   --list      list only
#   --help      shows this help
#   --usage     shows the usage
#   --Debug     shows Debug info during the execution
#   --version   shows version number
# 
# == Author
# Deimos-Space S.L.
#
# == Copyright
# Copyright (c) 2006 ESA - Deimos Space S.L.
#

#########################################################################
#
# === Ruby script decGetFiles4Transfer for sending all files to an Entity
# 
# === Written by DEIMOS Space S.L.   (bolf)
#
# === Data Exchange Component
# 
# Git: $Id: decGetFiles4Transfer 1.4 2007/12/05 17:49:11 decdev Exp $
#
#########################################################################

require 'getoptlong'

require 'cuc/CheckerProcessUniqueness'
require 'cuc/Logger.rb'
require 'cuc/DirUtils'
require 'dec/DEC_Environment'
require 'dec/RetrieverFromArchive'

@isDebugMode      = false
@bList            = false
@bShowVersion     = false
@bShowUsage       = false
@bOnce            = false

# MAIN script function
def main

   include           CUC::DirUtils
   include           DEC
   
   opts = GetoptLong.new(
     ["--Debug", "-D",          GetoptLong::NO_ARGUMENT],
     ["--list", "-l",           GetoptLong::NO_ARGUMENT],
     ["--usage", "-u",          GetoptLong::NO_ARGUMENT],
     ["--ONCE", "-O",           GetoptLong::NO_ARGUMENT],
     ["--version", "-v",        GetoptLong::NO_ARGUMENT],
     ["--help", "-h",           GetoptLong::NO_ARGUMENT]
     )
   
   begin 
      opts.each do |opt, arg|
         case opt      
            when "--Debug"          then @isDebugMode       = true
            when "--version"        then @bShowVersion      = true
            when "--list"           then @bList             = true
            when "--ONCE"           then @bOnce             = true
            when "--help"           then @bShowUsage        = true
            when "--usage"          then @bShowUsage        = true
         end
      end
   rescue Exception
      exit(99)
   end

   if @bShowVersion == true then
      print("\nESA - DEIMOS-Space S.L. ", File.basename($0), " Version: [#{DEC.class_variable_get(:@@version)}]", "\n\n")
      hRecord = DEC.class_variable_get(:@@change_record)
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }      
      exit(0)
   end

   if @bShowUsage == true then
      usage
      exit(0)
   end

   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(99)
   end

   # ----------------------------------
   # initialize logger
   loggerFactory = CUC::Log4rLoggerFactory.new("push", "#{ENV['DEC_CONFIG']}/dec_log_config.xml")
   if @isDebugMode then
      loggerFactory.setDebugMode
   end
   @logger = loggerFactory.getLogger
   if @logger == nil then
      puts
      puts "Error in DEC_ReceiverFromInterface::initialize"
      puts "Could not set up logging system !  :-("
      puts "Check DEC logs configuration under \"#{ENV['DEC_CONFIG']}/dec_log_config.xml\"" 
      puts
      puts
      exit(99)
   end
   # ----------------------------------

   checkModuleIntegrity
   
   locker = CUC::CheckerProcessUniqueness.new(File.basename($0), "", true)
   if locker.isRunning == true then
      puts "\n#{File.basename($0)} is already running !\n\n"
      exit(99)
   end
   # Register in lock file the process
   locker.setRunning

   @archiveRetriever = RetrieverFromArchive.new(@logger, @isDebugMode)
   if @isDebugMode == true then
      @archiveRetriever.setDebugMode
   end
   
   @archiveRetriever.retrieve(@bList)
   
   if @bList == false then
      @archiveRetriever.mv2OutTrays(@bOnce)
   end
   
   locker.release
   
end

## ---------------------------------------------------------------------

## ---------------------------------------------------------------------

def checkModuleIntegrity
   ret = checkEnvironmentEssential
   
   if ret == true then
      ret = checkEnvironmentPUSH
   else
      checkEnvironmentPUSH
   end
   
   if ret == false then
      puts "#{File.basename($0)} failed the configuration check :-("
      puts
      exit(99)
   end 
end

## -------------------------------------------------------------

## Print command line help
def usage
   fullpathFile = File.expand_path(__FILE__)    
   
   value = `#{"head -35 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end
## -------------------------------------------------------------

## =============================================================================
## Start of the main body
main
## End of the main body
## =============================================================================
