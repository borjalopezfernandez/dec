#!/usr/bin/env ruby

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'cuc/Log4rLoggerFactory'

require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'

## rake -f build_dec.rake dec:install[dectest,localhost,s2_test_pg]

### https://github.com/delfer/docker-alpine-ftp-server.git
### https://github.com/delfer/docker-alpine-ftp-server/blob/master/Dockerfile
### docker run -v /tmp:/tmp/tmp_ftp -d  -p "2121:21"  -p 21000-21010:21000-21010     -e USERS="test_ftp|test"     -e ADDRESS=localhost     delfer/alpine-ftp-server
### docker exec -u root -i -t dec_ftp_server sh

### ------------------------------------
### MacOS Mojave
## sudo /usr/local/sbin/pure-ftpd -lpam
## sudo /usr/local/sbin/pure-ftpd /Users/<user>/Projects/dec/config/ftp/pure-ftpd.conf
### ------------------------------------

## https://bobcares.com/blog/proftpd-create-user/

## https://support.hostway.com/hc/en-us/articles/360000563730-How-to-enable-passive-FTP-connections-in-ProFTPD

class DECTestCase_FTP_Passive < Test::Unit::TestCase

   include Test::Unit::Data
   
   include CUC::DirUtils
   
   include DEC
         
   # Order of the test cases execution according to definition within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   # --------------------------------------------------------
   
   Test::Unit.at_start do
      system("clear")
      puts
      puts "======================================"
      puts "DEC FTP PASSIVE MODE Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "Execute the following test environment:"
      puts "docker run --name dec_ftp_server -v /tmp/tmp_ftp:/ftp/test_ftp -d  -p '2121:21' -p 21000-21010:21000-21010  -e USERS='test_ftp|test'  -e ADDRESS=localhost delfer/alpine-ftp-server"
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
   
   
      @@arrDownloadFiles = [ \
                           "finals.all", \
                           "tai-utc.dat" \
                           ]

      @@conf = DEC_Environment.new

      @@conf.wrapper_load_config

      @decConfigDir = ENV['DEC_CONFIG']
 
      ## ----------------------------------
      ## initialize logger
      loggerFactory = CUC::Log4rLoggerFactory.new("DECTEST", "#{@decConfigDir}/dec_log_config.xml")
   
      @@logger = loggerFactory.getLogger   
      if @@logger == nil then
         puts
		   puts "Error in decUnitTests_FTP"
     	   puts "Could not initialize logging system !  :-("
         puts "Check DEC logs configuration under \"#{@decConfigDir}/orchestrator_log_config.xml\"" 
 	      puts
   	   exit(99)
      end

      ## ----------------------------------

      # Directories need to be created before the execution of the container
      # with the FTP server exhange directories

      cmd = "rm -rf /tmp/tmp_ftp"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "mkdir -p /tmp/tmp_ftp"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "chmod a+w /tmp/tmp_ftp"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "mkdir -p /tmp/tmp_ftp/dir1"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "mkdir -p /tmp/tmp_ftp/dir2"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "chmod a+w /tmp/tmp_ftp"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "mkdir -p /tmp/dec/in_basket_if_localhost_ftp_passive"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "\\rm -rf /tmp/dec/in_basket_if_localhost_ftp_passive_passive/*"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "mkdir -p /tmp/tmp_ftp/dec_simul_if/localhost_notsecure/upload/_TEMP_"
      @@logger.debug(cmd)
      system(cmd)
      
      ## -----------------------------------------
      ## list mode and subsequent download
      
      system("echo \'my touch file\' > /tmp/tmp_ftp/dir1/touchfile1.txt")
      system("echo \'another touch file\' > /tmp/tmp_ftp/dir1/touchfile2.txt")
      system("echo \'another brick in the touch file\' > /tmp/tmp_ftp/dir2/touchfile3.txt")
      system("echo \'another brick in the touch file\' > /tmp/tmp_ftp/dir2/touchfile4.txt")
      
      cmd = "chmod a+w /tmp/tmp_ftp"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "chmod a+r /tmp/tmp_ftp"
      @@logger.debug(cmd)
      system(cmd)

      @@conf.wrapper_unset_config

      cmd = "docker container stop dec_ftp_server"
      @@logger.debug(cmd)
      system(cmd)

      sleep(2.0)

      cmd = "docker container rm dec_ftp_server"
      @@logger.debug(cmd)
      system(cmd)

      sleep(5.0)

      cmd = "docker run --name dec_ftp_server -v /tmp/tmp_ftp:/ftp/test_ftp -d  -p '2121:21' -p 21000-21010:21000-21010  -e USERS='test_ftp|test'  -e ADDRESS=localhost delfer/alpine-ftp-server"
      @@logger.info(cmd)
      system(cmd)

      sleep(5.0)
   
   end
   
   ## --------------------------------------------------------
   
   Test::Unit.at_exit do
      puts "End of DEC tests FTP"
   end
   ## --------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      return
   end
   ## ------------------------------------------------------
   ## After every test case

   def teardown
      return
   end
   ## ------------------------------------------------------
   
   ## ------------------------------------------------------
   
   ##
   
   ## PULL Circulations
   def test_pull
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "rm -f /tmp/DEC*.log"
      puts cmd
      system(cmd)

      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -a LOCALHOST_FTP_PASSIVE"
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      puts cmd
      assert(system(cmd), cmd)   
   
      cmd = "decCheckConfig -e LOCALHOST_FTP_PASSIVE"
      puts cmd
      assert(system(cmd), cmd)
      
      cmd = "decGetFromInterface -m LOCALHOST_FTP_PASSIVE -l"
      puts cmd
      assert(system(cmd), cmd)
      
      cmd = "decGetFromInterface -m LOCALHOST_FTP_PASSIVE"
      puts cmd
      assert(system(cmd), cmd)

      arrFiles = Dir["/tmp/dec/in_basket_if_localhost_ftp_passive/touch*"]      
      assert(arrFiles.length == 4, "Number of files pulled")
      
      ## -----------------------------------------

      ## -----------------------------------------

      cmd = "decStats -H 1"
      puts cmd
      assert(system(cmd), cmd)
            
      ## -----------------------------------------
      
      arr = Dir["/tmp/DEC*.log"]
      cmd = "grep DEC_110 #{arr[0]}"
      puts cmd
      assert(system(cmd), "Downloads logged in #{__method__.to_s}") 

      ## -----------------------------------------
      
   end
   ## ------------------------------------------------------

   ## ------------------------------------------------------
   
   ## PUSH Circulations
   def test_push
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

      cmd = "rm -f /tmp/DEC*.log"
      puts cmd
      system(cmd)

      system("\\rm -rf /tmp/dec/in_basket_if_localhost_ftp_passive/*")

      cmd = "rm -f /tmp/tmp/dir1/finals.all"
      puts cmd
      system(cmd)

      cmd = "rm -f /tmp/tmp/dir1/tai-utc.dat"
      puts cmd
      system(cmd)


      cmd = "decManageDB -d"
      ret = system(cmd)

      cmd = "decManageDB -c"
      ret = system(cmd)

      cmd = "decConfigInterface2DB -a LOCALHOST_FTP_PASSIVE"
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      puts cmd
      assert(system(cmd), cmd)   
   
      cmd = "decCheckConfig -e LOCALHOST_FTP_PASSIVE"
      puts cmd
      assert(system(cmd), cmd)
      
      checkDirectory("/tmp/dec_delivery_root/GIP_PROBA2")
      
      sourceDir = DEC::ReadConfigDEC.instance.getSourceDir
      
      checkDirectory(sourceDir)
      puts "SOURCE DIR => #{sourceDir}"

      ## for FTP protocol the same files for download are used
      
      @@arrDownloadFiles.each{|filename|
         puts filename
         system("echo \'#{filename}\' > #{sourceDir}/#{filename}")
      }

      cmd = "decGetFiles4Transfer"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "decSend2Interface --mnemonic LOCALHOST_FTP_PASSIVE -O"
      puts cmd
      assert(system(cmd), cmd)

#      cmd = "decDeliverFiles -D"
#      puts cmd
#      assert(system(cmd), cmd)

      cmd = "decListDirUpload -m LOCALHOST_FTP_PASSIVE -t"
      puts cmd
      assert(system(cmd), cmd)
      puts      

      cmd = "decStats"
      assert(system(cmd), cmd)
      
   end
   ## ------------------------------------------------------



end

### ==================================================================
