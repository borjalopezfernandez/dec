#!/usr/bin/env ruby -W0

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'cuc/Log4rLoggerFactory'

require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'
require 'dec/ReadConfigOutgoing'
require 'dec/ReadConfigIncoming'

## rake -f build_dec.rake dec:install[dectest,localhost,s2_test_pg]

## https://hub.docker.com/r/atmoz/sftp/

## docker run -v /tmp:/tmp -p 2222:22 -d atmoz/sftp test_sftp:test:1000
## sftp -v -oPort=2222 test_sftp@localhost


class DECTestCase_SFTP_PASSWORD < Test::Unit::TestCase

   include Test::Unit::Data
   
   include CUC::DirUtils
   
   include DEC
         
   # Order of the test cases execution according to definition within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   # --------------------------------------------------------
   
   Test::Unit.at_start do
      system("clear")
      puts
      puts "======================================"
      puts "DEC #{File.basename(__FILE__)} Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
   
      @@conf = DEC_Environment.new

      @@conf.wrapper_load_config

      @decConfigDir = ENV['DEC_CONFIG']
 
      ## ----------------------------------
      ## initialize logger
      loggerFactory = CUC::Log4rLoggerFactory.new("DECTEST", "#{@decConfigDir}/dec_log_config.xml")
   
      @@logger = loggerFactory.getLogger   
      if @@logger == nil then
         puts
		   puts "Error in #{File.basename(__FILE__)}"
     	   puts "Could not initialize logging system !  :-("
         puts "Check DEC logs configuration under \"#{@decConfigDir}/orchestrator_log_config.xml\"" 
 	      puts
   	   exit(99)
      end

      ## ----------------------------------
      @@conf.wrapper_unset_config
   
      # ---------------------
      # delete all log files
      cmd = "rm -f /tmp/test_pull_sftp*.log"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "rm -f /tmp/test_push_sftp*.log"
      @@logger.debug(cmd)
      system(cmd)      
      # ---------------------

   end
   
   ## --------------------------------------------------------
   
   Test::Unit.at_exit do
      @@logger.info("End of DEC tests #{File.basename(__FILE__)}")
   end
   ## --------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s} START")
      cmd = "mkdir -p /tmp/tmp/dir1"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "mkdir -p /tmp/tmp/dir2"
      @@logger.debug(cmd)
      system(cmd)

      @@logger.debug("Defining environment variable used in configuration: DEC_TMP")
      ENV['DEC_TMP'] = '/tmp'

      conf = ReadConfigOutgoing.instance

      dir = conf.getOutgoingDir("LOCALHOST_SECURE_PASSWORD")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      dir = conf.getUploadDir("LOCALHOST_SECURE_PASSWORD")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      dir = conf.getUploadTemp("LOCALHOST_SECURE_PASSWORD")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      conf = ReadConfigIncoming.instance

      dir = conf.getIncomingDir("LOCALHOST_SECURE_PASSWORD")
      @@logger.debug("checking #{dir}")
      checkDirectory(dir)

      arr = conf.getDownloadDirs("LOCALHOST_SECURE_PASSWORD")

      arr.each{|inconfig|
         @@logger.debug("checking #{inconfig[:directory]}")
         checkDirectory(inconfig[:directory])
      }

      cmd = "decManageDB -d"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decManageDB -c"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      @@logger.debug(cmd)
      ret = system(cmd)

      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s} END")
   
      cmd = "rm -f /tmp/DEC*.log"
      @@logger.debug(cmd)
      system(cmd)

   end
   ## ------------------------------------------------------
   ## After every test case

   def teardown
      return
   end
   ## ------------------------------------------------------
   
   ## ------------------------------------------------------
   
   ##
   
   # data("SEPARATOR",     ["TEST LABEL",     0,   0,   0,    false])
   # data("0",     ["1_files_1GB_1Slots",      1,   1024000,   1,     false])
   # data("1",     ["3_files_1GB_1Slots",      3,   1024000,   1,     false])
   # data("2",     ["3_files_1GB_3Slots",      3,   1024000,   3,     false])
   # data("3",     ["7_files_1GB_5Slots",      7,   1024000,   5,     false])
   data("4",     ["10_files_1GB_5Slots",     10,  1024000,   5,     false])

   ## PULL Circulations
   def test_pull(params)

      label, numFiles, numBlocks, numSlots, noDB = params

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START #{label}")
 
      checkDirectory("/tmp/dec/in_basket_if_localhost_secure_password")
      checkDirectory("/tmp/dec_simul_if/localhost_secure_password/download")
      checkDirectory("/tmp/dec_simul_if/localhost_secure_password/upload/_TEMP_")

      cmd = "\\rm -rf /tmp/dec/in_basket_if_localhost_secure_password/*"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "decManageDB -d"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decManageDB -c"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)   
   
      cmd = "decCheckConfig -e LOCALHOST_SECURE_PASSWORD"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      ## -----------------------------------------
      ## list mode and subsequent download
      
      downloadDir = "/tmp/dec_simul_if/localhost_secure_password/download"

      1.upto(numFiles) do |i|
         filename = "test_sftp_#{i}.bin"
         cmd = "dd if=/dev/urandom of=#{downloadDir}/#{filename} bs=1024 count=#{numBlocks}"
         @@logger.debug(cmd)
         system(cmd)
      end
           
      cmd = "decGetFromInterface -m LOCALHOST_SECURE_PASSWORD -l"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      cmd = "decGetFromInterface -m LOCALHOST_SECURE_PASSWORD -P #{numSlots}"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      arrFiles = Dir["/tmp/dec/in_basket_if_localhost_secure_password/test_sftp*"]      
      assert(arrFiles.length == numFiles, "Number of files pulled")
      
      cmd = "decStats -H 1"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      ## -----------------------------------------
      
      arr = Dir["/tmp/DEC*.log"]

      cmd = "cp #{arr[0]} /tmp/test_pull_sftp_#{label}.log"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "grep stats /tmp/test_pull_sftp*.log"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "grep DEC\_110 /tmp/test_pull_sftp*.log"
      @@logger.debug(cmd)
      system(cmd)

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END #{label}")
   end
   ## ------------------------------------------------------

   ## ------------------------------------------------------
   
   # data("SEPARATOR",     ["Start of the Test",     0,   0,   0,    false])
   # data("0",     ["1_files_1GB_1Slots_NoDB",      1,   1024000,   1,     true])
   # data("1",     ["3_files_1GB_1Slots_NoDB",      3,   1024000,   1,     true])
   data("2",     ["7_files_1GB_1Slots_NoDB",      7,   1024000,   1,     true])

   ## PUSH Circulations
   def test_push(params)

      label, numFiles, numBlocks, numSlots, noDB = params

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START #{label}")

      checkDirectory("/tmp/dec/in_basket_if_LOCALHOST_SECURE/")
      system("\\rm -rf /tmp/dec/in_basket_if_LOCALHOST_SECURE/*")

      outTray     = "/tmp/dec_delivery_root"
      checkDirectory(outTray)

      1.upto(numFiles) do |i|
         filename = "test_sftp_#{i}.bin"
         cmd = "dd if=/dev/urandom of=#{outTray}/#{filename} bs=1024 count=#{numBlocks}"
         @@logger.debug(cmd)
         system(cmd)
      end


      cmd = "decValidateConfig -a"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)   
   
      cmd = "decCheckConfig -e LOCALHOST_SECURE_PASSWORD"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
      
      checkDirectory("/tmp/dec_delivery_root/GIP_PROBA2")
      
      sourceDir = DEC::ReadConfigDEC.instance.getSourceDir
      
      checkDirectory(sourceDir)
      @@logger.debug("SOURCE DIR => #{sourceDir}")

      cmd = "decGetFiles4Transfer"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      cmd = "decSend2Interface --mnemonic LOCALHOST_SECURE_PASSWORD -O"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

#      cmd = "decDeliverFiles -D"
#      puts cmd
#      assert(system(cmd), cmd)

      cmd = "decListDirUpload -m LOCALHOST_SECURE_PASSWORD -t"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)
    
      cmd = "decStats"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      arr = Dir["/tmp/DEC*.log"]
     
      cmd = "cp #{arr[0]} /tmp/test_push_sftp_#{label}.log"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "rm -f /tmp/dec_simul_if/localhost_secure/upload/test_sftp_*.bin"
      @@logger.debug(cmd)
      assert(system(cmd), cmd)

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")

   end
   ## ------------------------------------------------------



end

### ==================================================================
