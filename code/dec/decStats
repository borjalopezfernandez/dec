#!/usr/bin/env ruby

# == Synopsis
#
# This is a DEC command line tool that shows file circulation statistics  
# 
# == Usage
# decStats
#     --Hours <hours>            status of last n hours
#     --file <filename>          status of a given filename
#     --help                     shows this help
#     --usage                    shows the usage
#     --Debug                    shows Debug info during the execution
#     --version                  shows version number
#
#

require 'getoptlong'
require 'json'

require 'cuc/Log4rLoggerFactory'
require 'dec/DEC_Environment'

# MAIN script function
def main

   include           DEC

   @filename                  = ""
   @filetype                  = ""
   @dirname                   = ""
   startVal                   = ""
   endVal                     = ""
   @bGlobal                   = false
   @filename                  = ""

   @full_report_name          = ""

   bIncStart = false
   bIncEnd = false

   @isDebugMode            = false
   @bShowVersion           = false
   @bShowUsage             = false
   @hours                  = 1
   
   opts = GetoptLong.new(
     ["--Hours", "-H",           GetoptLong::REQUIRED_ARGUMENT],
     ["--global", "-g",          GetoptLong::NO_ARGUMENT],
     ["--Debug", "-D",           GetoptLong::NO_ARGUMENT],
     ["--usage", "-u",           GetoptLong::NO_ARGUMENT],
     ["--version", "-v",         GetoptLong::NO_ARGUMENT],
     ["--file", "-f",            GetoptLong::REQUIRED_ARGUMENT],
     ["--help", "-h",            GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt
            when "--Hours"             then @hours          = arg.to_i      
            when "--Debug"             then @isDebugMode    = true
            when "--file"              then @filename       = arg.to_s
            when "--version"           then @bShowVersion   = true
			   when "--help"              then @bShowUsage     = true
	         when "--usage"             then @bShowUsage     = true
         end
      end
   rescue Exception
      exit(99)
   end

   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(99)
   end

   require 'dec/DEC_DatabaseModel'
   require 'dec/StatisticDCC'
   require 'dec/StatisticDDC'

   if @bShowVersion == true then
      print("\nDEC ", File.basename($0), " Version: [#{DEC.class_variable_get(:@@version)}]", "\n\n")
      hRecord = DEC.class_variable_get(:@@change_record)
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }      
      exit(0)
   end

   if @bShowUsage == true then
      usage
      exit(0)
   end

   if @filename != "" then
      queryFile
   end

   # -----------------------------------------------------------------
   #
   # initialize logger
   loggerFactory = CUC::Log4rLoggerFactory.new("stat", "#{ENV['DEC_CONFIG']}/dec_log_config.xml")
   if @isDebugMode then
      loggerFactory.setDebugMode
   end
   @logger = loggerFactory.getLogger
   if @logger == nil then
      puts
		puts "Error in send2Interface::main"
		puts "Could not set up logging system !  :-("
      puts "Check DEC logs configuration under \"#{ENV['DEC_CONFIG']}/dec_log_config.xml\"" 
		puts
		puts
		exit(99)
   end
   # -----------------------------------------------------------------

   stats = DCC::StatisticDCC.new
   
   begin
      ret = stats.lastHour(@hours)
   rescue Exception => e
      puts "#{e.to_s} #{'1F480'.hex.chr('UTF-8')}"
      exit(99)
   end

   if ret == nil or ret.empty? == true then
      @logger.info("[DEC_144] Pull #{@hours}h: No files pulled")
   else
            
      arrJson = Array.new
  
      ret.each{|aHash|
         arrJson << JSON.generate(aHash)
      }
  
      arrJson.each{|entry|
         @logger.info("[DEC_144] Pull #{@hours}h: #{entry}")
      }

      stats = stats.stats

      @logger.info("[DEC_144] Pull stats: #{JSON.generate(stats)}")

   end

   
   stats = DDC::StatisticDDC.new

   begin
      ret = stats.lastHour(@hours)
   rescue Exception => e
      puts "#{e.to_s} #{'1F480'.hex.chr('UTF-8')}"
      exit(99)
   end
  
   if ret == nil then
      @logger.info("[DEC_244] Push #{@hours}h: No files pushed")
      exit(0)
   end
  
   arrJson = Array.new
  
   ret.each{|aHash|
      arrJson << JSON.generate(aHash)
   }
  
   arrJson.each{|entry|
      @logger.info("[DEC_244] Push #{@hours}h: #{entry}")
   }
  
   stats = stats.stats

   @logger.info("[DEC_244] Push stats: #{JSON.generate(stats)}")
  
   exit(0)

end

## ---------------------------------------------------------

def queryFile
   aFile = File.basename(@filename, ".*") 
   aFile = "#{aFile}%"
   files = ReceivedFile.where("filename LIKE ?", aFile)
   
   if files == nil or files.empty? == true then
      puts "File #{aFile} not found in the inventory"
      exit(99)
   end
   
   puts
   files.each{|file|
      puts file.filename
      puts Interface.find_by_id(file.interface_id).name
      puts file.reception_date
      puts file.size
      puts file.protocol
      puts
   }
   exit(0)
end

## ---------------------------------------------------------

def usage
   fullpathFile = File.expand_path(__FILE__)   
   
   value = `#{"head -16 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end

## ---------------------------------------------------------


## ---------------------------------------------------------

## =============================================================================
# Start of the main body
main
# End of the main body
## =============================================================================
