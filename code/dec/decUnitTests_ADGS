#!/usr/bin/env ruby -W0


require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'cuc/Log4rLoggerFactory'

require 'ctc/FTPClientCommands'
require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'
require 'dec/ReadInterfaceConfig'
require 'dec/ReadConfigOutgoing'
require 'dec/ReadConfigIncoming'

# rake -f build_aux.rake aux:install
# rake -f build_dec.rake dec:install[adgs,localhost,test_pg]

class DECTestCase_ADGS < Test::Unit::TestCase

   include CUC::DirUtils
   include CTC::FTPClientCommands
   include DEC

   # Order of the test cases execution according to defintion within code
   self.test_order = :defined

   @my_argv = ARGV.dup

   ## ------------------------------------------------------

   Test::Unit.at_start do
      puts
      puts "======================================"
      puts "DEC Interface Test Cases for ADGS External Data Retrieval"
      puts
      puts "rake -f build_dec.rake dec:install[adgs,localhost,test_pg]"
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n"
      puts
      puts

      bBatchmode = false

      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }

      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end

      @@conf = DEC_Environment.new

      @@conf.wrapper_load_config

      @@conf.wrapper_print_environment

      @@conf.createEnvironmentDirs

      if @@conf.wrapper_check_environment == false then
         puts "DEC environment not suited for unit tests"
         puts
         exit(99)
      end


      # initialize logger

      loggerFactory = CUC::Log4rLoggerFactory.new("adgs_tests", "#{ENV['DEC_CONFIG']}/dec_log_config.xml")

      if @isDebugMode then
         loggerFactory.setDebugMode
      end

      @@logger = loggerFactory.getLogger

      if @@logger == nil then
         puts
         puts "Error in decUnitTests::main"
         puts "Could not set up logging system !  :-("
         puts "Check DEC logs configuration under \"#{ENV['DEC_CONFIG']}/dec_log_config.xml\""
         puts
         puts
         exit(99)
      end
   end

   ## ------------------------------------------------------

   Test::Unit.at_exit do
      @@logger.info("End of DEC test ADGDS")
   end

   ## ------------------------------------------------------

   ## Setup before every test-case
   ##
   def setup
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s}")

      decConfig   = DEC::ReadConfigDEC.instance
      reportDir   = decConfig.getReportDir

      system("\\rm -rf #{reportDir}")
      # system("\\rm -rf /tmp/dec*")
      system("\\rm -rf /data/adgs/dec/log/ADGS_DEC*.log")
      cmd = "\\rm -rf /data/adgs/dec/log/ADGS_DEC*.log*"
      @@logger.debug(cmd)
      system(cmd)

      system("\\rm -rf /data/adgs/dec/log/ADGS_AUX*.log")
      cmd = "\\rm -rf /data/adgs/dec/log/ADGS_AUX*.log*"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "\\rm -rf /tmp/adgs/received/s2/*"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "\\rm -rf /data/adgs/arc/intray/*"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "\\rm -rf /data/adgs/tmp/in_basket_if_s1_ifremer_4_aux_wav/*"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "\\rm -rf /data/adgs/tmp/in_basket_if_s1_osi_saf_4_aux_ice/*"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "\\rm -rf /data/adgs/tmp/in_basket_if_s1_cddis_4_aux_tec/*"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "\\rm -rf /data/adgs/tmp/in_basket_if_s3_noaa_4_sl_2_dimsax/*"
      @@logger.debug(cmd)
      system(cmd)
      
      cmd = "decManageDB -d"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decManageDB -c"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decValidateConfig -a"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decConfigInterface2DB -p EXTERNAL"
      @@logger.debug(cmd)
      ret = system(cmd)

   end
   ## --------------------------------------------------------
   ## After every test case

   def teardown
      @@logger.debug("#{self.class.name.split('::').last}::#{__method__.to_s}")
   end

   ## ------------------------------------------------------

   # IERS CDDIS / EOSDIS UT1-UTC correlation ser7.dat
   # ser7.dat

   def test_s2_iers_cddis_4_aux_ut1utc
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decCheckConfig -e S2_IERS_CDDIS_4_AUX_UT1UTC"
      @@logger.info(cmd)
      assert(system(cmd), "list from S2_IERS_CDDIS_4_AUX_UT1UTC")

      cmd = "decGetFromInterface -m S2_IERS_CDDIS_4_AUX_UT1UTC -l"
      @@logger.info(cmd)
      assert(system(cmd), "list from S2_IERS_CDDIS_4_AUX_UT1UTC")

      cmd = "decGetFromInterface -m S2_IERS_CDDIS_4_AUX_UT1UTC --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S2_IERS_CDDIS_4_AUX_UT1UTC")

      # New iteration should not drive to a new file
      # A duplication should be detected.
      cmd = "decGetFromInterface -m S2_IERS_CDDIS_4_AUX_UT1UTC --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S2_IERS_CDDIS_4_AUX_UT1UTC")

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      arr = Dir["/data/adgs/dec/log/ADGS_DEC*.log"]

      @@logger.debug("Verification of log trace: File Download")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      cmd = "grep ERROR #{arr[0]}"
      @@logger.debug(cmd)
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end

   ## -----------------------------------------------------------

   ## ------------------------------------------------------

   # NOAA Ice Mapping System
   # ims2024133_1km_v1.3.nc.gz

   def test_s3_noaa_4_sl_2_dimsax
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decCheckConfig -e S3_NOAA_4_SL_2_DIMSAX"
      @@logger.info(cmd)
      assert(system(cmd), "list from S3_NOAA_4_SL_2_DIMSAX")

      cmd = "decGetFromInterface -m S3_NOAA_4_SL_2_DIMSAX -l"
      @@logger.info(cmd)
      assert(system(cmd), "list from S3_NOAA_4_SL_2_DIMSAX")

      cmd = "decGetFromInterface -m S3_NOAA_4_SL_2_DIMSAX --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S3_NOAA_4_SL_2_DIMSAX")

      # New iteration should not drive to a new file
      # A duplication should be detected.
      cmd = "decGetFromInterface -m S3_NOAA_4_SL_2_DIMSAX --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S3_NOAA_4_SL_2_DIMSAX")

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      arr = Dir["/data/adgs/dec/log/ADGS_DEC*.log"]

      @@logger.debug("Verification of log trace: File Download")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      cmd = "grep ERROR #{arr[0]}"
      @@logger.debug(cmd)
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end

   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_s3_osi_saf_4_sr_2_sifnax
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decCheckConfig -e S3_OSI_SAF_4_SR_2_SIFNAX"
      @@logger.info(cmd)
      assert(system(cmd), "list from S3_OSI_SAF_4_SR_2_SIFNAX")

      cmd = "decGetFromInterface -m S3_OSI_SAF_4_SR_2_SIFNAX -l"
      @@logger.info(cmd)
      assert(system(cmd), "list from S3_OSI_SAF_4_SR_2_SIFNAX")

      cmd = "decGetFromInterface -m S3_OSI_SAF_4_SR_2_SIFNAX --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S3_OSI_SAF_4_SR_2_SIFNAX")

      # New iteration should not drive to a new file
      # A duplication should be detected.
      cmd = "decGetFromInterface -m S3_OSI_SAF_4_SR_2_SIFNAX --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S3_OSI_SAF_4_SR_2_SIFNAX")

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      arr = Dir["/data/adgs/dec/log/ADGS_DEC*.log"]

      @@logger.debug("Verification of log trace: File Download")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      cmd = "grep ERROR #{arr[0]}"
      @@logger.debug(cmd)
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end

   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_s3_osi_saf_4_sr_2_sifsax
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decCheckConfig -e S3_OSI_SAF_4_SR_2_SIFSAX"
      @@logger.info(cmd)
      assert(system(cmd), "list from S3_OSI_SAF_4_SR_2_SIFSAX")

      cmd = "decGetFromInterface -m S3_OSI_SAF_4_SR_2_SIFSAX -l"
      @@logger.info(cmd)
      assert(system(cmd), "list from S3_OSI_SAF_4_SR_2_SIFSAX")

      cmd = "decGetFromInterface -m S3_OSI_SAF_4_SR_2_SIFSAX --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S3_OSI_SAF_4_SR_2_SIFSAX")

      # New iteration should not drive to a new file
      # A duplication should be detected.
      cmd = "decGetFromInterface -m S3_OSI_SAF_4_SR_2_SIFSAX --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S3_OSI_SAF_4_SR_2_SIFSAX")

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      arr = Dir["/data/adgs/dec/log/ADGS_DEC*.log"]

      @@logger.debug("Verification of log trace: File Download")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      cmd = "grep ERROR #{arr[0]}"
      @@logger.debug(cmd)
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end

   ## -----------------------------------------------------------


   ## -----------------------------------------------------------

   def test_s1_osi_saf_4_aux_ice
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decCheckConfig -e S1_OSI_SAF_4_AUX_ICE"
      @@logger.info(cmd)
      assert(system(cmd), "list from S1_OSI_SAF_4_AUX_ICE")

      cmd = "decGetFromInterface -m S1_OSI_SAF_4_AUX_ICE -l"
      @@logger.info(cmd)
      assert(system(cmd), "list from S1_OSI_SAF_4_AUX_ICE")

      cmd = "decGetFromInterface -m S1_OSI_SAF_4_AUX_ICE --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S1_OSI_SAF_4_AUX_ICE")

      # New iteration should not drive to a new file
      # A duplication should be detected.
      cmd = "decGetFromInterface -m S1_OSI_SAF_4_AUX_ICE --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S1_OSI_SAF_4_AUX_ICE")

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      arr = Dir["/data/adgs/dec/log/ADGS_DEC*.log"]

      @@logger.debug("Verification of log trace: File Download")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      cmd = "grep ERROR #{arr[0]}"
      @@logger.debug(cmd)
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end

   ## -----------------------------------------------------------

   ## -----------------------------------------------------------

   def test_s1_ifremer_4_aux_wav
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decCheckConfig -e S1_IFREMER_4_AUX_WAV"
      @@logger.info(cmd)
      assert(system(cmd), "list from S1_IFREMER_4_AUX_WAV")

      cmd = "decGetFromInterface -m S1_IFREMER_4_AUX_WAV -l"
      @@logger.info(cmd)
      assert(system(cmd), "list from S1_IFREMER_4_AUX_WAV")

      cmd = "decGetFromInterface -m S1_IFREMER_4_AUX_WAV --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S1_IFREMER_4_AUX_WAV")

      # New iteration should not drive to a new file
      # A duplication should be detected.
      cmd = "decGetFromInterface -m S1_IFREMER_4_AUX_WAV --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S1_IFREMER_4_AUX_WAV")

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      arr = Dir["/data/adgs/dec/log/ADGS_DEC*.log"]

      @@logger.debug("Verification of log trace: File Download")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

   
      cmd = "grep ERROR #{arr[0]}"
      @@logger.debug(cmd)
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end


   ## -----------------------------------------------------------

   def test_s1_cddis_4_aux_tec
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decCheckConfig -e S1_CDDIS_4_AUX_TEC"
      @@logger.info(cmd)
      assert(system(cmd), "list from S1_CDDIS_4_AUX_TEC")

      cmd = "decGetFromInterface -m S1_CDDIS_4_AUX_TEC -l"
      @@logger.info(cmd)
      assert(system(cmd), "list from S1_CDDIS_4_AUX_TEC")

      cmd = "decGetFromInterface -m S1_CDDIS_4_AUX_TEC"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S1_CDDIS_4_AUX_TEC")

      arr = Dir["/data/adgs/arc/intray/S1__AUX_TEC*.SAFE"]
      assert(arr.empty? == false, "File disseminated and converted")

      # New iteration should not drive to a new file
      # A duplication should be detected.
      cmd = "decGetFromInterface -m S1_CDDIS_4_AUX_TEC"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S1_CDDIS_4_AUX_TEC")

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      arr = Dir["/data/adgs/dec/log/ADGS_DEC*.log"]

      @@logger.debug("Verification of log trace: File Download")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      @@logger.debug("Verification of log trace: Duplication detection")
      cmd = "grep DEC\_301 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "duplication traced in DEC logs in #{__method__.to_s}")

      cmd = "grep ERROR #{arr[0]}"
      @@logger.debug(cmd)
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end


   ## -----------------------------------------------------------

   # Copernicus S1 Mission Performance Centre

   def test_s1mpc
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "DEC_LIST_MODE_S1MPC=true DEC_QUERY_DATE_S1MPC=\"2024-04-29\" dec_script_ADGS_S1MPC"
      @@logger.info(cmd)
      assert(system(cmd), "list from S1MPC")

      cmd = "DEC_LIST_MODE_S1MPC=false DEC_QUERY_DATE_S1MPC=\"2024-04-29\" dec_script_ADGS_S1MPC"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S1MPC")

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      cmd = "DEC_LIST_MODE_S1MPC=true DEC_QUERY_DATE_S1MPC=\"2024-04-29\" dec_script_ADGS_S1MPC"
      @@logger.info(cmd)
      assert(system(cmd), "list from S1MPC")


      arr = Dir["/data/adgs/dec/log/ADGS_DEC*.log"]

      @@logger.debug("Verification of log trace: File Download")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      @@logger.debug("Verification of log trace: File Dusplications")
      cmd = "grep DEC\_301 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      @@logger.debug("Verification of log trace: Pull iterations")
      cmd = "grep DEC\_100 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      cmd = "grep ERROR #{arr[0]}"
      @@logger.debug(cmd)
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end

   ## -----------------------------------------------------------

   # verify pull with no new files
   def test_s1mpc_now
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "DEC_LIST_MODE_S1MPC=true DEC_QUERY_DATE_S1MPC=\"#{Time.now.strftime("%Y-%m-%d")}\" dec_script_ADGS_S1MPC"
      @@logger.info(cmd)
      assert(system(cmd), "list from S1MPC")

      cmd = "DEC_LIST_MODE_S1MPC=false DEC_QUERY_DATE_S1MPC=\"#{Time.now.strftime("%Y-%m-%d")}\" dec_script_ADGS_S1MPC"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S1MPC")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end

   ## -----------------------------------------------------------

    ## -----------------------------------------------------------

   # S2__OPER_AUX_UT1UTC_PDMC_20240513T000000_V20170101T000000_21000101T000000.txt

   def test_nasa_bulc
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decCheckConfig -e NASA_EOSDIS_IERS"
      @@logger.info(cmd)
      assert(system(cmd), "list from NASA_EOSDIS_IERS")

      cmd = "decGetFromInterface -m NASA_EOSDIS_IERS -l"
      @@logger.info(cmd)
      assert(system(cmd), "list from NASA_EOSDIS_IERS")

      cmd = "decGetFromInterface -m NASA_EOSDIS_IERS --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from NASA_EOSDIS_IERS")

      # New iteration should not drive to a new file
      # A duplication should be detected.
      cmd = "decGetFromInterface -m NASA_EOSDIS_IERS --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from NASA_EOSDIS_IERS")

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      arr = Dir["/data/adgs/dec/log/ADGS_DEC*.log"]

      @@logger.debug("Verification of log trace: File Download")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      @@logger.debug("Verification of log trace: Duplication detection")
      cmd = "grep DEC\_111 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "duplication traced in DEC logs in #{__method__.to_s}")

      @@logger.debug("Verification of log trace: file conversion to NAOS mission")
      cmd = "grep AUX\_001 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File conversion to Sentinel-2 mission traced in DEC logs in #{__method__.to_s}")

      cmd = "grep ERROR #{arr[0]}"
      @@logger.debug(cmd)
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end

    ## ------------------------------------------------------

   # NOAA Ice Mapping System
   # ims2024133_1km_v1.3.nc.gz

   def test_s3_noaa_4_sl_2_dimsax
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decCheckConfig -e S3_NOAA_4_SL_2_DIMSAX"
      @@logger.info(cmd)
      assert(system(cmd), "list from S3_NOAA_4_SL_2_DIMSAX")

      cmd = "decGetFromInterface -m S3_NOAA_4_SL_2_DIMSAX -l"
      @@logger.info(cmd)
      assert(system(cmd), "list from S3_NOAA_4_SL_2_DIMSAX")

      cmd = "decGetFromInterface -m S3_NOAA_4_SL_2_DIMSAX --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S3_NOAA_4_SL_2_DIMSAX")

      # New iteration should not drive to a new file
      # A duplication should be detected.
      cmd = "decGetFromInterface -m S3_NOAA_4_SL_2_DIMSAX --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from S3_NOAA_4_SL_2_DIMSAX")

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      arr = Dir["/data/adgs/dec/log/ADGS_DEC*.log"]

      @@logger.debug("Verification of log trace: File Download")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      cmd = "grep ERROR #{arr[0]}"
      @@logger.debug(cmd)
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end

   ## -----------------------------------------------------------


   ## -----------------------------------------------------------

   def test_all_mandanga
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decListener -m S1_IFREMER_4_AUX_WAV -i 60"
      @@logger.info(cmd)
      assert(system(cmd), "listening to S1_IFREMER_4_AUX_WAV")

      cmd = "decListener -m S1_OSI_SAF_4_AUX_ICE -i 60"
      @@logger.info(cmd)
      assert(system(cmd), "listening to S1_OSI_SAF_4_AUX_ICE")

      cmd = "decListener -m S1_CDDIS_4_AUX_TEC -i 60"
      @@logger.info(cmd)
      assert(system(cmd), "listening to S1_CDDIS_4_AUX_TEC")

      cmd = "decListener -m S2_IERS_CDDIS_4_AUX_UT1UTC -i 600"
      @@logger.info(cmd)
      assert(system(cmd), "listening to S2_IERS_CDDIS_4_AUX_UT1UTC")
      
      cmd = "decListener -m S3_NOAA_4_SL_2_DIMSAX -i 60"
      @@logger.info(cmd)
      assert(system(cmd), "listening to S3_NOAA_4_SL_2_DIMSAX")

      cmd = "decListener -m S3_OSI_SAF_4_SR_2_SIFNAX -i 60"
      @@logger.info(cmd)
      assert(system(cmd), "listening to S3_OSI_SAF_4_SR_2_SIFNAX")

      cmd = "decListener -m S3_OSI_SAF_4_SR_2_SIFSAX -i 60"
      @@logger.info(cmd)
      assert(system(cmd), "listening to S3_OSI_SAF_4_SR_2_SIFSAX")

      cmd = "decListener -m S3_OSI_SAF_4_SR_2_SICNAX -i 60"
      @@logger.info(cmd)
      assert(system(cmd), "listening to S3_OSI_SAF_4_SR_2_SICNAX")

      cmd = "decListener -m S3_OSI_SAF_4_SR_2_SICSAX -i 60"
      @@logger.info(cmd)
      assert(system(cmd), "listening to S3_OSI_SAF_4_SR_2_SICSAX")



      sleep 10

      cmd = "decListener -c"
      @@logger.info(cmd)
      assert(system(cmd), "listening to S3_NOAA_4_SL_2_DIMSAX")

      sleep 30

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      sleep 1800

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      arr = Dir["/data/adgs/dec/log/ADGS_DEC*.log"]

      @@logger.debug("Verification of log trace: File Download")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File download traced in DEC logs in #{__method__.to_s}")

      cmd = "grep ERROR #{arr[0]}"
      @@logger.debug(cmd)
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}")

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end


   ## -----------------------------------------------------------


end




## ===================================================================
