#!/usr/bin/env ruby

#########################################################################
#
# === Ruby source for #DEC_TestCases class
#
# === Written by DEIMOS Space S.L.
#
# === Data Exchange Component
#
# # git: decUnitTests_ncftpput,v $Id$: 
# 
# module DEC
#
#########################################################################

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'ctc/FTPClientCommands'


# Select a single test of the suite

# ruby decUnitTests -n test_my_method 

# Start FTP Server in MacOS Sierra
# launchctl load -w /System/Library/LaunchDaemons/ftp.plist

# Stop FTP Server
# launchctl unload -w /System/Library/LaunchDaemons/ftp.plist

class DECTestCase_Ncftpput < Test::Unit::TestCase

   include Test::Unit::Data
      
   include CTC::FTPClientCommands
   
   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   #--------------------------------------------------------
   
   Test::Unit.at_start do      
      # --------------------------------
      # change your credentials here      
      @@host        = "localhost"      
      @@user        = "borja"
      @@pass        = "perrillo"
      @@port        = 21
      # --------------------------------
      @@file        = "satansaldemi.txt"
      @@prefix      = ''
      @@verbose     = true
   end
   
   #--------------------------------------------------------
   
   Test::Unit.at_exit do
      puts "End of DEC tests ncftpput"
   end
   #--------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      prevDir     = Dir.pwd      
      Dir.chdir("/tmp")
      system("echo \'satan sal de mi\' > #{@@file}")
      Dir.chdir(prevDir)
   end
   #--------------------------------------------------------
   # After every test case

   def teardown
      # remove source file
      system("rm -f /tmp/#{@@file}")
      return
   end
   #--------------------------------------------------------
   
   #--------------------------------------------------------
   
      
   # full paths Port mode
   data("abs_path1",     ["ABSOLUTE_PATH_NESTED",        "/tmp/destination_dir", "/tmp/destination_dir/tmp_dir",  false])
   data("abs_path2",     ["ABSOLUTE_PATH_NOT_NESTED",    "/tmp/destination_dir", "/tmp/tmp_dir",   false])

   # full paths Passive mode
   data("abs_path3",     ["ABSOLUTE_PATH_NESTED_PASSIVE_MODE",        "/tmp/destination_dir", "/tmp/destination_dir/tmp_dir",  true])
   data("abs_path4",     ["ABSOLUTE_PATH_NOT_NESTED_PASSIVE_MODE",    "/tmp/destination_dir", "/tmp/tmp_dir",   true])

   # relative paths Port mode
   data("rel_path1",     ["RELATIVE_PATH_NOT_NESTED",    "destination_dir", "tmp_dir", false])
   data("rel_path2",     ["RELATIVE_PATH_NESTED",        "destination_dir", "destination_dir/tmp_dir",   false])

   # relative paths Passive mode
   data("rel_path3",     ["RELATIVE_PATH_NOT_NESTED_PASSIVE_MODE",    "destination_dir", "tmp_dir", true])
   data("rel_path4",     ["RELATIVE_PATH_NESTED_PASSIVE_MODE",        "destination_dir", "destination_dir/tmp_dir",   true])
   
   # combination of full paths and relative paths
   data("mix_path1",     ["MIX_1_ABS_&_REL_PATH",        "destination_dir", "/tmp/tmp_dir",  false])
   data("mix_path2",     ["MIX_2_ABS_&_REL_PATH",        "/tmp/destination_dir", "tmp_dir",  false])

   # combination of full paths and relative paths in Passive mode
   data("mix_path3",     ["MIX_1_ABS_&_REL_PATH_PASSIVE_MODE",        "destination_dir", "/tmp/tmp_dir",  true])
   data("mix_path4",     ["MIX_2_ABS_&_REL_PATH_PASSIVE_MODE",        "/tmp/destination_dir", "tmp_dir",  true])
   
   # Two levels to get root "/" from home /home/wisconsin_butcher 
   data("biz_path1",     ["BIZARRE_REL_PATH_NOT_NESTED", "../../tmp/destination_dir", "../../tmp/tmp_dir", false])
   data("biz_path2",     ["BIZARRE_REL_PATH_NESTED",     "../../tmp/destination_dir", "../../tmp/destination_dir/tmp_dir", false])
   
   # Same directories for UploadDir & UploadTemp
   data("biz_path3",     ["SAME_ABSOLUTE_PATH",          "/tmp/destination_dir", "/tmp/destination_dir", false])
   data("biz_path4",     ["SAME_RELATIVE_PATH",          "destination_dir", "destination_dir", false])
   data("biz_path5",     ["SAME_LOCATION_DIFFERENT_PATH",  "/Users/borja/destination_dir", "destination_dir", false])

   # Two levels to get root "/" from home /home/wisconsin_butcher in Passive mode
   data("biz_path6",     ["BIZARRE_REL_PATH_NOT_NESTED_PASSIVE_MODE", "../../tmp/destination_dir", "../../tmp/tmp_dir", true])
   data("biz_path7",     ["BIZARRE_REL_PATH_NESTED_PASSIVE_MODE",     "../../tmp/destination_dir", "../../tmp/destination_dir/tmp_dir", true])

   # Same directories for UploadDir & UploadTemp in Passive mode
   data("biz_path8",     ["SAME_ABSOLUTE_PATH_PASSIVE_MODE",          "/tmp/destination_dir", "/tmp/destination_dir", true])
   data("biz_path9",     ["SAME_RELATIVE_PATH_PASSIVE_MODE",          "destination_dir", "destination_dir", false])
   data("biz_path10",    ["SAME_LOCATION_DIFFERENT_PATH_PASSIVE_MODE",  "/Users/borja/destination_dir", "destination_dir", true])


   # This test creates every necessary directory to make the circulations succeed
   def test_ncftpput_1(data)
      
      label, dir, tmpDir, flagPassive = data
      
                           
      puts
      puts "---------------------------------"
      puts label
      puts "UploadDir   => #{dir}"
      puts "UploadTemp  => #{tmpDir}"
      puts "---------------------------------"
      puts
 
      # create destination directory UploadDir
      if dir[0,1] != '/' then
         system("mkdir -p ~/#{dir}")
      else
         system("mkdir -p #{dir}")
      end
      
      # create destination directory UploadTemp
      if tmpDir[0,1] != '/' then
         system("mkdir -p ~/#{tmpDir}")
      else
         system("mkdir -p #{tmpDir}")
      end
      
      prevDir = Dir.pwd
      Dir.chdir("/tmp")
          
      cmd = self.createNcFtpPut(@@host,  \
                                    @@port, \
                                    @@user, \
                                    @@pass, \
                                    tmpDir, \
                                    dir, \
                                    @@file, \
                                    @@prefix, \
                                    @@verbose, \
                                    flagPassive \
                                    )

      puts                              
      puts cmd
      puts

      ret = system(cmd)
      assert(ret, cmd)
      
      if ret == true then
         root = Dir.pwd
         if dir[0,1] != '/' then
            Dir.chdir("#{ENV['HOME']}/#{dir}")
         else
            Dir.chdir(dir)  
         end
         assert(File.exists?(@@file), "Everything in the right place ...")         
         Dir.chdir(root)
      end
               
      # remove destination directory UploadDir
      if dir[0,1] != '/' then
         system("rm -rf ~/#{dir}")
      else
         system("rm -rf #{dir}")
      end
      
      # remove destination directory UploadTemp
      if tmpDir[0,1] != '/' then
         system("rm -rf ~/#{tmpDir}")
      else
         system("rm -rf #{tmpDir}")
      end

      Dir.chdir(prevDir)
      
   end
   # --------------------------------------------------------

   # all tests are passive connections
   
#   data("abs_path1",     ["ABSOLUTE_PATH_CRAZY_NOT_EXISTING_PREVIOUSLY",   "/tmp/texas_chainsaw_holy_molly", "/tmp/texas_chainsaw_holy_molly/tmp", true])
#   data("abs_path2",     ["NO_WRITE_PERMISSION_BOTH",             "/", "/", false])
   data("abs_path3",     ["NO_WRITE_PERMISSION_FINAL_1",          "/", "/tmp", false])
#   data("mix_path1",     ["NO_WRITE_PERMISSION_FINAL_2",          "/", "tmp", false])
#   data("abs_path4",     ["NO_WRITE_PERMISSION_TMP",              "/tmp", "/", false])
#   data("rel_path1",     ["RELATIVE_PATH_CRAZY_NOT_EXISTING_PREVIOUSLY",  "texas_chainsaw_holly_molly", "texas_chainsaw_holly_molly/tmp", true])
#   data("mix_path1",     ["NO_WRITE_PERMISSION_FINAL_2",          "/", "tmp", false])

   # this test does not create directories to verify circulations failure behaviour
   def test_ncftpput_2(data)

      label, dir, tmpDir, cmdResult = data
      
                           
      puts
      puts "---------------------------------"
      puts label
      puts "UploadDir   => #{dir}"
      puts "UploadTemp  => #{tmpDir}"
      puts "---------------------------------"
      puts


      prevDir = Dir.pwd
      Dir.chdir("/tmp")
          
      cmd = self.createNcFtpPut(@@host,  \
                                    @@port, \
                                    @@user, \
                                    @@pass, \
                                    tmpDir, \
                                    dir, \
                                    @@file, \
                                    @@prefix, \
                                    @@verbose \
                                    )

      puts                              
      puts cmd
      puts

      ret = system(cmd)
      
      puts
      puts ret
      puts cmdResult
      puts
      
      assert(ret == cmdResult, cmd)
      
      if ret == true then
         if dir[0,1] != '/' then
            Dir.chdir("#{ENV['HOME']}/#{dir}")
         else
            Dir.chdir(dir)  
         end
         
         assert(File.exists?(@@file), "Everything in the right place ...")
         
         # remove destination directory UploadDir
         if dir[0,1] != '/' then
            system("rm -rf ~/#{dir}")
         else
            system("rm -rf #{dir}")
         end
      
         # remove destination directory UploadTemp
         if tmpDir[0,1] != '/' then
            system("rm -rf ~/#{tmpDir}")
         else
            system("rm -rf #{tmpDir}")
         end             
      end
               
      Dir.chdir(prevDir)

   end
   # --------------------------------------------------------

   # full paths result
   data("rel_path1",     ["REL_PATH_INDEPENDENT",        "destination_dir", "tmp_dir",  false] )
   
   def test_fjlh(data)
   
      label, dir, tmpDir, cmdResult = data

      puts
      puts "---------------------------------"
      puts label
      puts "UploadDir   => #{dir}"
      puts "UploadTemp  => #{tmpDir}"
      puts "---------------------------------"
      puts

   
      prevDir = Dir.pwd
      
      Dir.chdir(ENV['HOME'])
      
      cmd = "mkdir -p #{dir}"
      system(cmd)

      cmd = "mkdir -p #{tmpDir}"
      system(cmd)
      
      cmd = "chmod 500 #{dir}"
      system(cmd)

      Dir.chdir("/tmp")
      
      cmd = self.createNcFtpPut_FJLH1(@@host,  \
                                    @@port, \
                                    @@user, \
                                    @@pass, \
                                    dir, \
                                    tmpDir, \
                                    @@file, \
                                    @@verbose \
                                    )

      puts                              
      puts cmd
      puts

      ret = system(cmd)
      
      puts
      puts ret
      puts cmdResult
      puts
      
      assert(ret == cmdResult, cmd)
      
      
      Dir.chdir(prevDir)
   end
   # --------------------------------------------------------

end

#=====================================================================
