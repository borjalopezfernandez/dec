#!/usr/bin/env ruby

#########################################################################
##
## === Ruby source for #DEC_TestCases class
##
## === Written by DEIMOS Space S.L. (bolf)
##
## === Data Exchange Component
## 
## module DEC
##
#########################################################################

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'ctc/FTPClientCommands'
require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'
require 'dec/ReadInterfaceConfig'
require 'dec/ReadConfigOutgoing'
require 'dec/ReadConfigIncoming'


class DECTestCase < Test::Unit::TestCase

   include CUC::DirUtils
   include CTC::FTPClientCommands
   include DEC

   
   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   
   ## ------------------------------------------------------
   
   Test::Unit.at_start do      
      puts
      puts "======================================"
      puts "DEC Interface Test Cases for NOAA"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
      
            @@arrDownloadFiles = [ \
                           "finals.all", \
                           "gpsrapid.out" \
                           ]

          
      
      
   end
   
   ## ------------------------------------------------------
   
   Test::Unit.at_exit do
      puts "End of DEC test for NOAA interface"
   end
   
   ## ------------------------------------------------------
   
   ## Setup before every test-case
   ##
   def setup
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts
                  
      decConfig   = DEC::ReadConfigDEC.instance
      reportDir   = decConfig.getReportDir

      system("\\rm -rf #{reportDir}")
      system("\\rm -rf /tmp/dec*")
      system("\\rm -rf /tmp/DEC*.log")

      cmd = "decManageDB -c"
      ret = system(cmd)
      
      if ret == false then
         puts
         puts "Error when creating the DEC inventory ! :-("
         puts
         # exit(99)
      end
            
   end
   ## --------------------------------------------------------
   ## After every test case

   def teardown
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts

   end
   ## ------------------------------------------------------

   ## ------------------------------------------------------

   data("2",     ["NOAA",  false])
#   data("3",     ["IERS",  false])
#   data("4",     ["IGS",   false])
#   data("5",     ["LEAP",  true])

   def test_pull(params)

      interface, noDB = params
   
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s} => #{interface} noDB #{noDB}"
      puts


      cmd = "decConfigInterface2DB -p EXTERNAL"
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")

      @entityConfig     = ReadInterfaceConfig.instance
      conf              = ReadConfigIncoming.instance
      
      @finalDir         = conf.getIncomingDir(interface)
            
      checkDirectory(@finalDir)
      
      cmd = "decGetFromInterface -D -m #{interface} -l"
      puts cmd
      assert(system(cmd), cmd)

      sleep(5.0)

      cmd = "decGetFromInterface -m #{interface}"
      if noDB == true then
         cmd = "#{cmd} --nodb"
      end      
      puts cmd
      assert(system(cmd), cmd)      

      sleep(5.0)

      cmd = "decGetFromInterface -m PUBLISH_S3"
      puts cmd
      assert(system(cmd), cmd)      

      puts
      puts
      cmd = "decStats -H 1"
      puts cmd
      assert(system(cmd), cmd)
      
      arr = Dir["/tmp/DEC*.log"]
            
      cmd = "grep ERROR #{arr[0]}"
      puts cmd
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}") 

      
   end
   ## ------------------------------------------------------


   ## ------------------------------------------------------


end


## ===================================================================




