#!/usr/bin/env ruby

# The decODataClient is a simple OData client to hit Copernicus Sentinel
# servers to extract Sentinel-2 product metadata.
#
# DHUS queries:
#
# Query by Sentinel-2 Datatake Identifier: which looks for the associated
# published Complete Single Tile products 
#
# --query dhus:s1:S1B
# --query dhus:s2:S2A
# --query dhus:gnss:S1B
# --query dhus:s2:GS2B_20200903T104429_018252_N02.14
# --query dhus:s1:S1A:S1A_EW_GRDM
# --query dhus:s1:S1A:45C1F
#
# --query adgs:s2:S2B
#
# PRIP: queries:
#
# Query is so far targetting S2PRIP specifically.
#
# --query prip:S2B_OPER_MSI_L0__DS_VGS2_20201028T163228_S20201028T144729_N02.09:MSI_L0__GR
#
# The queries can be done also specifically by PDI:
# decODataClient -u <user> -p <pass> -q prip:S2B_OPER_MSI_L0__DS_VGS1_20210126T095435_S20210126T080454_N02.09 -V
#
# == Usage
# decODataClient 
#     --user      <username>
#     --password  <password>
#     --time       2021-03-24T00:00:00.000 (DHuS format applied to the IngestionDate)
#     --delay     <hours delay> (decimal offset 0.5-0.25 is scaled to minutes)
#     --sensing   "2021-03-16T00:00:00.000,2021-03-20T00:00:00.000"
#     --creation  "2021-03-16T00:00:00.000,2021-03-20T00:00:00.000"
#     --H         <hours delay> (decimal offset 0.5-0.25 is scaled to minutes)
#     --Location  <full_path_dir>
#     --format    json | xml | csv
#     --query     <dhus:l2a:GS2B_20200903T104429_018252_N02.14> | <prip>
#     --Verbose   it shows OData metadata
# 
#
# prip:S2A_OPER_MSI_L0__DS_VGS2:MSI_L0__GR
#
# long long long long query GS2B_20201015T092029_018852_N02.14
# 
# S2B_OPER_MSI_L0__DS_VGS2_20201028T163228_S20201028T144729_N02.09

#########################################################################
###
### Ruby source for #decODataClient class
###
### Written by DEIMOS Space S.L. (bolf)
###
### Data Exchange Component -> 
### 
### git:
###   decODataClient,v $Date$ $Id$ 
###
#########################################################################

require 'rubygems'

require 'getoptlong'
require 'net/http'
require 'date'
require 'nokogiri'
require 'json'

require 'cuc/Log4rLoggerFactory'

require 'dec/DEC_Environment'
require 'dec/ODataClientDHUS'
require 'dec/ODataClientADGS'

@isDebugMode = false


# MAIN script function
def main

   include DEC

   @user          = ""
   @password      = ""
   @query         = ""
   @datetime      = nil
   @format        = "xml"
   @sensingtime   = nil
   @creationtime  = nil
   @bUsage        = false
   @bShowVersion  = false
   @isVerboseMode = false
   @isDebugMode   = false
   @bDownload     = false
   @creationDelay = nil
   @hourDelay     = nil
   @currentDate   = DateTime.now.strftime("%Y%m%dT%H%M%S")
   @full_path_dir = ENV['HOME']   
   cmdParams      = ARGV.dup.to_s
   
   opts = GetoptLong.new(
     ["--user", "-u",               GetoptLong::REQUIRED_ARGUMENT],
     ["--password", "-p",           GetoptLong::REQUIRED_ARGUMENT],
     ["--query", "-q",              GetoptLong::REQUIRED_ARGUMENT],
     ["--delay", "-d",              GetoptLong::REQUIRED_ARGUMENT],
     ["--time", "-t",               GetoptLong::REQUIRED_ARGUMENT],
     ["--format", "-f",             GetoptLong::REQUIRED_ARGUMENT],
     ["--creation", "-c",           GetoptLong::REQUIRED_ARGUMENT],
     ["--sensing", "-s",            GetoptLong::REQUIRED_ARGUMENT],
     ["--Hour", "-H",               GetoptLong::REQUIRED_ARGUMENT],
     ["--Location", "-L",           GetoptLong::REQUIRED_ARGUMENT],
     ["--Verbose", "-V",            GetoptLong::NO_ARGUMENT],
     ["--Debug", "-D",              GetoptLong::NO_ARGUMENT],
     ["--retrieve", "-r",           GetoptLong::NO_ARGUMENT],
     ["--version", "-v",            GetoptLong::NO_ARGUMENT],
     ["--help", "-h",               GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt
            when "--Debug"             then @isDebugMode    = true
            when "--retrieve"          then @bDownload      = true
            when "--user"              then @user           = arg.to_s.chomp
            when "--password"          then @password       = arg.to_s.chomp
            when "--time"              then @datetime       = arg.to_s
            when "--sensing"           then @sensingtime    = arg.to_s
            when "--creation"          then @creationtime   = arg.to_s
            when "--delay"             then @creationDelay  = arg.to_f
            when "--Hour"              then @hourDelay      = arg.to_f
            when "--Location"          then @full_path_dir  = arg.to_s
            when "--query"             then @query          = arg.to_s.upcase
            when "--format"            then @format         = arg.to_s.downcase
            when "--Verbose"           then @isVerboseMode  = true
            when "--version"           then @bShowVersion   = true
			   when "--help"              then @bUsage         = true
         end
      end
   rescue Exception => e
      puts e.to_s
      exit(99)
   end

   if @bShowVersion == true then
      print("\nESA - DEIMOS-Space S.L. ", File.basename($0), " Version: [#{DEC.class_variable_get(:@@version)}]", "\n\n")
      hRecord = DEC.class_variable_get(:@@change_record)
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }      
      exit(0)
   end
   
   if @bUsage then
      usage
      exit(0)
   end
   
   if @user == "" or @password == "" or @query == "" then
      usage
      exit(99)
   end
   
   ## --------------------------------------------
         
   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(99)
   end

   ## --------------------------------------------
   ## initialize logger
   loggerFactory = CUC::Log4rLoggerFactory.new("odata", "#{ENV['DEC_CONFIG']}/dec_log_config.xml")
   if @isDebugMode then
      loggerFactory.setDebugMode
   end
   @logger = loggerFactory.getLogger
   if @logger == nil then
      puts
	   puts "Error in getFromInterface::main"
		puts "Could not set up logging system !  :-("
      puts "Check DEC logs configuration under \"#{ENV['DEC_CONFIG']}/dec_log_config.xml\"" 
		puts
		puts
		exit(99)
   end
   ## --------------------------------------------

   @logger.info("#{File.basename($0)} #{cmdParams}")
 
   ## -------------------------------------------- 
   
   if @hourDelay != nil and @sensingtime != nil then
      @logger.error("usage of incompatible params -H and -s")
      exit(99)  
   end
 
   ## -------------------------------------------- 
    
   if @hourDelay != nil then
            
      currentTime = DateTime.now - (@hourDelay/24.0)
      
      ## -----------------------------------------
      
      if @hourDelay - @hourDelay.to_i == 0.0 then
         @datetime   = currentTime.strftime("%Y-%m-%dT%H:00:00.000")
      end
      
      if @hourDelay - @hourDelay.to_i == 0.5 then
         @datetime   = currentTime.strftime("%Y-%m-%dT%H:30:00.000")
      end

      if @hourDelay - @hourDelay.to_i == 0.25 then
         @datetime   = currentTime.strftime("%Y-%m-%dT%H:15:00.000")
      end

      if @datetime == nil and @hourDelay != nil then
         @datetime   = currentTime
      end
      
      if @isDebugMode == true and @hourDelay != nil then
         @logger.debug("hour delay #{@hourDelay} => #{@datetime}")
      end
      
      ## -----------------------------------------
      
   end

   ## -------------------------------------------- 
    
   if @creationDelay != nil then
      
      dt          = DateTime.now    
      start       = dt - ((@creationDelay+1)/24.0)        
      stop        = dt - (@creationDelay/24.0)
      
      ## -----------------------------------------
      
      if @creationDelay - @creationDelay.to_i == 0.0 then
         @creationtime   = "#{start.strftime("%Y-%m-%dT%H:00:00.000")},#{stop.strftime("%Y-%m-%dT%H:00:00.000")}"
      end
      
      if @creationDelay - @creationDelay.to_i == 0.5 then
         @creationtime   = "#{start.strftime("%Y-%m-%dT%H:30:00.000")},#{stop.strftime("%Y-%m-%dT%H:30:00.000")}"
      end

      if @creationDelay - @creationDelay.to_i == 0.25 then
         @creationtime   = "#{start.strftime("%Y-%m-%dT%H:15:00.000")},#{stop.strftime("%Y-%m-%dT%H:15:00.000")}"
      end
      
      if @isDebugMode == true  then
         @logger.debug("creation time interval#{@creationDelay} => #{@creationtime}")
      end
      
      ## -----------------------------------------
      
   end

 
   ret = true
 
   ## -------------------------------------------- 

   if @query.include?("DHUS") == true then
      client      = ODataClientDHUS.new(@user, @password, @query, @creationtime, @datetime, @sensingtime,  @full_path_dir, @logger)
      
      if @isDebugMode == true then
         client.setDebugMode
      end

      ret = client.exec_query
   end
   
   ## -------------------------------------------- 

   if @query.include?("ADGS") == true then
      client      = ODataClientADGS.new(@user, @password, @query, @creationtime, @datetime, @sensingtime,  @full_path_dir, @logger)
      
      if @isDebugMode == true then
         client.setDebugMode
      end

      ret = client.exec_query
   end
 
   ## -------------------------------------------- 

   if @query.include?("PRIP") == true then
      ret = queryPRIP(@user, @password, @query)
   end
 
   ## --------------------------------------------
 
   if ret == true then
      exit(0)
   else
      exit(1)
   end

end

## --------------------------------------------------------------

## Print command line help
def usage
   fullpathFile = File.expand_path(__FILE__)    
   
   value = `#{"head -12 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end
## --------------------------------------------------------------

def queryPRIP(user, password, query)
   
   nParams     = query.split(":").length
   system      = query.split(":")[0]
   item        = query.split(":")[1]
   subitem     = query.split(":")[2]
   strURL      = ""
   bQueryDS    = false
   
   if nParams > 1 then
      strURL = %Q{#{PRIP::API_URL_ODATA_PRODUCT}#{PRIP::API_ODATA_FILTER_CONTAINS}(Name,%27#{item}%27)}
      if item.include?("MSI_L0__DS") then
         bQueryDS = true
      end
   else
      strURL = PRIP::API_URL_ODATA_PRODUCT
   end
      
   uri               = URI.parse(strURL)
   http              = Net::HTTP.new(uri.host, uri.port)
   http.use_ssl      = true
   http.verify_mode  = OpenSSL::SSL::VERIFY_NONE

   request = Net::HTTP::Get.new(uri.request_uri)
         
   request.basic_auth(user, password)
   response = http.request(request)
      
   if @isDebugMode == true then
      puts strURL
      puts uri.request_uri
      puts response.code
      puts response.message
      puts
   end
      
   doc = JSON.parse(response.body)
   
   if @isDebugMode == true then
      puts JSON.pretty_generate(doc)
   end
   
   if bQueryDS == true and subitem != nil then
      puts
      puts "Processing #{doc["value"].length} datastrip(s)"
      puts
   end
   
   doc["value"].sort_by!{|item| item["Name"]}.each{|item|
      puts item["Name"]
      if @isVerboseMode == true then
         # puts item["ContentLength"]
         puts "Id                : #{item["Id"]}"
         puts "ContentLength     : #{item["ContentLength"]}"
         puts "ContentDate       : #{item["ContentDate"]}"
         puts "PublicationDate   : #{item["PublicationDate"]}"
         puts "EvictionDate      : #{item["EvictionDate"]}"
         puts
      end
      
      if @bDownload == true then
         ret = downloadPDI(item["Id"])
      end
      
      if bQueryDS == true and subitem != nil then
         subitem = item["Name"].gsub("MSI_L0__DS", "MSI_L0__GR").slice(0, 40)
         queryPRIP_DS_to_PDI(user, password, subitem)
      end
      
   }                        
   
   if bQueryDS == false or subitem == nil then
      puts
      puts "#{doc["value"].length} item(s)"
      puts
   end
   
   return true
end

## -------------------------------------------------------------

## 
def queryPRIP_DS_to_PDI(user, password, pdi)
   strURL   = %Q{#{PRIP::API_URL_ODATA_PRODUCT}#{PRIP::API_ODATA_FILTER_CONTAINS}(Name,%27#{pdi}%27)}
      
   if @isDebugMode == true then
      puts strURL
   end

   uri   = URI.parse(strURL)
   http  = Net::HTTP.new(uri.host, uri.port)

   http.use_ssl      = true
   http.verify_mode  = OpenSSL::SSL::VERIFY_NONE

   request = Net::HTTP::Get.new(uri.request_uri)
         
   request.basic_auth(user, password)
   response = http.request(request)
      
   if @isDebugMode == true then
      puts strURL
      puts uri.request_uri
      puts response.code
      puts response.message
      puts
   end

   doc = JSON.parse(response.body)
   
   if @isDebugMode == true then
      puts JSON.pretty_generate(doc)
   end
   
   doc["value"].sort_by!{|item| item["Name"]}.each{|item|
      puts item["Name"]
      if @isVerboseMode == true then
         # puts item["ContentLength"]
         puts "Id                : #{item["Id"]}"
         puts "ContentLength     : #{item["ContentLength"]}"
         puts "ContentDate       : #{item["ContentDate"]}"
         puts "PublicationDate   : #{item["PublicationDate"]}"
         puts "EvictionDate      : #{item["EvictionDate"]}"
         puts
      end
   }                        
   
   puts
   puts "#{doc["value"].length} item(s)"
   puts

   if doc["value"].length % 12 != 0 then
      puts
      puts "Missing PDI for #{pdi} !!"
      puts
      exit(99)
   end
end
## -------------------------------------------------------------

## -------------------------------------------------------------

def downloadPDI(uuid)
   ## cmd = "curl -k -L -J -O -v -u #{@user}:#{@password} \"https://90.84.179.7/odata/v1/Products(#{uuid})/\\$value\" "
   
   cmd = "curl --progress-bar -k -L -J -O -u #{@user}:#{@password} \"https://90.84.179.7/odata/v1/Products(#{uuid})/\\$value\" "
   if @isDebugMode == true then
      puts cmd
   end
   
   ret = system(cmd)
   
   return ret
end
## -------------------------------------------------------------

## create File with the query results
def createFileMetadata(mission, data, iSkip)
   prevDir = Dir.pwd
   Dir.chdir(@full_path_dir)
   filename = ""
   
   if @datetime != nil then
      filename = "DEC_OPER_OPDHUS_#{mission}_AUIP_#{@currentDate}_V#{@datetime.gsub("-","").gsub(":","").split(".")[0]}_#{@iTotal}_#{iSkip.to_s.rjust(@iTotal.to_s.length,'0')}.#{@format}"
   end
   
   if @sensingtime != nil then
      filename = "DEC_OPER_OPDHUS_#{mission}_AUIP_#{@currentDate}_V#{@sensingStart.gsub("-","").gsub(":","").split(".")[0]}_#{@sensingEnd.gsub("-","").gsub(":","").split(".")[0]}_#{@iTotal}_#{iSkip.to_s.rjust(@iTotal.to_s.length,'0')}.#{@format}"
   end
   
   if @sensingtime == nil and @datetime == "" then
      filename = "DEC_OPER_OPDHUS_#{mission}_AUIP_#{@currentDate}_#{@iTotal}_#{iSkip.to_s.rjust(@iTotal.to_s.length,'0')}.#{@format}"
   end
   
   filenameTemp = ".TEMP_#{filename}"
   aFile = File.new(filenameTemp, File::CREAT|File::WRONLY) 
   aFile.write(data)   
   aFile.flush
   aFile.close
   begin
      File.rename(filenameTemp, filename)
   rescue Exception => e
      @logger.error("Could not rename #{filenameTemp} to #{filename}")
      @logger.error(e.to_s)
   end
   @logger.info("DHUS S1 created #{filename}")
   Dir.chdir(prevDir)
end
## -------------------------------------------------------------

## -------------------------------------------------------------

## Print command line help
def usage
   fullpathFile = File.expand_path(__FILE__)
   
   value = `#{"head -41 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end
## -------------------------------------------------------------


## ===================================================================
## Start of the main body
main
## End of the main body
##====================================================================
