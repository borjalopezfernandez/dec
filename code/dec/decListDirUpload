#!/usr/bin/env ruby

# == Synopsis
#
# This is a DEC command line tool that lists the contents of the <Upload> directory
# corresponding to a given interface configured in interfaces.xml
#
# == Usage
# decListDirUpload -m <Interface_Name> [-t]
#        --mnemonic  <MNEMONIC> (mnemonic is case sensitive)
#        --temp      it shows the content of the <UploadTemp> directory
#        --Show      it shows all available I/Fs registered in the Inventory
#        --help      shows this help
#        --usage     shows the usage
#        --Debug     shows Debug info during the execution
#        --version   shows version number
# 
# == Author
# Deimos-Space S.L.
#
# == Copyright
# Copyright (c) 2006 ESA - Deimos Space S.L.
#

#########################################################################
###
### === Ruby script decListDirUpload
### 
### === Written by DEIMOS Space S.L. (bolf)
###
### === Data Exchange Component
### 
### Git: $Id: decListDirUpload,v 1.2 2007/06/26 15:53:35 decdev Exp $
###
### decListDirUpload checks what it has been sent to a given entity.
### It checks in the UploadDir and UploadTemp directories 
###
#########################################################################

require 'getoptlong'

require 'dec/DEC_Environment'
require 'dec/ReadInterfaceConfig'
require 'dec/ReadConfigOutgoing'
require 'dec/InterfaceHandlerLocal'
require 'dec/InterfaceHandlerHTTP'
require 'dec/InterfaceHandlerWebDAV'
require 'dec/InterfaceHandlerFTPS'
require 'dec/InterfaceHandlerFTPS_Implicit'
require 'dec/InterfaceHandlerSFTP'
                                   
## MAIN script function
def main
   
   include DEC

   @isDebugMode      = false              
   @isVerboseMode    = false
   @isSecure         = false
   @checkUploadTmp   = false
   @entity           = ""
   @bShowVersion     = false
   @bShowUsage       = false

   opts = GetoptLong.new(
     ["--mnemonic", "-m",       GetoptLong::REQUIRED_ARGUMENT],
     ["--temp", "-t",           GetoptLong::NO_ARGUMENT],     
     ["--Debug", "-D",          GetoptLong::NO_ARGUMENT],
     ["--version", "-v",        GetoptLong::NO_ARGUMENT],
     ["--Verbose", "-V",        GetoptLong::NO_ARGUMENT],
     ["--Show", "-S",           GetoptLong::NO_ARGUMENT],
     ["--help", "-h",           GetoptLong::NO_ARGUMENT]
     )
    
   begin
      opts.each do |opt, arg|
         case opt
            when "--Debug"    then @isDebugMode    = true
            when "--Verbose"  then @isVerboseMode  = true
            when "--version"  then @bShowVersion   = true
            when "--temp"     then @checkUploadTmp = true         
            when "--help"     then @bShowUsage     = true
            when "--mnemonic" then @entity         = arg
            when "--Show"     then @bShowMnemonics = true      
         end
      end
   rescue Exception
     exit(99)
   end
 
   if @bShowVersion == true then
      print("\nESA - DEIMOS-Space S.L. ", File.basename($0), " Version: [#{DEC.class_variable_get(:@@version)}]", "\n\n")
      hRecord = DEC.class_variable_get(:@@change_record)
      hRecord.each_pair{|key, value|
         puts "#{key} => #{value}"
      }      
      exit(0)
   end

   ## --------------------------------------------

   if @bShowUsage == true then
      usage
      exit(0)
   end
   
   ## --------------------------------------------
   
   self.load_config
   
   if @isDebugMode == true then
      self.print_environment
   end
   
   if self.checkEnvironmentEssential == false then
      puts
      self.printEnvironmentError
      puts
      exit(99)
   end
 
   ## --------------------------------------------
 
   # -----------------------------------------------------------------
   #
   # initialize logger
   loggerFactory = CUC::Log4rLoggerFactory.new("list", "#{ENV['DEC_CONFIG']}/dec_log_config.xml")
   if @isDebugMode then
      loggerFactory.setDebugMode
   end
   @logger = loggerFactory.getLogger
   if @logger == nil then
      puts
		puts "Error in decListDirUpload::main"
		puts "Could not set up logging system !  :-("
      puts "Check DEC logs configuration under \"#{ENV['DEC_CONFIG']}/dec_log_config.xml\"" 
		puts
		puts
		exit(99)
   end
   # -----------------------------------------------------------------
   
   if @bShowMnemonics == true then
   
      require 'dec/DEC_DatabaseModel'
   
      arrInterfaces = Interface.all
      if arrInterfaces == nil then
         puts
         puts "Sorry, there are no configured I/Fs :-|"
         puts
      else
         if arrInterfaces.length == 0 then
            puts
            puts "Sorry, there are no configured I/Fs :-|"
            puts
         else
            puts "========= DEC I/Fs ========="
            arrInterfaces.each{|interface|
               print interface.name
               1.upto(25 - interface.name.length) do
                  print " "
               end
               print interface.description
               puts
            }         
         end
      end
      exit(0)
   end

   ## --------------------------------------------

   if @entity == "" then
      usage
      exit(99)
   end
   
   ## --------------------------------------------
   
   # Check Module Integrity
   checkModuleIntegrity
   
   @configFile = DEC::ReadInterfaceConfig.instance

   ## --------------------------------------------

   if @configFile.exists?(@entity) == false then
      print("\n#{@entity} is not a registered I/F in the dec_interfaces.xml config file !  :-(\n\n")
      exit(99)
   end

   @entConf = @configFile.getFTPServer4Send(@entity)  
   
   bProcessed = false
   
   handler = nil
   
   ## ----------------------------------
   ##
   
   ## create handler object driven by the protocol 
   
   case @entConf[:protocol].upcase

      when "SFTP"  then handler = InterfaceHandlerSFTP.new(@entity, @logger, false, true, false, @isDebugMode)
   
      when "FTP"   then handler = InterfaceHandlerFTPS.new(@entity, @logger, false, true, false, @isDebugMode)
                        handler.setNonSecure
      when "FTPS"  then
         if @entConf[:port].to_i == 990 then
            handler = InterfaceHandlerFTPS_Implicit.new(@entity, @logger)
         else
            handler = InterfaceHandlerFTPS.new(@entity, @logger)
         end

      when "LOCAL"  then handler = InterfaceHandlerLocal.new(@entity, @logger, false, true, false, @isDebugMode)
      
	   when "HTTP"   then handler = InterfaceHandlerHTTP.new(@entity, @logger, false, true, false, @isDebugMode)
      
      when "WEBDAV" then handler = InterfaceHandlerWebDAV.new(@entity, @logger, false, true, false, @isDebugMode) 
      else
         @logger.error("#{'1F480'.hex.chr('UTF-8')} #{@entConf[:protocol].upcase} protocol not supported")
         exit(99)
   end
   ## ----------------------------------


   if @isDebugMode == true then
      @logger.debug("I/F #{@entity}:  Checking UploadDir")
   end   
   
   list = handler.getUploadDirList
      
   if list.class.to_s.include?("Array") == true then
      list.each{|file|
         @logger.debug("I/F #{@entity}:  UploadDir: #{file} found")
      }
   end
            
   if @checkUploadTmp != true then
      exit(0)
   end
      
   if @isDebugMode == true then
      @logger.debug("I/F #{@entity}:  Checking UploadTemp")
   end   
      
   list = handler.getUploadDirList(true)

   if list.class.to_s.include?("Array") == true then
      list.each{|file|
         @logger.debug("I/F #{@entity}:  UploadTemp: #{file} found")
      }
   end
      
   exit(0)
   
end

## ---------------------------------------------------------

## ---------------------------------------------------------
##
## Check whether the entity is registered in the config file or not
##
def showInterfaceConfig(entity)
   puts
   puts "============================================================="
   puts "Configuration of #{entity[:mnemonic]} I/F with #{@entConf[:protocol].upcase} for sending data :"
   puts
   if @isSecure == true then 
     puts "Secure conection is used"
   else
     puts "NON Secure conection is used"
   end
   puts "hostname     -> #{entity[:hostname]}"
   puts "port         -> #{entity[:port]}"
   puts "user         -> #{entity[:user]}"
   puts "password     -> #{entity[:password]}"
   puts "upload dir   -> #{ReadConfigOutgoing.instance.getUploadDir(@entity)}"
   puts "upload tmp   -> #{ReadConfigOutgoing.instance.getUploadTemp(@entity)}"
   puts
end
## ---------------------------------------------------------

## ---------------------------------------------------------
   
## Check that everything needed by the class is present.
def checkModuleIntegrity
      
   bDefined = true
   bCheckOK = true
   
   if !ENV['DEC_TMP'] then
     puts "\nDEC_TMP environment variable not defined !  :-(\n\n"
     bCheckOK = false
     bDefined = false
   end
   
   if bCheckOK == false then
     puts "decListDirUpload::checkModuleIntegrity FAILED !\n\n"
     exit(99)
   end     
   
end 
## ---------------------------------------------------------

## ---------------------------------------------------------

## Print command line help
def usage
   fullpathFile = File.expand_path(__FILE__)
   
   value = `#{"head -22 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
end
## ---------------------------------------------------------

## ==========================================================================
## Start of the main body
main
## End of the main body
## ==========================================================================
