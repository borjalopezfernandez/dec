#!/usr/bin/env ruby -W0

require 'rubygems'
require 'test/unit'
require 'fileutils'
require 'date'

require 'cuc/Log4rLoggerFactory'
require 'cuc/DirUtils'

require 'dec/DEC_Environment'
require 'dec/ReadConfigDEC'

# The following configurations support this test interface:
# > rake -f build_aux.rake aux:install
# > rake -f build_dec.rake dec:install   / unit-tests



class DECTestInterface_NOAA_IGRF < Test::Unit::TestCase

   include CUC::DirUtils
   include DEC

   
   # Order of the test cases execution according to defintion within code
   #self.test_order = :defined
      
   ## ------------------------------------------------------
   
   Test::Unit.at_start do
      @my_argv = ARGV.dup
      puts
      puts "======================================"
      puts "DEC NASA Interface Test Cases #{self.class.name.split('::').last}"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end   
      
      @@conf = DEC_Environment.new

      @@conf.wrapper_load_config

      @decConfigDir = ENV['DEC_CONFIG']
 
      ## ----------------------------------
      ## initialize logger
      loggerFactory = CUC::Log4rLoggerFactory.new("test", "#{@decConfigDir}/dec_log_config.xml")
   
      @@logger = loggerFactory.getLogger   
      if @@logger == nil then
         puts
		   puts "Error in #{File.basename(__FILE__)}"
     	   puts "Could not initialize logging system !  :-("
         puts "Check DEC logs configuration under \"#{@decConfigDir}/orchestrator_log_config.xml\"" 
 	      puts
   	   exit(99)
      end

      ## ----------------------------------
      @@conf.wrapper_unset_config

      @@logger.info("NASA interface tests")
      
   end
   
   ## ------------------------------------------------------

   Test::Unit.at_exit do
      @@logger.info("End of DEC tests #{File.basename(__FILE__)}")
   end

   ## ------------------------------------------------------

   def setup
      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s}")
      
      decConfig   = DEC::ReadConfigDEC.instance
      reportDir   = decConfig.getReportDir

      system("\\rm -rf #{reportDir}")
      # system("\\rm -rf /tmp/dec*")
      system("\\rm -rf /tmp/DEC*.log")
      system("\\rm -rf /data/mocExternalInterfaces/log/DEC*.log")
      system("\\rm -rf /tmp/dec/if_noaa_in_basket/*")

      cmd = "mkdir -p /tmp/dec/int/"
      @@logger.debug(cmd)
      system(cmd)

      cmd = "decManageDB -d"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decManageDB -c"
      @@logger.debug(cmd)
      ret = system(cmd)
      
   end

   ## -----------------------------------------------------------

   def teardown      
      @@logger.info("#{File.basename(__FILE__)}::#{__method__.to_s}")
   end


   ## -----------------------------------------------------------

   ## -----------------------------------------------------------
   
   def testIGRF
      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} START")

      cmd = "decConfigInterface2DB -a TEST_NOAA_IGRF"
      @@logger.debug(cmd)
      ret = system(cmd)

      cmd = "decCheckConfig -e TEST_NOAA_IGRF"
      @@logger.info(cmd)
      assert(system(cmd), "list from TEST_NOAA_IGRF")

      cmd = "decGetFromInterface -m TEST_NOAA_IGRF -l"
      @@logger.info(cmd)
      assert(system(cmd), "list from TEST_NOAA_IGRF")

      cmd = "decGetFromInterface -m TEST_NOAA_IGRF --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from TEST_NOAA_IGRF")
  
      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      cmd = "head -1 /tmp/dec/if_noaa_in_basket/igrf13coeffs.txt"
      @@logger.debug(cmd)
      ret = `#{cmd}`
      @@logger.debug(ret.delete("\r \n"))

      # different files can be received with the same filename
      cmd = "decGetFromInterface -m TEST_NOAA_IGRF --no-intray"
      @@logger.info(cmd)
      assert(system(cmd), "pull from TEST_NOAA_IGRF")

      cmd = "decStats"
      @@logger.info(cmd)
      assert(system(cmd), "pull statistics")

      cmd = "head -2 /tmp/dec/if_noaa_in_basket/igrf13coeffs.txt"
      @@logger.debug(cmd)
      ret = `#{cmd}`
      @@logger.debug(ret.delete("\r \n"))

      arr = Dir["/tmp/DEC*.log"]
      # arr = Dir["/data/mocExternalInterfaces/log/DEC*.log"]
      cmd = "grep ERROR #{arr[0]}"
      assert(!system(cmd), "ERROR found in DEC logs in #{__method__.to_s}") 

      @@logger.debug("Verification of log trace: file pull")
      cmd = "grep DEC\_110 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "Pull mission traced in DEC logs in #{__method__.to_s}") 

      # No conversion into any mission so far
      # @@logger.debug("Verification of log trace: File conversion to NAOS mission")
      # cmd = "grep AUX\_001 #{arr[0]}"
      # @@logger.debug(cmd)
      # assert(system(cmd), "File conversion to NAOS mission traced in DEC logs in #{__method__.to_s}") 

      @@logger.debug("Verification of log trace: Duplication of file")
      cmd = "grep DEC\_111 #{arr[0]}"
      @@logger.debug(cmd)
      assert(system(cmd), "File duplication traced in DEC logs in #{__method__.to_s}") 

      @@logger.info("#{self.class.name.split('::').last}::#{__method__.to_s} END")
   end
   ## -----------------------------------------------------------

end

## ===================================================================




