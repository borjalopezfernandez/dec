#!/usr/bin/env ruby

#########################################################################
#
# ===       
#
# === Written by Borja Lopez Fernandez
#
# === Casale & Beach
# 
#
#
#########################################################################

require 'rubygems'
require 'spreadsheet'
require 'ws23rb/WS_PlugIn_Loader'

module WS23RB

class WSExcelFileCreator

   attr_reader :date, :time, :temperature_indoor, :temperature_outdoor, :humidity_indoor,
       :dewpoint, :forecast, :humidity_outdoor, :pressure, :rain_1hour, :windchill,
       :wind_direction, :wind_speed
   #-------------------------------------------------------------
  
   # Class constructor
   def initialize(filename = "", targetFilename = "", debug = false)
      @filename            = filename
      @targetFilename      = targetFilename
      @isDebugMode         = debug
      @book                = Spreadsheet.open(@filename)
      @sheet               = @book.worksheet 0
      checkModuleIntegrity
      @targetbook          = Spreadsheet::Workbook.new()
   end
   #-------------------------------------------------------------
   
   # Set the flag for debugging on
   def setDebugMode
      @isDebugMode = true
      puts "WSExcelFileCreator debug mode is on"
   end
   #-------------------------------------------------------------
   
   #-------------------------------------------------------------

   def createDailySheets
      firstDate         = @sheet[1, @colDate].to_s.delete("-")
      createNewSheet(firstDate)
      
      @arrTargetDailySheets  = Array.new
      @arrTargetDailySheets  << firstDate
      nextDate = firstDate
      x = 0

      @sheet.each{|row|
         if x == 0 then
            x = x + 1
            next
         end
         prevDate = nextDate
         nextDate = row[@colDate].to_s.delete("-")

         if (prevDate != nextDate) then
            @arrTargetDailySheets  << nextDate
            createNewSheet(nextDate)
            x = 1
         end

         y = 0
        
         row.each{|col|
            @targetsheet[x, y] = col 
            y = y + 1

         }
         x = x + 1
      }
      @targetbook.write(@targetFilename)
   end
   #-------------------------------------------------------------



   #-------------------------------------------------------------
   
   def createStatisticSheets
      @arrHeader.each{|col|
         if col.downcase == "date" or col.downcase == "time" then
            next
         end

         sheet = createNewSheet("statistics_#{col}", false)
         sheet[0, 0] = "date"
         sheet[0, 1] = "#{col}_min"
         sheet[0, 2] = "#{col}_avg"
         sheet[0, 3] = "#{col}_max"


         @arrTargetDailySheets.each{|dateSheet|
            sheet[1, 0] = "=\'#{dateSheet}\'!#{@hsColVbles["date"]}2"
         }

      }
      @targetbook.write(@targetFilename)
   end
   #-------------------------------------------------------------

   def verifySourceSheet

     @hiColVbles.each{|field,column|
     
        if field == "time" or field == "date" then
           next
        end

        if field.include?("temperature") == false then
           next
        end

        currTime  = Time.at(1970)
        currValue      = 0.0
        lastTrendValue = 0.0
        bFirst    = true

        bOutTrend = false

        @sheet.each{|row|

           if bFirst == true then
              bFirst = false
              next
           end

           rowDate = row[@colDate].to_s.delete("-")
           rowTime = row[@colTime].to_s.delete(":")

           rowYear  = rowDate.slice(0,4).to_i
           rowMonth = rowDate.slice(4,2).to_i
           rowDay   = rowDate.slice(6,2).to_i
           rowHour  = rowTime.slice(0,2).to_i
           rowMin   = rowTime.slice(2,2).to_i
           rowSec   = rowTime.slice(4,2).to_i

           prevTime = currTime
           currTime = Time.local(rowYear, rowMonth, rowDay, rowHour, rowMin, rowSec)

           if row[column] == "ERROR" then
              if @isDebugMode == true then
                 puts "skipping #{field} value of #{currTime}"
              end
              next
           end

           prevValue = currValue
           currValue = row[column].to_f

           if bOutTrend == false then
              lastTrendValue = prevValue
           end

           if currTime.to_i < prevTime.to_i + 180
              if bOutTrend == true then
                 bOutTrend = false
              
                 if (currValue - lastTrendValue).abs > 3 then
                    bOutTrend = true
                    puts "#{field} value #{currValue} dated in #{currTime} is out of trend"
                 end  

                 next
              end

              if (currValue - prevValue).abs > 3 then
                 bOutTrend = true
                 puts "#{field} value #{currValue} dated in #{currTime} is out of trend"
              end  
           else
              if @isDebugMode == true then
                 puts "data gap between #{currTime} and #{prevTime}"
              end
           end
        
        }

     }


   end
   #-------------------------------------------------------------

private

   def initVariables
      return
   end
   #-------------------------------------------------------------

   # Check that everything needed is present
   def checkModuleIntegrity
      bDefined = true
      bCheckOK = true

      @arrHeader     = @sheet.row(0)
      totCols        = @arrHeader.length
      @colDate       = nil
      @colTime       = nil
      @arrDateTime   = Array.new
      @hsColVbles    = Hash.new
      @hiColVbles    = Hash.new
      iCol           = 0
      sCol           = "A"
      @arrHeader.each{|field|
         
         @hsColVbles[field] = sCol
         @hiColVbles[field] = iCol

         if field.downcase == "date" then
            @colDate = iCol
         end

         if field.downcase == "time" then
            @colTime = iCol
         end

         iCol = iCol + 1
         sCol = sCol.succ
      }

      if @colDate == nil then
         puts "Error, column date not found in excel-sheet"
         bCheckOK = false
      end

      if @colTime == nil then
         puts "Error, column time not found in excel-sheet"
         bCheckOK = false
      end

      if bCheckOK == false then
        puts "WSExcelFileCreator::checkModuleIntegrity FAILED !\n\n"
        exit(99)
      end
   end
   #-------------------------------------------------------------
   
   #-------------------------------------------------------------
   
   # Creates a new sheet
   def createNewSheet(name, bHeader = true)
      @targetsheet      = @targetbook.create_worksheet()
      @targetsheet.name = name
      if bHeader == false then
         @targetbook.write(@targetFilename)
         return @targetsheet
      end 
      iCol = 0
      @arrHeader.each{|field|
         @targetsheet[0, iCol] = field
         iCol = iCol + 1
      }
      @targetbook.write(@targetFilename)
      return @targetsheet
   end
   #-------------------------------------------------------------
   
   #-------------------------------------------------------------

end # class

end # module
