#!/usr/bin/env ruby

# == Synopsis
#
# This is a command line tool that blah blah blah
#
# == Usage
# analytic_E2E.rb  -t --m MOE1,MOE2   [-p "<par1=va1;par2=val2;parn=valn>"]
#     --trigger             it triggers the execution of the analytics
#     --analytic <analytic> analytic to be executed
#     --list                shows all analytics available
#     --List                shows available analytics
#     --parameters <params> it applies the following list of parameters
#              -p "START_UTC=2000-07-07T00:00:00;STOP_UTC=2020-07-11T00:00:00"
#
#     --Arguments <args> optional list of arguments with the following format
#              -A "MISSION=S2A;CENTER=PAC;etc"
#
#     --help                shows this help
#     --Debug               shows Debug info during the execution
#     --version             shows version number      
# 
# == Author
# Borja Lopez Fernandez
#
# == Copyleft
# Casale & Beach
#

#########################################################################
#
# ===       
#
# === Written by Borja Lopez Fernandez
#
# === Casale & Beach
# 
#
#
#########################################################################

require 'rubygems'
require 'getoptlong'


# MAIN script function
def main


   #=======================================================================

   def SIGTERMHandler
      puts "\n[#{File.basename($0)} #{@@mnemonic}] SIGTERM signal received ... sayonara, baby !\n"
      exit(0)
   end
   #=======================================================================

   
   @isDebugMode      = false
   @analytic         = ""
   @parameters       = nil
   @arguments        = nil
   @timeInterval     = nil
   @bIsSilent        = false
   @bVerify          = false
   @plugIn           = false
   
   opts = GetoptLong.new(
     ["--query", "-q",           GetoptLong::REQUIRED_ARGUMENT],
     ["--directory", "-d",       GetoptLong::REQUIRED_ARGUMENT],
     ["--Pattern", "-P",         GetoptLong::REQUIRED_ARGUMENT],
     ["--parameters", "-p",      GetoptLong::REQUIRED_ARGUMENT],
     ["--Arguments", "-A",       GetoptLong::REQUIRED_ARGUMENT],
     ["--analytic", "-a",        GetoptLong::REQUIRED_ARGUMENT],
     ["--excel", "-e",           GetoptLong::REQUIRED_ARGUMENT],
     ["--correctUTC", "-U",      GetoptLong::NO_ARGUMENT],
     ["--trigger", "-t",         GetoptLong::NO_ARGUMENT],
     ["--Debug", "-D",           GetoptLong::NO_ARGUMENT],
     ["--version", "-v",         GetoptLong::NO_ARGUMENT],
     ["--Silent", "-S",          GetoptLong::NO_ARGUMENT],
     ["--Verify", "-V",          GetoptLong::NO_ARGUMENT],
     ["--list", "-l",            GetoptLong::NO_ARGUMENT],
     ["--help", "-h",            GetoptLong::NO_ARGUMENT]
     )
   
   begin 
      opts.each do |opt, arg|
         case opt     
            when "--Debug"   then @isDebugMode = true
            when "--version" then
               print("\nCasale & Beach ", File.basename($0), " $Revision: 1.0 \n\n\n")
               exit (0)
            when "--query" then
               @query = arg
            when "--directory" then
               @directory = arg
            when "--Arguments" then
               @arguments = arg.to_s
            when "--parameters" then
               @parameters = arg.to_s
            when "--analytic" then
               @analytic = arg.to_s
            when "--correctUTC" then 
                  @bCorrectUTC  = true
            when "--trigger"   then 
                  @bTrigger = true
            when "--Silent"    then 
                  @bIsSilent = true
            when "--list"    then list
            when "--List"    then getList
            when "--usage"   then usage
            when "--help"    then usage                      
         end
      end
   rescue Exception
      exit(99)
   end

   if @analytic == "" then
      usage
   end

   require "e2e/Analytic_#{@analytic}"


   analytic = E2E::Analytic_E2E.new(@arguments, @parameters, @isDebugMode)

   # analytic.setDebugMode

   analytic.analysis

   exit

end

#---------------------------------------------------------------------
#---------------------------------------------------------------------
#---------------------------------------------------------------------
#---------------------------------------------------------------------

# Print list of MOE verified for query
def list
   rootDir = ENV['DEC_BASE']
   rootDir = %Q{#{rootDir}/code/e2e/Analytic_*}
   arr     = Dir[rootDir]
   arr.each{|analytic|
      puts File.basename(analytic, ".*").split("Analytic_")[1]
   }
   exit(0)
end
#---------------------------------------------------------------------

#---------------------------------------------------------------------

# Print command line help

def usage
   fullpathFile = `which #{File.basename($0)}`    
   
   value = `#{"head -24 #{fullpathFile}"}`
      
   value.lines.drop(1).each{
      |line|
      len = line.length - 1
      puts line[2, len]
   }
   exit   

end
#-------------------------------------------------------------


#===============================================================================
# Start of the main body
main
# End of the main body
#===============================================================================
