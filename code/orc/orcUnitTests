#!/usr/bin/env ruby

#########################################################################
#
# === Ruby source for #ORC_TestCases class
#
# === Written by DEIMOS Space S.L. (bolf)
#
# === Orchestrator Component
# 
# module ORC
#
#########################################################################

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'ctc/FTPClientCommands'
require 'ctc/ReadInterfaceConfig'
require 'orc/ORC_Environment'


# Preconditions:
# 1 - setup 
# 1.1 - load_config_development
# 1.2 - inventory database is created

# 2 - teardown
# 2.1 - purge archive
# 2.2 - inventory database is destroyed


#  1  - test_commandline_helpers
#  2  - test_parsers
#  3  - test_command_orcQueueInput
#  4  - test_command_orcIngester
#  5  - test_command_orcScheduler
#  6  - test_command_orcBolg

# Select a single test of the suite

# ruby orcUnitTests -n test_my_method 


class ORCTestCase < Test::Unit::TestCase

   include CUC::DirUtils
   include ORC

   
   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   #--------------------------------------------------------
   
   Test::Unit.at_start do      
      puts
      puts "======================================"
      puts "ORC Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      
      if c != 'Y' then
         exit(99)
      end
      
=begin
      puts
      puts
      puts "THINK IT TWICE  !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      
      if c != 'Y' then
         exit(99)
      end

=end      
      
      @@conf = ORC_Environment.new
      
      @@conf.wrapper_load_config_development


      puts      
      @@conf.wrapper_print_environment
      puts
      
      
      @@conf.createEnvironmentDirs
      
      
      require 'orc/ORC_DataModel'
            
      require 'orc/ReadOrchestratorConfig'
      
      orcConfig = ORC::ReadOrchestratorConfig.instance
      
      system("minArcDB -c")
            
   end
   
   #--------------------------------------------------------
   
   Test::Unit.at_exit do
      puts "End of ORC tests"
   end
   
   #--------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      puts __method__.to_s
      puts
      puts "================================================"
      puts "ORC_UnitTests::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development
      
      @path = "#{ENV['MINARC_BASE']}/code/orc"
      
      cmd = "orcManageDB -c"
      ret = system(cmd)
      
      if ret == false then
         puts
         puts "Error when creating the orchestrator inventory ! :-("
         puts
         # exit(99)
      end
#      
#      cmd = "decConfigInterface2DB -p EXTERNAL"
#      
#      ret = system(cmd)
#      
#      if ret == false then
#         puts
#         puts "Error when adding interface configuration to the database ! :-("
#         puts
#         # exit(99)
#      end
      
   end
   # --------------------------------------------------------
   # After every test case

   def teardown
      puts __method__.to_s
      puts
      puts "================================================"
      puts "ORC_UnitTests::#{__method__.to_s}"
      puts

#      @@conf.wrapper_load_config_development
#
#      cmd = "orcManageDB -d"
#      puts cmd
#      ret = system(cmd)
#       
#      if ret == false then
#         puts "Error when dropping the orchestrator inventory ! :-("
#         puts
#         exit(99)
#      end
#
#      system("minArcDB -c")
#      
#      cmd = "minArcPurge -Y"
#      puts cmd
#      ret = system(cmd)
#       
#      if ret == false then
#         puts "Error when cleaning the minarc inventory / archive ! :-("
#         puts
#         exit(99)
#      end
      
      
   end
   # --------------------------------------------------------

   def test_commandline_helpers
   
   
      cmd = "orcIngester"
      assert(!system(cmd), cmd)

      cmd = "orcIngester -v"
      assert(system(cmd), cmd)

      cmd = "orcIngester -u"
      assert(system(cmd), cmd)

      cmd = "orcIngester -h"
      assert(system(cmd), cmd)

      cmd = "orcIngester -c status"
      assert(system(cmd), cmd)

      cmd = "orcIngester -c stop"
      assert(!system(cmd), cmd)

      cmd = "orcIngester -c start"
      assert(!system(cmd), cmd)
   
            
      @@conf.wrapper_unset_config
      
      cmd = "orcIngeter"
      assert(!system(cmd), cmd)

      cmd = "orcQueueInput"
      assert(!system(cmd), cmd)


      @@conf.wrapper_load_config_development

      cmd = "orcIngester -v"
      assert(system(cmd), cmd)

      cmd = "orcQueueInput -v"
      assert(system(cmd), cmd)

      cmd = "orcIngester -h"
      assert(system(cmd), cmd)

      cmd = "orcQueueInput -h"
      assert(system(cmd), cmd)


   end
   # --------------------------------------------------------

   def test_parsers
      
      require 'orc/ReadOrchestratorConfig'
      
      orcConf = ORC::ReadOrchestratorConfig.instance
      orcConf.update
      
      puts "==========================================="
      puts "Data Providers"
      puts orcConf.getAllDataProviders
      puts "==========================================="
      puts "File-Types"
      puts orcConf.getAllFileTypes
      puts "==========================================="
      puts "Data-Types"
      puts orcConf.getAllDataTypes
      puts "==========================================="
      puts "Priority-Rules"
      puts orcConf.getPriorityRules
      puts "==========================================="
      puts "Miscelanea"
      puts orcConf.getAllMiscelanea
      puts "==========================================="

      assert(orcConf.isValidFileType?("REP_OPDPC_"), "REP_OPDPC_ file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_OPDPC_"), "REP_OPDPC_ file-type is trigger type")

   end
   # -------------------------------------------------------------

   def test_command_orcQueueInput
      cmd = "orcQueueInput"
      assert(!system(cmd), cmd)

      cmd = "orcQueueInput -P -s NRT -f S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "orcQueueInput -f S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF -s UKN"
      puts cmd
      assert(system(cmd), cmd)


   end

   # -------------------------------------------------------------

   def test1
   
      @@conf.wrapper_load_config_development
   
      system("minArcPurge -Y")
      # system("minArcDB -d")
      system("minArcDB -c")
      system("orcManageDB -d")
      system("orcManageDB -c")
      FileUtils.rm_f("/tmp/dec_orchestrator.log")
      
      cmd = "orcScheduler -c start"
      assert(system(cmd), cmd)

      sleep(15.0)
      
            
      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > /tmp/S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      
      cmd = "orcIngester -c start -i 60 -d /tmp -D"
      assert(system(cmd), cmd)
      sleep(10.0)
      
      cmd = "orcIngester -c stop"
      assert(system(cmd), cmd)

      sleep(10.0)

      

   end
   # -------------------------------------------------------------

   def test_command_orcIngester

      FileUtils.rm_f("/tmp/dec_orchestrator.log")

      cmd = "orcIngester -c start -i 60 -d /tmp"
      assert(system(cmd), cmd)

      sleep(5.0)

      cmd = "orcIngester -c stop"
      assert(system(cmd), cmd)

      cmd = "minArcPurge -Y"
      assert(system(cmd), cmd)

      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > /tmp/S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000002\' > /tmp/S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000002.EOF")

      cmd = "orcIngester -c start -i 60 -d /tmp -D"
      assert(system(cmd), cmd)

      sleep(10.0)

      cmd = "orcIngester -c stop"
      assert(system(cmd), cmd)

      sleep(5.0)


   end
   # -------------------------------------------------------------
   
   def test_command_orcScheduler

#      FileUtils.rm_f("/tmp/dec_orchestrator.log")
#
#      cmd = "orcScheduler"
#      assert(!system(cmd), cmd)
#
#      cmd = "orcScheduler -c status"
#      assert(system(cmd), cmd)
#
#      cmd = "orcScheduler -c stop"
#      assert(!system(cmd), cmd)

      test_command_orcIngester

      cmd = "orcScheduler -c start"
      assert(system(cmd), cmd)

      sleep(10.0)

      cmd = "orcScheduler -c stop"
      assert(system(cmd), cmd)
      
   end
   
   # -------------------------------------------------------------

   def test_command_orcBolg

      cmd = "orcBolg -c status"
      assert(system(cmd), cmd)

      cmd = "orcBolg -c stop"
      assert(system(cmd), cmd)

      
   end
   # -------------------------------------------------------------

   def test_decConfigInterface2DB
      puts __method__.to_s
      puts
      puts "================================================"
      puts "DEC_UnitTests::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development

      cmd = "decManageDB -v"
      assert(system(cmd), cmd)

      cmd = "decConfigInterface2DB -v"
      assert(system(cmd), cmd)
            
      cmd = "decConfigInterface2DB --add IF_1"
      assert(system(cmd), "decConfigInterface2DB --add IF_1")

      cmd = "decConfigInterface2DB -p EXTERNAL"
      assert(system(cmd), "decConfigInterface2DB --process EXTERNAL")
   end
   #--------------------------------------------------------


   #-------------------------------------------------------------

end


#=====================================================================


#-----------------------------------------------------------


