#!/usr/bin/env ruby

#########################################################################
#
# === Ruby source for #ORC_TestCases class
#
# === Written by DEIMOS Space S.L. (bolf)
#
# === Orchestrator Component
# 
# module ORC
#
#########################################################################

require 'rubygems'
require 'test/unit'
require 'fileutils'

require 'cuc/DirUtils'
require 'ctc/FTPClientCommands'
require 'ctc/ReadInterfaceConfig'

require 'orc/ORC_Environment'
require 'arc/MINARC_Environment'

# Preconditions:
# 1 - setup 
# 1.1 - load_config_development
# 1.2 - inventory database is created

# 2 - teardown
# 2.1 - purge archive
# 2.2 - inventory database is destroyed


#  1  - test_commandline_helpers
#  2  - test_parsers
#  3  - test_command_orcQueueInput
#  4  - test_command_orcIngester
#  5  - test_command_orcScheduler
#  6  - test_command_orcBolg

# Select a single test of the suite

# ruby orcUnitTests -n test_my_method 


class ORCTestCase < Test::Unit::TestCase

   include CUC::DirUtils
   include ORC

   
   # Order of the test cases execution according to defintion within code
   self.test_order = :defined
   
   #--------------------------------------------------------
   
   Test::Unit.at_start do      
      puts
      puts "======================================"
      puts "ORC Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      
      if c != 'Y' then
         exit(99)
      end
      
=begin
      puts
      puts
      puts "THINK IT TWICE  !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      c = STDIN.getc
            
      
      if c != 'Y' then
         exit(99)
      end

=end      
      
      @@conf = ORC_Environment.new      
      @@conf.wrapper_load_config_development

      puts      
      @@conf.wrapper_print_environment
      puts
            
      @@conf.createEnvironmentDirs
      
      
      @@conf = MINARC_Environment.new

      @@conf.wrapper_load_config_development

      puts      
      @@conf.wrapper_print_environment
      puts

      
      require 'orc/ORC_DataModel'
            
      require 'orc/ReadOrchestratorConfig'
      
      orcConfig = ORC::ReadOrchestratorConfig.instance
      
      system("minArcDB -c")
      
      
      @@arrInputFiles = [ \
                           "S2A_OPER_MPL__NPPF__20180720T110000_20180806T140000_0001.TGZ", \
                           "S2A_OPER_MPL_ORBPRE_20180720T030221_20180730T030221_0001.EOF", \
                           "S2A_OPER_REP_PASS_E_EDRS_20180720T235700_V20180720T234817_20180720T235645.EOF", \
                           "S2A_OPER_REP_STNACQ_SGS__20180724T123414_V20180724T120243_20180724T121539.EOF", \
                           "S2A_OPER_MPL_SPMPS__PDMC_20180719T090005_V20180720T090000_20180726T090000.EOF", \
                           "S2A_OPER_MPL_FSSGS__PDMC_20180719T090008_V20180720T090000_20180726T090000.EOF", \
                           "S2__OPER_SRA_EDRS_A_PDMC_20180719T030000_V20180719T030000_20180831T233257.EOF", \
                           "S2B_OPER_REP_OPDPC__SGS__20180721T061746_V20180721T061746_20180721T061746.EOF", \
                           "S2B_OPER_REP_OPDPC__MPC__20180721T061746_V20180721T061746_20180721T061746.EOF", \
                           "S2__OPER_REP_ARC____EPA__20180721T110140_V20180721T085229_20180721T085414.EOF", \
                           "S2__OPER_REP_ARC____MPC__20180721T110140_V20180721T085229_20180721T085414.EOF", \
                           "S2__OPER_REP_OPAI___EPA__20180721T130012_V20180721T010002_20180721T130001.EOF", \
                           "S2__OPER_REP_OPAI___MPC__20180721T130012_V20180721T010002_20180721T130001.EOF", \
                           "S2__OPER_REP_OPLTA__EPA__20180721T130015_V20180721T010002_20180721T130001.EOF", \
                           "S2__OPER_REP_OPLTAS_UPA__20180722T060002_V20180721T030002_20180722T060002.EOF", \
                           "S2__OPER_GIP_PROBA2_MPC__20190502T000212_V20190506T004000_21000101T000000_B00.TGZ", \
                           "S2A_OPER_GIP_PROBAS_MPC__20190307T000207_V20190311T000000_21000101T000000_B00.TGZ", \
                           "S2__OPER_REP_OPDAM1_PDMC_20180721T110501_V20180721T085229_20180721T085229.EOF" \
                           ]
            
   end
   
   #--------------------------------------------------------
   
   Test::Unit.at_exit do
      puts "End of ORC tests"
   end
   
   #--------------------------------------------------------   
   
   # Setup before every test-case
   #
   def setup
      puts __method__.to_s
      puts
      puts "================================================"
      puts "ORC_UnitTests::#{__method__.to_s}"
      puts
      
      @@conf.wrapper_load_config_development
      
      @path = "#{ENV['MINARC_BASE']}/code/orc"
      
      cmd = "orcManageDB -c"
      ret = system(cmd)
      
      if ret == false then
         puts
         puts "Error when creating the orchestrator inventory ! :-("
         puts
         # exit(99)
      end
#      
#      cmd = "decConfigInterface2DB -p EXTERNAL"
#      
#      ret = system(cmd)
#      
#      if ret == false then
#         puts
#         puts "Error when adding interface configuration to the database ! :-("
#         puts
#         # exit(99)
#      end
      
   end
   # --------------------------------------------------------
   # After every test case

   def teardown
      puts __method__.to_s
      puts
      puts "================================================"
      puts "ORC_UnitTests::#{__method__.to_s}"
      puts

#      @@conf.wrapper_load_config_development
#
#      cmd = "orcManageDB -d"
#      puts cmd
#      ret = system(cmd)
#       
#      if ret == false then
#         puts "Error when dropping the orchestrator inventory ! :-("
#         puts
#         exit(99)
#      end
#
#      system("minArcDB -c")
#      
#      cmd = "minArcPurge -Y"
#      puts cmd
#      ret = system(cmd)
#       
#      if ret == false then
#         puts "Error when cleaning the minarc inventory / archive ! :-("
#         puts
#         exit(99)
#      end
      
      
   end
   # --------------------------------------------------------

   def test_commandline_helpers
   
   
      cmd = "orcIngester"
      assert(!system(cmd), cmd)

      cmd = "orcIngester -v"
      assert(system(cmd), cmd)

      cmd = "orcIngester -u"
      assert(system(cmd), cmd)

      cmd = "orcIngester -h"
      assert(system(cmd), cmd)

      cmd = "orcIngester -c status"
      assert(system(cmd), cmd)

      cmd = "orcIngester -c stop"
      assert(!system(cmd), cmd)

      cmd = "orcIngester -c start"
      assert(!system(cmd), cmd)
   
            
      @@conf.wrapper_unset_config
      
      cmd = "orcIngeter"
      assert(!system(cmd), cmd)

      cmd = "orcQueueInput"
      assert(!system(cmd), cmd)


      @@conf.wrapper_load_config_development

      cmd = "orcIngester -v"
      assert(system(cmd), cmd)

      cmd = "orcQueueInput -v"
      assert(system(cmd), cmd)

      cmd = "orcIngester -h"
      assert(system(cmd), cmd)

      cmd = "orcQueueInput -h"
      assert(system(cmd), cmd)


   end
   # --------------------------------------------------------

   def test_parsers
      
      require 'orc/ReadOrchestratorConfig'
      
      orcConf = ORC::ReadOrchestratorConfig.instance
      orcConf.update
      
      puts "==========================================="
      puts "Data Providers"
      puts orcConf.getAllDataProviders
      puts "==========================================="
      puts "File-Types"
      puts orcConf.getAllFileTypes
      puts "==========================================="
      puts "Data-Types"
      puts orcConf.getAllDataTypes
      puts "==========================================="
      puts "Priority-Rules"
      puts orcConf.getPriorityRules
      puts "==========================================="
      puts "Miscelanea"
      puts orcConf.getAllMiscelanea
      puts "==========================================="

      assert(orcConf.isValidFileType?("MPL_ORBPRE"), "MPL_ORBPRE file-type configuration")
      assert(orcConf.isFileTypeTrigger?("MPL_ORBPRE"), "MPL_ORBPRE file-type configuration")

      assert(orcConf.isValidFileType?("MPL_SPMPS_"), "MPL_SP???? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("MPL_SPMPS_"), "MPL_SP???? file-type is trigger type")
      assert(orcConf.isValidFileType?("MPL_SPMTI_"), "MPL_SP???? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("MPL_SPMTI_"), "MPL_SP???? file-type is trigger type")
      assert(orcConf.isValidFileType?("MPL_SPSGS_"), "MPL_SP???? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("MPL_SPSGS_"), "MPL_SP???? file-type is trigger type")

      assert(orcConf.isValidFileType?("MPL_FSMTI_"), "MPL_FS???? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("MPL_FSMTI_"), "MPL_FS???? file-type is trigger type")
      assert(orcConf.isValidFileType?("MPL_FSMPS_"), "MPL_FS???? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("MPL_FSMPS_"), "MPL_FS???? file-type is trigger type")
      assert(orcConf.isValidFileType?("MPL_FSSGS_"), "MPL_FS???? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("MPL_FSSGS_"), "MPL_FS???? file-type is trigger type")

      assert(orcConf.isValidFileType?("REP_PASS_E"), "REP_PASS_? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_PASS_E"), "REP_PASS_? file-type configuration")
      
      assert(orcConf.isValidFileType?("REP_PASS_2"), "REP_PASS_? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_PASS_2"), "REP_PASS_? file-type configuration")
      
      assert(orcConf.isValidFileType?("REP_PASS_5"), "REP_PASS_? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_PASS_5"), "REP_PASS_? file-type configuration")
      
      assert(orcConf.isValidFileType?("REP_OPDPC_"), "REP_OPDPC_ file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_OPDPC_"), "REP_OPDPC_ file-type configuration")

      assert(orcConf.isValidFileType?("REP_OPAI__"), "REP_OPDPC_ file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_OPAI__"), "REP_OPDPC_ file-type configuration")

      assert(orcConf.isValidFileType?("REP_ARC___"), "REP_ARC___ file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_ARC___"), "REP_ARC___ file-type configuration")

      assert(orcConf.isValidFileType?("REP_STNACQ"), "REP_STNACQ file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_STNACQ"), "REP_STNACQ file-type configuration")
      
      assert(orcConf.isValidFileType?("SRA_EDRS_A"), "SRA_EDRS_? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("SRA_EDRS_A"), "SRA_EDRS_? file-type configuration")
      assert(orcConf.isValidFileType?("SRA_EDRS_C"), "SRA_EDRS_? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("SRA_EDRS_C"), "SRA_EDRS_? file-type configuration")
      
      assert(orcConf.isValidFileType?("REP_OPDAM1"), "REP_OPDAM? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_OPDAM1"), "REP_OPDAM? file-type configuration")
      assert(orcConf.isValidFileType?("REP_OPDAM2"), "REP_OPDAM? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_OPDAM2"), "REP_OPDAM? file-type configuration")
      assert(orcConf.isValidFileType?("REP_OPDAM3"), "REP_OPDAM? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_OPDAM3"), "REP_OPDAM? file-type configuration")
      assert(orcConf.isValidFileType?("REP_OPDAM4"), "REP_OPDAM? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_OPDAM4"), "REP_OPDAM? file-type configuration")
      assert(orcConf.isValidFileType?("REP_OPDAM5"), "REP_OPDAM? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_OPDAM5"), "REP_OPDAM? file-type configuration")
      assert(orcConf.isValidFileType?("REP_OPDAM6"), "REP_OPDAM? file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_OPDAM6"), "REP_OPDAM? file-type configuration")
     
      assert(orcConf.isValidFileType?("REP_OPLTA_"), "REP_OPLTA_ file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_OPLTA_"), "REP_OPLTA_ file-type configuration")

      assert(orcConf.isValidFileType?("REP_OPLTAS"), "REP_OPLTAS file-type configuration")
      assert(orcConf.isFileTypeTrigger?("REP_OPLTAS"), "REP_OPLTAS file-type configuration")
      
      assert(orcConf.isValidFileType?("S2A_OPER_REP_OPDPC__MPC__20170214T113527_V20170214T080018_20170214T080336"), "REP_OPDPC_ file-type configuration")
      assert(!orcConf.isFileTypeTrigger?("S2A_OPER_REP_OPDPC__MPC__20170214T113527_V20170214T080018_20170214T080336"), "REP_OPDPC_ file-type configuration")

      assert(orcConf.isValidFileType?("S2A_OPER_REP_OPDPC__SGS__20170214T113527_V20170214T080018_20170214T080336"), "REP_OPDPC_ file-type configuration")
      assert(orcConf.isFileTypeTrigger?("S2A_OPER_REP_OPDPC__SGS__20170214T113527_V20170214T080018_20170214T080336"), "REP_OPDPC_ file-type configuration")

      puts
      
      @@arrInputFiles.each{|file|
         puts file
               
         assert(orcConf.isValidFileType?(file), "wild-card configuration")

         if file.include?("MPC_") == true then
            assert(!orcConf.isFileTypeTrigger?(file), "wild-card configuration")
         else
            assert(orcConf.isFileTypeTrigger?(file), "wild-card configuration")
         end
      }

      puts

   end
   # -------------------------------------------------------------

   def test_command_orcQueueInput
      cmd = "orcQueueInput"
      assert(!system(cmd), cmd)

      cmd = "orcQueueInput -P -s NRT -f S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF"
      puts cmd
      assert(system(cmd), cmd)

      cmd = "orcQueueInput -f S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF -s UKN"
      puts cmd
      assert(system(cmd), cmd)


   end

   # -------------------------------------------------------------

   def test1
   
      @@conf.wrapper_load_config_development
   
      system("minArcPurge -Y")
      # system("minArcDB -d")
      system("minArcDB -c")
      system("orcManageDB -d")
      system("orcManageDB -c")
      FileUtils.rm_f("/tmp/dec_orchestrator.log")
      
      cmd = "orcScheduler -c start"
      assert(system(cmd), cmd)

      sleep(15.0)
      
      
            
      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > /tmp/S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")
      
      cmd = "orcIngester -c start -i 60 -d /tmp -D"
      assert(system(cmd), cmd)
      sleep(10.0)
      
      cmd = "orcIngester -c stop"
      assert(system(cmd), cmd)

      sleep(10.0)

      

   end
   # -------------------------------------------------------------

   def test_command_orcIngester

      FileUtils.rm_f("/tmp/dec_orchestrator.log")

      system("minArcPurge -Y")
      system("minArcDB -d")
      system("minArcDB -c")
      
      system("orcManageDB -d")
      system("orcManageDB -c")
      
      system("orcIngester -c stop")
      
      cmd = "orcIngester -c start -i 60 -d /tmp"
      assert(system(cmd), cmd)

      sleep(5.0)

      @@arrInputFiles.each{|filename|
         puts filename
         system("echo \'#{filename}\' > /tmp/#{filename}")
         sleep(3.0)

      }

      sleep(60.0)

      cmd = "orcIngester -c stop"
      assert(system(cmd), cmd)

      sleep(5.0)

      cmd = "orcIngester -c start -i 60 -d /tmp"
      assert(system(cmd), cmd)

      sleep(40.0)

      cmd = "minArcRetrieve -A -l --noserver"
      arrFiles = `#{cmd}`

      puts arrFiles
      puts arrFiles.split("\n").length
      puts @@arrInputFiles.length

      puts
      puts
      
      cmd = "orcQueueInput -l -P"
      arrFiles = `#{cmd}`
      puts arrFiles
      
      assert(!arrFiles.to_s.include?("_MPC_"), "no MPC files queued")
      

   end
   # -------------------------------------------------------------
   
   def test_command_orcScheduler

#      FileUtils.rm_f("/tmp/dec_orchestrator.log")
#
#      cmd = "orcScheduler"
#      assert(!system(cmd), cmd)
#
#      cmd = "orcScheduler -c status"
#      assert(system(cmd), cmd)
#
#      cmd = "orcScheduler -c stop"
#      assert(!system(cmd), cmd)

      test_command_orcIngester

      cmd = "orcScheduler -c start"
      assert(system(cmd), cmd)

      sleep(10.0)

      cmd = "orcScheduler -c stop"
      assert(system(cmd), cmd)
      
   end
   
   # -------------------------------------------------------------
   
   def test_command_orcQueueInput

      cmd = "orcQueueInput -l -Q"
      assert(system(cmd), cmd)

      cmd = "orcQueueInput -l -P"
      assert(system(cmd), cmd)

      cmd = "orcQueueInput -l -O"
      assert(system(cmd), cmd)

      cmd = "orcQueueInput -l -F"
      assert(system(cmd), cmd)

      cmd = "orcQueueInput -l -S"
      assert(system(cmd), cmd)

      cmd = "orcQueueInput -l -I"
      assert(system(cmd), cmd)


   end   
   
   # -------------------------------------------------------------

   def test_11
      cmd = "minArcPurge -Y"
      assert(system(cmd), cmd)

      system("minArcDB -d")
      system("minArcDB -c")      
      assert(system(cmd), cmd)


      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > /tmp/S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")

      FileUtils.rm_f("/tmp/dec_orchestrator.log")


      system("orcManageDB -d")
      system("orcManageDB -c")

   end
   # -------------------------------------------------------------

   def test_command_orcBolg

      cmd = "minArcPurge -Y"
      assert(system(cmd), cmd)


      system("echo \'S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001\' > /tmp/S2A_OPER_REP_OPDPC__SGS__21000101T000000_V21000101T000000_21000101T000001.EOF")

      FileUtils.rm_f("/tmp/dec_orchestrator.log")


      system("orcManageDB -d")
      system("orcManageDB -c")


#      cmd = "orcBolg -c status"
#      assert(system(cmd), cmd)
#
#      cmd = "orcBolg -c stop"
#      assert(system(cmd), cmd)

      cmd = "orcBolg -c start"
      assert(system(cmd), cmd)

      sleep(20.0)
 
      cmd = "orcBolg -c stop"
      assert(system(cmd), cmd)

      
   end
   # -------------------------------------------------------------

   # --------------------------------------------------------


   # -------------------------------------------------------------

end


# =====================================================================


# -----------------------------------------------------------


