#!/usr/bin/env ruby

#########################################################################
###
### === Wrapper for Ruby to EXPLORER EO CFI by DEIMOS Space S.L.U.      
###
### === Written by Borja Lopez Fernandez
### 
###
#########################################################################

require 'test/unit'

require 'cuc/Converters'
require 'cuc/Log4rLoggerFactory'
require 'mpl/MPL_Environment'

#require_relative 'ruby_earth_explorer_cfi'

## 1 - test_xo_check_library_version
## 2 - test_xo_time_to_orbit
## 3 - test_xo_position_on_orbit_to_time
## 4 - test_xd_read_station_id
## 5 - test_xv_stationvistime_compute

########## 5 - test_xv_stationvistime_compute

class TestCase_ExplorerOrbit < Test::Unit::TestCase

   include CUC::Converters

   # Order of the test cases execution according to definition within code
   self.test_order = :defined
   
   @my_argv = ARGV.dup
   
   ## ------------------------------------------------------
   
   Test::Unit.at_start do      
      puts
      puts "======================================"
      puts "mptools #{File.basename(__FILE__)} Unit Test Cases"
      puts
      puts
      puts "DO NOT EXECUTE IN THE PRODUCTION ENVIRONMENT !!!!!"
      puts
      puts "or with operational data in the archive"
      puts
      puts "THINK CAREFULLY !!! "
      puts
      puts "do you want to continue Y/n" 
      puts
      puts
      
      bBatchmode = false
            
      @my_argv.each{|arg|
         if arg == "batchmode" then
            puts "batch mode execution on"
            bBatchmode = true
            break
         end
      }
       
      if bBatchmode == false then
         c = STDIN.getc
         if c != 'Y' then
            exit(99)
         end
      end

      @@conf = MPL_Environment.new
      @@conf.wrapper_load_config
      @@conf.wrapper_print_environment

      # ------------------------------------------
      # initialize logger
      
      loggerFactory = CUC::Log4rLoggerFactory.new("#{File.basename(__FILE__)}", "#{ENV['MPL_CONFIG']}/mptools_log_config.xml")

      @@logger = loggerFactory.getLogger
      
      if @@logger == nil then
         puts
		   puts "Error in #{File.basename(__FILE__)}"
		   puts "Could not set up logging system !  :-("
         puts "Check MPL logs configuration under \"#{ENV['MPL_CONFIG']}/mptools_log_config.xml\"" 
		   puts
		   puts
		   exit(99)
      end
      # ------------------------------------------


      @@logger.debug("#{MPL.class_variable_get(:@@version)}")
      
      hRecord = MPL.class_variable_get(:@@change_record)
      hRecord.each_pair{|key, value|
         @@logger.debug("#{key} => #{value}")
      }      

      @@logger.debug("End of #{File.basename(__FILE__)}::#{__method__.to_s}")
       
   end

   ## ------------------------------------------------------
   
   Test::Unit.at_exit do
      @@logger.debug("End of #{File.basename(__FILE__)} Unit Test Cases")
   end
   
   ## ------------------------------------------------------

   ## Setup before every test-case
   ##
   def setup
      @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")
   end
   ## ------------------------------------------------------

   ## --------------------------------------------------------
   ## After every test case

   def teardown
      @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")
   end
   ## ------------------------------------------------------

   ## Test to print out the library version

   def test_xo_check_library_version
   
      require_relative 'ruby_earth_explorer_cfi'
   
      @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")
      isDebugMode = true
      test0       = MPL::Earth_Explorer_CFI.new
      val         = test0.xo_check_library_version(isDebugMode)
      @@logger.debug(val)
   end
   ## ------------------------------------------------------

   ## Test to compute the date-time

   def test_xo_time_to_orbit
   
      require_relative 'ruby_earth_explorer_cfi'

      @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")
      
      isDebugMode = true
      strDate     = "20170422T120000"
      test        = MPL::Earth_Explorer_CFI.new
   
      val     = test.xo_time_to_orbit(\
                           "#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBSCT_20150625T073255_99999999T999999_0006.EOF", \
                           strDate, \
                           isDebugMode \
                           )
      @@logger.debug("Date => #{strDate} Orbit => #{val}")
   
      assert(val != -1, "Orbit Absolute obtained from date")
            
      ## error management for orbit ephemeris file not found
      
      val   = test.xo_time_to_orbit(\
                           "wrong_path/S2A_OPER_MPL_ORBSCT_20150625T073255_99999999T999999_0006.EOF", \
                           strDate, \
                           isDebugMode \
                           )   
      assert(val == -1, "Orbit Absolute failed due to wrong path to ROF")
      
   end
   ## ------------------------------------------------------

   ## ------------------------------------------------------

   ## Read Station File

   def test_xd_read_station_id
   
      require_relative 'ruby_earth_explorer_cfi'
      
      @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")   

      statDB         = "#{File.dirname(File.expand_path(__FILE__))}/data/S2__OPER_MPL_GND_DB"
      roef           = "#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBSCT"
      swath          = "#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_SWTVIS"

      test1          = MPL::Earth_Explorer_CFI.new
      arrStationID   = test1.xd_read_station_id(statDB, false)
      arrStationID.each{|stationCode|
         @@logger.debug(stationCode)
      }
      
   end
   ## ------------------------------------------------------

   ## ------------------------------------------------------

   ## ------------------------------------------------------

   ## 

  def test_xv_stationvistime_compute
  
     require_relative 'ruby_earth_explorer_cfi'
  
     @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")   

     statDB         = "#{File.dirname(File.expand_path(__FILE__))}/data/S2__OPER_MPL_GND_DB"
     roef           = "#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBPRE_20170420T072457_20170430T072457_0001.EOF"
     swath          = "#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_SWTVIS"

     cfi            = MPL::Earth_Explorer_CFI.new
     isDebugMode    = false
     arrStationID   = cfi.xd_read_station_id(statDB, isDebugMode)

     puts Dir.pwd

     arrStationID.each{|station_id|
       
        outFile  = "/Users/borja/S2A_OPER_MPL_GNDVIS_#{station_id}.xml"
        
        @@logger.debug("Generating #{outFile} with cfi.xv_stationvistime_compute")
     
      #next
     
        retVal   = cfi.xv_stationvistime_compute(
                                   roef, 
                                   swath, 
                                   statDB, 
                                   station_id,
                                   9572,
                                   9573, 
                                   outFile,
                                   isDebugMode
                                   )
     }

  end
  ## ------------------------------------------------------

  ## Orbit and Angle to Time

    def test_xo_position_on_orbit_to_time
    
       require_relative 'ruby_earth_explorer_cfi'
 
       @@logger.debug("#{File.basename(__FILE__)}::#{__method__.to_s}")   
       
       test        = MPL::Earth_Explorer_CFI.new
    
       lOrbit      = 9572
       fAngleAnx   = 78.1299
       strROF      = "Predicted"
       isDebugMode = true
 
       val = test.xo_position_on_orbit_to_time("#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBPRE_20170420T072457_20170430T072457_0001.EOF", lOrbit, fAngleAnx, isDebugMode)
 
       @@logger.debug("PositionInOrbit (#{strROF}): Orbit => #{lOrbit} / Angle ANX => #{fAngleAnx} => #{val}")
 
       puts val
       puts self.str2date(val).to_time.usec
 
       timePRE = self.str2date(val).to_time
 
       lOrbit      = 9572
       fAngleAnx   = 78.1299
       strROF      = "Reference"
 
       val = test.xo_position_on_orbit_to_time("#{File.dirname(File.expand_path(__FILE__))}/data/S2A_OPER_MPL_ORBSCT_20150625T073255_99999999T999999_0006.EOF", lOrbit, fAngleAnx, isDebugMode)
 
       @@logger.debug("PositionInOrbit (#{strROF}): Orbit => #{lOrbit} / Angle ANX => #{fAngleAnx} => #{val}")
    
       assert(val != -1, "Orbit Angle converted to ANX Time")
             
       @@logger.debug(self.str2date(val).to_time.usec)
       timeOSF = self.str2date(val).to_time
 
       @@logger.debug("Difference between OSF and PRE #{(timeOSF - timePRE)} seconds")
 
       ## error management for orbit ephemeris file not found 
 
       val = test.xo_position_on_orbit_to_time("wrong_path/S2A_OPER_MPL_ORBSCT_20150625T073255_99999999T999999_0006.EOF", lOrbit, fAngleAnx, isDebugMode)
       assert(val == -1, "Orbit Angle to ANX failed due to wrong path to ROF")
 
   
       return
    end
    ## ------------------------------------------------------

   
end


